{"ast":null,"code":"var _jsxFileName = \"/home/mandubian/workspaces/mandubian/bananhack/details_matter_react/src/components/MainArea.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ConversationDisplay from './ConversationDisplay';\nimport InitialSetup from './InitialSetup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainArea = ({\n  conversation,\n  setConversation,\n  currentTurn,\n  setCurrentTurn,\n  style,\n  initialImage,\n  onInitialImageUpload,\n  isApiKeySet,\n  isLoading,\n  setIsLoading,\n  error,\n  setError,\n  success,\n  setSuccess,\n  onClearMessages\n}) => {\n  _s();\n  const [initialPrompt, setInitialPrompt] = useState('');\n  const [uploadedFile, setUploadedFile] = useState(null);\n\n  // Handle undo last turn\n  useEffect(() => {\n    const handleUndo = () => {\n      if (conversation.length > 0) {\n        const lastTurn = conversation[conversation.length - 1];\n\n        // Clean up blob URLs to prevent memory leaks\n        if (lastTurn.image) {\n          URL.revokeObjectURL(lastTurn.image);\n        }\n        setConversation(prev => prev.slice(0, -1));\n        setCurrentTurn(prev => Math.max(0, prev - 1));\n        setSuccess('Last turn undone successfully!');\n        setTimeout(() => setSuccess(null), 3000);\n      }\n    };\n    window.addEventListener('undoLastTurn', handleUndo);\n    return () => window.removeEventListener('undoLastTurn', handleUndo);\n  }, [conversation, setConversation, setCurrentTurn, setSuccess]);\n\n  // Handle initial image upload\n  const handleFileUpload = file => {\n    setUploadedFile(file);\n    onInitialImageUpload(file);\n  };\n\n  // Handle starting the evolution\n  const handleStartEvolution = async () => {\n    if (!initialPrompt.trim()) {\n      setError('Please enter an initial prompt');\n      return;\n    }\n    if (!isApiKeySet) {\n      setError('Please set your API key first');\n      return;\n    }\n    setIsLoading(true);\n    setError(null);\n    onClearMessages();\n    try {\n      // Add human input as turn 0\n      const humanTurn = {\n        id: Date.now(),\n        model_name: 'Human Input',\n        text: initialPrompt,\n        image: uploadedFile ? URL.createObjectURL(uploadedFile) : null,\n        image_description: uploadedFile ? \"Initial uploaded image\" : null,\n        prompt: null,\n        timestamp: new Date().toLocaleTimeString(),\n        style: style\n      };\n      setConversation([humanTurn]);\n      setCurrentTurn(1);\n\n      // Generate first AI turn\n      await generateNextTurn([humanTurn], 1, initialPrompt, uploadedFile);\n      setSuccess('First image generated successfully!');\n      setTimeout(() => setSuccess(null), 3000);\n    } catch (error) {\n      setError(error.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Handle continuing the evolution\n  const handleContinueEvolution = async () => {\n    if (!isApiKeySet) {\n      setError('Please set your API key first');\n      return;\n    }\n    setIsLoading(true);\n    setError(null);\n    onClearMessages();\n    try {\n      await generateNextTurn(conversation, currentTurn, '', null);\n      setSuccess(`Turn ${currentTurn + 1} generated successfully!`);\n      setTimeout(() => setSuccess(null), 3000);\n    } catch (error) {\n      setError(error.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Core generation logic\n  const generateNextTurn = async (currentConversation, turnNumber, initialPromptText = '', previousImageFile = null) => {\n    const {\n      generateContent\n    } = await import('../utils/googleAI');\n    let autoPrompt;\n    let previousImage = null;\n    if (turnNumber === 1) {\n      // First generation: based on initial prompt\n      autoPrompt = `Generate an image based on this prompt: '${initialPromptText}'. Provide a description of the image.`;\n      if (previousImageFile) {\n        previousImage = previousImageFile;\n      }\n    } else {\n      // Subsequent turns: evolve from previous image\n      autoPrompt = \"Based on the previous image, select one important detail for you independently of the rest of the image (e.g., a specific object, character, or element). Describe your choice in text and then create a new story, situation, anecdote or other idea in which that detail is preserved as a detail, not necessarily the main subject of the image. Then, generate a new image from your description, while keeping only this detail recognizable.\";\n\n      // Find the most recent image\n      for (let i = currentConversation.length - 1; i >= 0; i--) {\n        if (currentConversation[i].image) {\n          // Convert blob URL back to File object if needed\n          // This is a simplified version - in practice you might need to store the original file\n          previousImage = currentConversation[i].image;\n          break;\n        }\n      }\n    }\n    const result = await generateContent(autoPrompt, '', previousImage, style);\n    const newTurn = {\n      id: Date.now(),\n      model_name: 'Chief of Details',\n      text: result.text,\n      image: result.image,\n      image_description: result.text,\n      prompt: autoPrompt,\n      timestamp: new Date().toLocaleTimeString(),\n      style: style\n    };\n    setConversation(prev => [...prev, newTurn]);\n    setCurrentTurn(turnNumber + 1);\n  };\n\n  // Handle regenerating a specific turn\n  const handleRegenerateTurn = async turnIndex => {\n    if (!isApiKeySet) {\n      setError('Please set your API key first');\n      return;\n    }\n    setIsLoading(true);\n    setError(null);\n    onClearMessages();\n    try {\n      const {\n        generateContent\n      } = await import('../utils/googleAI');\n\n      // Get the prompt from the turn to regenerate\n      const turnToRegenerate = conversation[turnIndex];\n      const prompt = turnToRegenerate.prompt;\n\n      // Find previous image\n      let previousImage = null;\n      for (let i = turnIndex - 1; i >= 0; i--) {\n        if (conversation[i].image) {\n          previousImage = conversation[i].image;\n          break;\n        }\n      }\n      const result = await generateContent(prompt, '', previousImage, style);\n\n      // Clean up old blob URL\n      if (turnToRegenerate.image) {\n        URL.revokeObjectURL(turnToRegenerate.image);\n      }\n      const updatedTurn = {\n        ...turnToRegenerate,\n        text: result.text,\n        image: result.image,\n        image_description: result.text,\n        timestamp: new Date().toLocaleTimeString()\n      };\n      const newConversation = [...conversation];\n      newConversation[turnIndex] = updatedTurn;\n      setConversation(newConversation);\n      setSuccess(`Turn ${turnIndex} regenerated successfully!`);\n      setTimeout(() => setSuccess(null), 3000);\n    } catch (error) {\n      setError(error.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-area\",\n    children: conversation.length === 0 ? /*#__PURE__*/_jsxDEV(InitialSetup, {\n      initialPrompt: initialPrompt,\n      setInitialPrompt: setInitialPrompt,\n      onFileUpload: handleFileUpload,\n      uploadedFile: uploadedFile,\n      initialImage: initialImage,\n      onStartEvolution: handleStartEvolution,\n      isApiKeySet: isApiKeySet,\n      isLoading: isLoading,\n      style: style\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(ConversationDisplay, {\n      conversation: conversation,\n      onContinue: handleContinueEvolution,\n      onRegenerateTurn: handleRegenerateTurn,\n      currentTurn: currentTurn,\n      style: style,\n      isLoading: isLoading,\n      isApiKeySet: isApiKeySet\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 220,\n    columnNumber: 5\n  }, this);\n};\n_s(MainArea, \"EWXDEQBFmYnuPPblHSTYHbmGjBo=\");\n_c = MainArea;\nexport default MainArea;\nvar _c;\n$RefreshReg$(_c, \"MainArea\");","map":{"version":3,"names":["React","useState","useEffect","ConversationDisplay","InitialSetup","jsxDEV","_jsxDEV","MainArea","conversation","setConversation","currentTurn","setCurrentTurn","style","initialImage","onInitialImageUpload","isApiKeySet","isLoading","setIsLoading","error","setError","success","setSuccess","onClearMessages","_s","initialPrompt","setInitialPrompt","uploadedFile","setUploadedFile","handleUndo","length","lastTurn","image","URL","revokeObjectURL","prev","slice","Math","max","setTimeout","window","addEventListener","removeEventListener","handleFileUpload","file","handleStartEvolution","trim","humanTurn","id","Date","now","model_name","text","createObjectURL","image_description","prompt","timestamp","toLocaleTimeString","generateNextTurn","message","handleContinueEvolution","currentConversation","turnNumber","initialPromptText","previousImageFile","generateContent","autoPrompt","previousImage","i","result","newTurn","handleRegenerateTurn","turnIndex","turnToRegenerate","updatedTurn","newConversation","className","children","onFileUpload","onStartEvolution","fileName","_jsxFileName","lineNumber","columnNumber","onContinue","onRegenerateTurn","_c","$RefreshReg$"],"sources":["/home/mandubian/workspaces/mandubian/bananhack/details_matter_react/src/components/MainArea.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ConversationDisplay from './ConversationDisplay';\nimport InitialSetup from './InitialSetup';\n\nconst MainArea = ({\n  conversation,\n  setConversation,\n  currentTurn,\n  setCurrentTurn,\n  style,\n  initialImage,\n  onInitialImageUpload,\n  isApiKeySet,\n  isLoading,\n  setIsLoading,\n  error,\n  setError,\n  success,\n  setSuccess,\n  onClearMessages\n}) => {\n  const [initialPrompt, setInitialPrompt] = useState('');\n  const [uploadedFile, setUploadedFile] = useState(null);\n\n  // Handle undo last turn\n  useEffect(() => {\n    const handleUndo = () => {\n      if (conversation.length > 0) {\n        const lastTurn = conversation[conversation.length - 1];\n\n        // Clean up blob URLs to prevent memory leaks\n        if (lastTurn.image) {\n          URL.revokeObjectURL(lastTurn.image);\n        }\n\n        setConversation(prev => prev.slice(0, -1));\n        setCurrentTurn(prev => Math.max(0, prev - 1));\n        setSuccess('Last turn undone successfully!');\n        setTimeout(() => setSuccess(null), 3000);\n      }\n    };\n\n    window.addEventListener('undoLastTurn', handleUndo);\n    return () => window.removeEventListener('undoLastTurn', handleUndo);\n  }, [conversation, setConversation, setCurrentTurn, setSuccess]);\n\n  // Handle initial image upload\n  const handleFileUpload = (file) => {\n    setUploadedFile(file);\n    onInitialImageUpload(file);\n  };\n\n  // Handle starting the evolution\n  const handleStartEvolution = async () => {\n    if (!initialPrompt.trim()) {\n      setError('Please enter an initial prompt');\n      return;\n    }\n\n    if (!isApiKeySet) {\n      setError('Please set your API key first');\n      return;\n    }\n\n    setIsLoading(true);\n    setError(null);\n    onClearMessages();\n\n    try {\n      // Add human input as turn 0\n      const humanTurn = {\n        id: Date.now(),\n        model_name: 'Human Input',\n        text: initialPrompt,\n        image: uploadedFile ? URL.createObjectURL(uploadedFile) : null,\n        image_description: uploadedFile ? \"Initial uploaded image\" : null,\n        prompt: null,\n        timestamp: new Date().toLocaleTimeString(),\n        style: style\n      };\n\n      setConversation([humanTurn]);\n      setCurrentTurn(1);\n\n      // Generate first AI turn\n      await generateNextTurn([humanTurn], 1, initialPrompt, uploadedFile);\n\n      setSuccess('First image generated successfully!');\n      setTimeout(() => setSuccess(null), 3000);\n    } catch (error) {\n      setError(error.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Handle continuing the evolution\n  const handleContinueEvolution = async () => {\n    if (!isApiKeySet) {\n      setError('Please set your API key first');\n      return;\n    }\n\n    setIsLoading(true);\n    setError(null);\n    onClearMessages();\n\n    try {\n      await generateNextTurn(conversation, currentTurn, '', null);\n      setSuccess(`Turn ${currentTurn + 1} generated successfully!`);\n      setTimeout(() => setSuccess(null), 3000);\n    } catch (error) {\n      setError(error.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Core generation logic\n  const generateNextTurn = async (currentConversation, turnNumber, initialPromptText = '', previousImageFile = null) => {\n    const { generateContent } = await import('../utils/googleAI');\n\n    let autoPrompt;\n    let previousImage = null;\n\n    if (turnNumber === 1) {\n      // First generation: based on initial prompt\n      autoPrompt = `Generate an image based on this prompt: '${initialPromptText}'. Provide a description of the image.`;\n      if (previousImageFile) {\n        previousImage = previousImageFile;\n      }\n    } else {\n      // Subsequent turns: evolve from previous image\n      autoPrompt = \"Based on the previous image, select one important detail for you independently of the rest of the image (e.g., a specific object, character, or element). Describe your choice in text and then create a new story, situation, anecdote or other idea in which that detail is preserved as a detail, not necessarily the main subject of the image. Then, generate a new image from your description, while keeping only this detail recognizable.\";\n\n      // Find the most recent image\n      for (let i = currentConversation.length - 1; i >= 0; i--) {\n        if (currentConversation[i].image) {\n          // Convert blob URL back to File object if needed\n          // This is a simplified version - in practice you might need to store the original file\n          previousImage = currentConversation[i].image;\n          break;\n        }\n      }\n    }\n\n    const result = await generateContent(autoPrompt, '', previousImage, style);\n\n    const newTurn = {\n      id: Date.now(),\n      model_name: 'Chief of Details',\n      text: result.text,\n      image: result.image,\n      image_description: result.text,\n      prompt: autoPrompt,\n      timestamp: new Date().toLocaleTimeString(),\n      style: style\n    };\n\n    setConversation(prev => [...prev, newTurn]);\n    setCurrentTurn(turnNumber + 1);\n  };\n\n  // Handle regenerating a specific turn\n  const handleRegenerateTurn = async (turnIndex) => {\n    if (!isApiKeySet) {\n      setError('Please set your API key first');\n      return;\n    }\n\n    setIsLoading(true);\n    setError(null);\n    onClearMessages();\n\n    try {\n      const { generateContent } = await import('../utils/googleAI');\n\n      // Get the prompt from the turn to regenerate\n      const turnToRegenerate = conversation[turnIndex];\n      const prompt = turnToRegenerate.prompt;\n\n      // Find previous image\n      let previousImage = null;\n      for (let i = turnIndex - 1; i >= 0; i--) {\n        if (conversation[i].image) {\n          previousImage = conversation[i].image;\n          break;\n        }\n      }\n\n      const result = await generateContent(prompt, '', previousImage, style);\n\n      // Clean up old blob URL\n      if (turnToRegenerate.image) {\n        URL.revokeObjectURL(turnToRegenerate.image);\n      }\n\n      const updatedTurn = {\n        ...turnToRegenerate,\n        text: result.text,\n        image: result.image,\n        image_description: result.text,\n        timestamp: new Date().toLocaleTimeString()\n      };\n\n      const newConversation = [...conversation];\n      newConversation[turnIndex] = updatedTurn;\n      setConversation(newConversation);\n\n      setSuccess(`Turn ${turnIndex} regenerated successfully!`);\n      setTimeout(() => setSuccess(null), 3000);\n    } catch (error) {\n      setError(error.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"main-area\">\n      {conversation.length === 0 ? (\n        <InitialSetup\n          initialPrompt={initialPrompt}\n          setInitialPrompt={setInitialPrompt}\n          onFileUpload={handleFileUpload}\n          uploadedFile={uploadedFile}\n          initialImage={initialImage}\n          onStartEvolution={handleStartEvolution}\n          isApiKeySet={isApiKeySet}\n          isLoading={isLoading}\n          style={style}\n        />\n      ) : (\n        <ConversationDisplay\n          conversation={conversation}\n          onContinue={handleContinueEvolution}\n          onRegenerateTurn={handleRegenerateTurn}\n          currentTurn={currentTurn}\n          style={style}\n          isLoading={isLoading}\n          isApiKeySet={isApiKeySet}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default MainArea;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}