{"ast":null,"code":"/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nclass BaseModule {}\nfunction formatMap(templateString, valueMap) {\n  // Use a regular expression to find all placeholders in the template string\n  const regex = /\\{([^}]+)\\}/g;\n  // Replace each placeholder with its corresponding value from the valueMap\n  return templateString.replace(regex, (match, key) => {\n    if (Object.prototype.hasOwnProperty.call(valueMap, key)) {\n      const value = valueMap[key];\n      // Convert the value to a string if it's not a string already\n      return value !== undefined && value !== null ? String(value) : '';\n    } else {\n      // Handle missing keys\n      throw new Error(\"Key '\".concat(key, \"' not found in valueMap.\"));\n    }\n  });\n}\nfunction setValueByPath(data, keys, value) {\n  for (let i = 0; i < keys.length - 1; i++) {\n    const key = keys[i];\n    if (key.endsWith('[]')) {\n      const keyName = key.slice(0, -2);\n      if (!(keyName in data)) {\n        if (Array.isArray(value)) {\n          data[keyName] = Array.from({\n            length: value.length\n          }, () => ({}));\n        } else {\n          throw new Error(\"Value must be a list given an array path \".concat(key));\n        }\n      }\n      if (Array.isArray(data[keyName])) {\n        const arrayData = data[keyName];\n        if (Array.isArray(value)) {\n          for (let j = 0; j < arrayData.length; j++) {\n            const entry = arrayData[j];\n            setValueByPath(entry, keys.slice(i + 1), value[j]);\n          }\n        } else {\n          for (const d of arrayData) {\n            setValueByPath(d, keys.slice(i + 1), value);\n          }\n        }\n      }\n      return;\n    } else if (key.endsWith('[0]')) {\n      const keyName = key.slice(0, -3);\n      if (!(keyName in data)) {\n        data[keyName] = [{}];\n      }\n      const arrayData = data[keyName];\n      setValueByPath(arrayData[0], keys.slice(i + 1), value);\n      return;\n    }\n    if (!data[key] || typeof data[key] !== 'object') {\n      data[key] = {};\n    }\n    data = data[key];\n  }\n  const keyToSet = keys[keys.length - 1];\n  const existingData = data[keyToSet];\n  if (existingData !== undefined) {\n    if (!value || typeof value === 'object' && Object.keys(value).length === 0) {\n      return;\n    }\n    if (value === existingData) {\n      return;\n    }\n    if (typeof existingData === 'object' && typeof value === 'object' && existingData !== null && value !== null) {\n      Object.assign(existingData, value);\n    } else {\n      throw new Error(\"Cannot set value for an existing key. Key: \".concat(keyToSet));\n    }\n  } else {\n    data[keyToSet] = value;\n  }\n}\nfunction getValueByPath(data, keys) {\n  try {\n    if (keys.length === 1 && keys[0] === '_self') {\n      return data;\n    }\n    for (let i = 0; i < keys.length; i++) {\n      if (typeof data !== 'object' || data === null) {\n        return undefined;\n      }\n      const key = keys[i];\n      if (key.endsWith('[]')) {\n        const keyName = key.slice(0, -2);\n        if (keyName in data) {\n          const arrayData = data[keyName];\n          if (!Array.isArray(arrayData)) {\n            return undefined;\n          }\n          return arrayData.map(d => getValueByPath(d, keys.slice(i + 1)));\n        } else {\n          return undefined;\n        }\n      } else {\n        data = data[key];\n      }\n    }\n    return data;\n  } catch (error) {\n    if (error instanceof TypeError) {\n      return undefined;\n    }\n    throw error;\n  }\n}\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nfunction tModel(apiClient, model) {\n  if (!model || typeof model !== 'string') {\n    throw new Error('model is required and must be a string');\n  }\n  if (apiClient.isVertexAI()) {\n    if (model.startsWith('publishers/') || model.startsWith('projects/') || model.startsWith('models/')) {\n      return model;\n    } else if (model.indexOf('/') >= 0) {\n      const parts = model.split('/', 2);\n      return \"publishers/\".concat(parts[0], \"/models/\").concat(parts[1]);\n    } else {\n      return \"publishers/google/models/\".concat(model);\n    }\n  } else {\n    if (model.startsWith('models/') || model.startsWith('tunedModels/')) {\n      return model;\n    } else {\n      return \"models/\".concat(model);\n    }\n  }\n}\nfunction tCachesModel(apiClient, model) {\n  const transformedModel = tModel(apiClient, model);\n  if (!transformedModel) {\n    return '';\n  }\n  if (transformedModel.startsWith('publishers/') && apiClient.isVertexAI()) {\n    // vertex caches only support model name start with projects.\n    return \"projects/\".concat(apiClient.getProject(), \"/locations/\").concat(apiClient.getLocation(), \"/\").concat(transformedModel);\n  } else if (transformedModel.startsWith('models/') && apiClient.isVertexAI()) {\n    return \"projects/\".concat(apiClient.getProject(), \"/locations/\").concat(apiClient.getLocation(), \"/publishers/google/\").concat(transformedModel);\n  } else {\n    return transformedModel;\n  }\n}\nfunction tPart(apiClient, origin) {\n  if (origin === null || origin === undefined) {\n    throw new Error('PartUnion is required');\n  }\n  if (typeof origin === 'object') {\n    return origin;\n  }\n  if (typeof origin === 'string') {\n    return {\n      text: origin\n    };\n  }\n  throw new Error(\"Unsupported part type: \".concat(typeof origin));\n}\nfunction tParts(apiClient, origin) {\n  if (origin === null || origin === undefined || Array.isArray(origin) && origin.length === 0) {\n    throw new Error('PartListUnion is required');\n  }\n  if (Array.isArray(origin)) {\n    return origin.map(item => tPart(apiClient, item));\n  }\n  return [tPart(apiClient, origin)];\n}\nfunction _isContent(origin) {\n  return origin !== null && origin !== undefined && typeof origin === 'object' && 'parts' in origin && Array.isArray(origin.parts);\n}\nfunction _isFunctionCallPart(origin) {\n  return origin !== null && origin !== undefined && typeof origin === 'object' && 'functionCall' in origin;\n}\nfunction _isUserPart(origin) {\n  if (origin === null || origin === undefined) {\n    return false;\n  }\n  if (_isFunctionCallPart(origin)) {\n    return false;\n  }\n  return true;\n}\nfunction _areUserParts(origin) {\n  if (origin === null || origin === undefined || Array.isArray(origin) && origin.length === 0) {\n    return false;\n  }\n  return origin.every(_isUserPart);\n}\nfunction tContent(apiClient, origin) {\n  if (origin === null || origin === undefined) {\n    throw new Error('ContentUnion is required');\n  }\n  if (_isContent(origin)) {\n    // @ts-expect-error: _isContent is a utility function that checks if the origin is a Content.\n    return origin;\n  }\n  if (_isUserPart(origin)) {\n    return {\n      role: 'user',\n      parts: tParts(apiClient, origin)\n    };\n  } else {\n    return {\n      role: 'model',\n      parts: tParts(apiClient, origin)\n    };\n  }\n}\nfunction tContentsForEmbed(apiClient, origin) {\n  if (!origin) {\n    return [];\n  }\n  if (apiClient.isVertexAI() && Array.isArray(origin)) {\n    return origin.flatMap(item => {\n      const content = tContent(apiClient, item);\n      if (content.parts && content.parts.length > 0 && content.parts[0].text !== undefined) {\n        return [content.parts[0].text];\n      }\n      return [];\n    });\n  } else if (apiClient.isVertexAI()) {\n    const content = tContent(apiClient, origin);\n    if (content.parts && content.parts.length > 0 && content.parts[0].text !== undefined) {\n      return [content.parts[0].text];\n    }\n    return [];\n  }\n  if (Array.isArray(origin)) {\n    return origin.map(item => tContent(apiClient, item));\n  }\n  return [tContent(apiClient, origin)];\n}\nfunction _appendAccumulatedPartsAsContent(apiClient, result, accumulatedParts) {\n  if (accumulatedParts.length === 0) {\n    return;\n  }\n  if (_areUserParts(accumulatedParts)) {\n    result.push({\n      role: 'user',\n      parts: tParts(apiClient, accumulatedParts)\n    });\n  } else {\n    result.push({\n      role: 'model',\n      parts: tParts(apiClient, accumulatedParts)\n    });\n  }\n  accumulatedParts.length = 0; // clear the array inplace\n}\nfunction _handleCurrentPart(apiClient, result, accumulatedParts, currentPart) {\n  if (_isUserPart(currentPart) === _areUserParts(accumulatedParts)) {\n    accumulatedParts.push(currentPart);\n  } else {\n    _appendAccumulatedPartsAsContent(apiClient, result, accumulatedParts);\n    accumulatedParts.length = 0;\n    accumulatedParts.push(currentPart);\n  }\n}\nfunction tContents(apiClient, origin) {\n  if (origin === null || origin === undefined || Array.isArray(origin) && origin.length === 0) {\n    throw new Error('contents are required');\n  }\n  if (!Array.isArray(origin)) {\n    return [tContent(apiClient, origin)];\n  }\n  const result = [];\n  const accumulatedParts = [];\n  for (const content of origin) {\n    if (_isContent(content)) {\n      _appendAccumulatedPartsAsContent(apiClient, result, accumulatedParts);\n      // @ts-expect-error: content is a Content here\n      result.push(content);\n    } else if (typeof content === 'string' || typeof content === 'object' && !Array.isArray(content)) {\n      // @ts-expect-error: content is a part here\n      _handleCurrentPart(apiClient, result, accumulatedParts, content);\n    } else if (Array.isArray(content)) {\n      // if there're consecutive user parts before the list,\n      // convert to UserContent and append to result\n      _appendAccumulatedPartsAsContent(apiClient, result, accumulatedParts);\n      result.push({\n        role: 'user',\n        parts: tParts(apiClient, content)\n      });\n    } else {\n      throw new Error(\"Unsupported content type: \".concat(typeof content));\n    }\n  }\n  _appendAccumulatedPartsAsContent(apiClient, result, accumulatedParts);\n  return result;\n}\nfunction processSchema(apiClient, schema) {\n  if (!apiClient.isVertexAI()) {\n    if ('title' in schema) {\n      delete schema['title'];\n    }\n    if ('default' in schema) {\n      throw new Error('Default value is not supported in the response schema for the Gemini API.');\n    }\n  }\n  if ('anyOf' in schema) {\n    if (!apiClient.isVertexAI()) {\n      throw new Error('AnyOf is not supported in the response schema for the Gemini API.');\n    }\n    if (schema['anyOf'] !== undefined) {\n      for (const subSchema of schema['anyOf']) {\n        processSchema(apiClient, subSchema);\n      }\n    }\n  }\n}\nfunction tSchema(apiClient, schema) {\n  processSchema(apiClient, schema);\n  return schema;\n}\nfunction tSpeechConfig(apiClient, speechConfig) {\n  if (typeof speechConfig === 'object' && 'voiceConfig' in speechConfig) {\n    return speechConfig;\n  } else if (typeof speechConfig === 'string') {\n    return {\n      voiceConfig: {\n        prebuiltVoiceConfig: {\n          voiceName: speechConfig\n        }\n      }\n    };\n  } else {\n    throw new Error(\"Unsupported speechConfig type: \".concat(typeof speechConfig));\n  }\n}\nfunction tTool(apiClient, tool) {\n  return tool;\n}\nfunction tTools(apiClient, tool) {\n  if (!Array.isArray(tool)) {\n    throw new Error('tool is required and must be an array of Tools');\n  }\n  return tool;\n}\n/**\n * Prepends resource name with project, location, resource_prefix if needed.\n *\n * @param client The API client.\n * @param resourceName The resource name.\n * @param resourcePrefix The resource prefix.\n * @param splitsAfterPrefix The number of splits after the prefix.\n * @returns The completed resource name.\n *\n * Examples:\n *\n * ```\n * resource_name = '123'\n * resource_prefix = 'cachedContents'\n * splits_after_prefix = 1\n * client.vertexai = True\n * client.project = 'bar'\n * client.location = 'us-west1'\n * _resource_name(client, resource_name, resource_prefix, splits_after_prefix)\n * returns: 'projects/bar/locations/us-west1/cachedContents/123'\n * ```\n *\n * ```\n * resource_name = 'projects/foo/locations/us-central1/cachedContents/123'\n * resource_prefix = 'cachedContents'\n * splits_after_prefix = 1\n * client.vertexai = True\n * client.project = 'bar'\n * client.location = 'us-west1'\n * _resource_name(client, resource_name, resource_prefix, splits_after_prefix)\n * returns: 'projects/foo/locations/us-central1/cachedContents/123'\n * ```\n *\n * ```\n * resource_name = '123'\n * resource_prefix = 'cachedContents'\n * splits_after_prefix = 1\n * client.vertexai = False\n * _resource_name(client, resource_name, resource_prefix, splits_after_prefix)\n * returns 'cachedContents/123'\n * ```\n *\n * ```\n * resource_name = 'some/wrong/cachedContents/resource/name/123'\n * resource_prefix = 'cachedContents'\n * splits_after_prefix = 1\n * client.vertexai = False\n * # client.vertexai = True\n * _resource_name(client, resource_name, resource_prefix, splits_after_prefix)\n * -> 'some/wrong/resource/name/123'\n * ```\n */\nfunction resourceName(client, resourceName, resourcePrefix) {\n  let splitsAfterPrefix = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  const shouldAppendPrefix = !resourceName.startsWith(\"\".concat(resourcePrefix, \"/\")) && resourceName.split('/').length === splitsAfterPrefix;\n  if (client.isVertexAI()) {\n    if (resourceName.startsWith('projects/')) {\n      return resourceName;\n    } else if (resourceName.startsWith('locations/')) {\n      return \"projects/\".concat(client.getProject(), \"/\").concat(resourceName);\n    } else if (resourceName.startsWith(\"\".concat(resourcePrefix, \"/\"))) {\n      return \"projects/\".concat(client.getProject(), \"/locations/\").concat(client.getLocation(), \"/\").concat(resourceName);\n    } else if (shouldAppendPrefix) {\n      return \"projects/\".concat(client.getProject(), \"/locations/\").concat(client.getLocation(), \"/\").concat(resourcePrefix, \"/\").concat(resourceName);\n    } else {\n      return resourceName;\n    }\n  }\n  if (shouldAppendPrefix) {\n    return \"\".concat(resourcePrefix, \"/\").concat(resourceName);\n  }\n  return resourceName;\n}\nfunction tCachedContentName(apiClient, name) {\n  if (typeof name !== 'string') {\n    throw new Error('name must be a string');\n  }\n  return resourceName(apiClient, name, 'cachedContents');\n}\nfunction tBytes(apiClient, fromImageBytes) {\n  if (typeof fromImageBytes !== 'string') {\n    throw new Error('fromImageBytes must be a string');\n  }\n  // TODO(b/389133914): Remove dummy bytes converter.\n  return fromImageBytes;\n}\nfunction tFileName(apiClient, fromName) {\n  if (typeof fromName !== 'string') {\n    throw new Error('fromName must be a string');\n  }\n  // Remove the files/ prefx for MLdev urls to get the actual name of the file.\n  if (fromName.startsWith('files/')) {\n    return fromName.split('files/')[1];\n  }\n  return fromName;\n}\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * @fileoverview Pagers for the GenAI List APIs.\n */\nvar PagedItem;\n(function (PagedItem) {\n  PagedItem[\"PAGED_ITEM_BATCH_JOBS\"] = \"batchJobs\";\n  PagedItem[\"PAGED_ITEM_MODELS\"] = \"models\";\n  PagedItem[\"PAGED_ITEM_TUNING_JOBS\"] = \"tuningJobs\";\n  PagedItem[\"PAGED_ITEM_FILES\"] = \"files\";\n  PagedItem[\"PAGED_ITEM_CACHED_CONTENTS\"] = \"cachedContents\";\n})(PagedItem || (PagedItem = {}));\n/**\n * Pager class for iterating through paginated results.\n */\nclass Pager {\n  constructor(name, request, response, params) {\n    this.pageInternal = [];\n    this.paramsInternal = {};\n    this.requestInternal = request;\n    this.init(name, response, params);\n  }\n  init(name, response, params) {\n    var _a, _b;\n    this.nameInternal = name;\n    this.pageInternal = response[this.nameInternal] || [];\n    this.idxInternal = 0;\n    let requestParams = {\n      config: {}\n    };\n    if (!params) {\n      requestParams = {\n        config: {}\n      };\n    } else if (typeof params === 'object') {\n      requestParams = Object.assign({}, params);\n    } else {\n      requestParams = params;\n    }\n    if (requestParams['config']) {\n      requestParams['config']['pageToken'] = response['nextPageToken'];\n    }\n    this.paramsInternal = requestParams;\n    this.pageInternalSize = (_b = (_a = requestParams['config']) === null || _a === void 0 ? void 0 : _a['pageSize']) !== null && _b !== void 0 ? _b : this.pageInternal.length;\n  }\n  initNextPage(response) {\n    this.init(this.nameInternal, response, this.paramsInternal);\n  }\n  /**\n   * Returns the current page, which is a list of items.\n   *\n   * @remarks\n   * The first page is retrieved when the pager is created. The returned list of\n   * items could be a subset of the entire list.\n   */\n  get page() {\n    return this.pageInternal;\n  }\n  /**\n   * Returns the type of paged item (for example, ``batch_jobs``).\n   */\n  get name() {\n    return this.nameInternal;\n  }\n  /**\n   * Returns the length of the page fetched each time by this pager.\n   *\n   * @remarks\n   * The number of items in the page is less than or equal to the page length.\n   */\n  get pageSize() {\n    return this.pageInternalSize;\n  }\n  /**\n   * Returns the parameters when making the API request for the next page.\n   *\n   * @remarks\n   * Parameters contain a set of optional configs that can be\n   * used to customize the API request. For example, the `pageToken` parameter\n   * contains the token to request the next page.\n   */\n  get params() {\n    return this.paramsInternal;\n  }\n  /**\n   * Returns the total number of items in the current page.\n   */\n  get pageLength() {\n    return this.pageInternal.length;\n  }\n  /**\n   * Returns the item at the given index.\n   */\n  getItem(index) {\n    return this.pageInternal[index];\n  }\n  /**\n   * Returns an async iterator that support iterating through all items\n   * retrieved from the API.\n   *\n   * @remarks\n   * The iterator will automatically fetch the next page if there are more items\n   * to fetch from the API.\n   *\n   * @example\n   *\n   * ```ts\n   * const pager = await ai.files.list({config: {pageSize: 10}});\n   * for await (const file of pager) {\n   *   console.log(file.name);\n   * }\n   * ```\n   */\n  [Symbol.asyncIterator]() {\n    return {\n      next: async () => {\n        if (this.idxInternal >= this.pageLength) {\n          if (this.hasNextPage()) {\n            await this.nextPage();\n          } else {\n            return {\n              value: undefined,\n              done: true\n            };\n          }\n        }\n        const item = this.getItem(this.idxInternal);\n        this.idxInternal += 1;\n        return {\n          value: item,\n          done: false\n        };\n      },\n      return: async () => {\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n    };\n  }\n  /**\n   * Fetches the next page of items. This makes a new API request.\n   *\n   * @throws {Error} If there are no more pages to fetch.\n   *\n   * @example\n   *\n   * ```ts\n   * const pager = await ai.files.list({config: {pageSize: 10}});\n   * let page = pager.page;\n   * while (true) {\n   *   for (const file of page) {\n   *     console.log(file.name);\n   *   }\n   *   if (!pager.hasNextPage()) {\n   *     break;\n   *   }\n   *   page = await pager.nextPage();\n   * }\n   * ```\n   */\n  async nextPage() {\n    if (!this.hasNextPage()) {\n      throw new Error('No more pages to fetch.');\n    }\n    const response = await this.requestInternal(this.params);\n    this.initNextPage(response);\n    return this.page;\n  }\n  /**\n   * Returns true if there are more pages to fetch from the API.\n   */\n  hasNextPage() {\n    var _a;\n    if (((_a = this.params['config']) === null || _a === void 0 ? void 0 : _a['pageToken']) !== undefined) {\n      return true;\n    }\n    return false;\n  }\n}\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n// Code generated by the Google Gen AI SDK generator DO NOT EDIT.\nvar Outcome;\n(function (Outcome) {\n  Outcome[\"OUTCOME_UNSPECIFIED\"] = \"OUTCOME_UNSPECIFIED\";\n  Outcome[\"OUTCOME_OK\"] = \"OUTCOME_OK\";\n  Outcome[\"OUTCOME_FAILED\"] = \"OUTCOME_FAILED\";\n  Outcome[\"OUTCOME_DEADLINE_EXCEEDED\"] = \"OUTCOME_DEADLINE_EXCEEDED\";\n})(Outcome || (Outcome = {}));\nvar Language;\n(function (Language) {\n  Language[\"LANGUAGE_UNSPECIFIED\"] = \"LANGUAGE_UNSPECIFIED\";\n  Language[\"PYTHON\"] = \"PYTHON\";\n})(Language || (Language = {}));\nvar Type;\n(function (Type) {\n  Type[\"TYPE_UNSPECIFIED\"] = \"TYPE_UNSPECIFIED\";\n  Type[\"STRING\"] = \"STRING\";\n  Type[\"NUMBER\"] = \"NUMBER\";\n  Type[\"INTEGER\"] = \"INTEGER\";\n  Type[\"BOOLEAN\"] = \"BOOLEAN\";\n  Type[\"ARRAY\"] = \"ARRAY\";\n  Type[\"OBJECT\"] = \"OBJECT\";\n})(Type || (Type = {}));\nvar HarmCategory;\n(function (HarmCategory) {\n  HarmCategory[\"HARM_CATEGORY_UNSPECIFIED\"] = \"HARM_CATEGORY_UNSPECIFIED\";\n  HarmCategory[\"HARM_CATEGORY_HATE_SPEECH\"] = \"HARM_CATEGORY_HATE_SPEECH\";\n  HarmCategory[\"HARM_CATEGORY_DANGEROUS_CONTENT\"] = \"HARM_CATEGORY_DANGEROUS_CONTENT\";\n  HarmCategory[\"HARM_CATEGORY_HARASSMENT\"] = \"HARM_CATEGORY_HARASSMENT\";\n  HarmCategory[\"HARM_CATEGORY_SEXUALLY_EXPLICIT\"] = \"HARM_CATEGORY_SEXUALLY_EXPLICIT\";\n  HarmCategory[\"HARM_CATEGORY_CIVIC_INTEGRITY\"] = \"HARM_CATEGORY_CIVIC_INTEGRITY\";\n})(HarmCategory || (HarmCategory = {}));\nvar HarmBlockMethod;\n(function (HarmBlockMethod) {\n  HarmBlockMethod[\"HARM_BLOCK_METHOD_UNSPECIFIED\"] = \"HARM_BLOCK_METHOD_UNSPECIFIED\";\n  HarmBlockMethod[\"SEVERITY\"] = \"SEVERITY\";\n  HarmBlockMethod[\"PROBABILITY\"] = \"PROBABILITY\";\n})(HarmBlockMethod || (HarmBlockMethod = {}));\nvar HarmBlockThreshold;\n(function (HarmBlockThreshold) {\n  HarmBlockThreshold[\"HARM_BLOCK_THRESHOLD_UNSPECIFIED\"] = \"HARM_BLOCK_THRESHOLD_UNSPECIFIED\";\n  HarmBlockThreshold[\"BLOCK_LOW_AND_ABOVE\"] = \"BLOCK_LOW_AND_ABOVE\";\n  HarmBlockThreshold[\"BLOCK_MEDIUM_AND_ABOVE\"] = \"BLOCK_MEDIUM_AND_ABOVE\";\n  HarmBlockThreshold[\"BLOCK_ONLY_HIGH\"] = \"BLOCK_ONLY_HIGH\";\n  HarmBlockThreshold[\"BLOCK_NONE\"] = \"BLOCK_NONE\";\n  HarmBlockThreshold[\"OFF\"] = \"OFF\";\n})(HarmBlockThreshold || (HarmBlockThreshold = {}));\nvar Mode;\n(function (Mode) {\n  Mode[\"MODE_UNSPECIFIED\"] = \"MODE_UNSPECIFIED\";\n  Mode[\"MODE_DYNAMIC\"] = \"MODE_DYNAMIC\";\n})(Mode || (Mode = {}));\nvar FinishReason;\n(function (FinishReason) {\n  FinishReason[\"FINISH_REASON_UNSPECIFIED\"] = \"FINISH_REASON_UNSPECIFIED\";\n  FinishReason[\"STOP\"] = \"STOP\";\n  FinishReason[\"MAX_TOKENS\"] = \"MAX_TOKENS\";\n  FinishReason[\"SAFETY\"] = \"SAFETY\";\n  FinishReason[\"RECITATION\"] = \"RECITATION\";\n  FinishReason[\"OTHER\"] = \"OTHER\";\n  FinishReason[\"BLOCKLIST\"] = \"BLOCKLIST\";\n  FinishReason[\"PROHIBITED_CONTENT\"] = \"PROHIBITED_CONTENT\";\n  FinishReason[\"SPII\"] = \"SPII\";\n  FinishReason[\"MALFORMED_FUNCTION_CALL\"] = \"MALFORMED_FUNCTION_CALL\";\n})(FinishReason || (FinishReason = {}));\nvar HarmProbability;\n(function (HarmProbability) {\n  HarmProbability[\"HARM_PROBABILITY_UNSPECIFIED\"] = \"HARM_PROBABILITY_UNSPECIFIED\";\n  HarmProbability[\"NEGLIGIBLE\"] = \"NEGLIGIBLE\";\n  HarmProbability[\"LOW\"] = \"LOW\";\n  HarmProbability[\"MEDIUM\"] = \"MEDIUM\";\n  HarmProbability[\"HIGH\"] = \"HIGH\";\n})(HarmProbability || (HarmProbability = {}));\nvar HarmSeverity;\n(function (HarmSeverity) {\n  HarmSeverity[\"HARM_SEVERITY_UNSPECIFIED\"] = \"HARM_SEVERITY_UNSPECIFIED\";\n  HarmSeverity[\"HARM_SEVERITY_NEGLIGIBLE\"] = \"HARM_SEVERITY_NEGLIGIBLE\";\n  HarmSeverity[\"HARM_SEVERITY_LOW\"] = \"HARM_SEVERITY_LOW\";\n  HarmSeverity[\"HARM_SEVERITY_MEDIUM\"] = \"HARM_SEVERITY_MEDIUM\";\n  HarmSeverity[\"HARM_SEVERITY_HIGH\"] = \"HARM_SEVERITY_HIGH\";\n})(HarmSeverity || (HarmSeverity = {}));\nvar BlockedReason;\n(function (BlockedReason) {\n  BlockedReason[\"BLOCKED_REASON_UNSPECIFIED\"] = \"BLOCKED_REASON_UNSPECIFIED\";\n  BlockedReason[\"SAFETY\"] = \"SAFETY\";\n  BlockedReason[\"OTHER\"] = \"OTHER\";\n  BlockedReason[\"BLOCKLIST\"] = \"BLOCKLIST\";\n  BlockedReason[\"PROHIBITED_CONTENT\"] = \"PROHIBITED_CONTENT\";\n})(BlockedReason || (BlockedReason = {}));\nvar State;\n(function (State) {\n  State[\"STATE_UNSPECIFIED\"] = \"STATE_UNSPECIFIED\";\n  State[\"ACTIVE\"] = \"ACTIVE\";\n  State[\"ERROR\"] = \"ERROR\";\n})(State || (State = {}));\nvar DynamicRetrievalConfigMode;\n(function (DynamicRetrievalConfigMode) {\n  DynamicRetrievalConfigMode[\"MODE_UNSPECIFIED\"] = \"MODE_UNSPECIFIED\";\n  DynamicRetrievalConfigMode[\"MODE_DYNAMIC\"] = \"MODE_DYNAMIC\";\n})(DynamicRetrievalConfigMode || (DynamicRetrievalConfigMode = {}));\nvar FunctionCallingConfigMode;\n(function (FunctionCallingConfigMode) {\n  FunctionCallingConfigMode[\"MODE_UNSPECIFIED\"] = \"MODE_UNSPECIFIED\";\n  FunctionCallingConfigMode[\"AUTO\"] = \"AUTO\";\n  FunctionCallingConfigMode[\"ANY\"] = \"ANY\";\n  FunctionCallingConfigMode[\"NONE\"] = \"NONE\";\n})(FunctionCallingConfigMode || (FunctionCallingConfigMode = {}));\nvar MediaResolution;\n(function (MediaResolution) {\n  MediaResolution[\"MEDIA_RESOLUTION_UNSPECIFIED\"] = \"MEDIA_RESOLUTION_UNSPECIFIED\";\n  MediaResolution[\"MEDIA_RESOLUTION_LOW\"] = \"MEDIA_RESOLUTION_LOW\";\n  MediaResolution[\"MEDIA_RESOLUTION_MEDIUM\"] = \"MEDIA_RESOLUTION_MEDIUM\";\n  MediaResolution[\"MEDIA_RESOLUTION_HIGH\"] = \"MEDIA_RESOLUTION_HIGH\";\n})(MediaResolution || (MediaResolution = {}));\nvar SafetyFilterLevel;\n(function (SafetyFilterLevel) {\n  SafetyFilterLevel[\"BLOCK_LOW_AND_ABOVE\"] = \"BLOCK_LOW_AND_ABOVE\";\n  SafetyFilterLevel[\"BLOCK_MEDIUM_AND_ABOVE\"] = \"BLOCK_MEDIUM_AND_ABOVE\";\n  SafetyFilterLevel[\"BLOCK_ONLY_HIGH\"] = \"BLOCK_ONLY_HIGH\";\n  SafetyFilterLevel[\"BLOCK_NONE\"] = \"BLOCK_NONE\";\n})(SafetyFilterLevel || (SafetyFilterLevel = {}));\nvar PersonGeneration;\n(function (PersonGeneration) {\n  PersonGeneration[\"DONT_ALLOW\"] = \"DONT_ALLOW\";\n  PersonGeneration[\"ALLOW_ADULT\"] = \"ALLOW_ADULT\";\n  PersonGeneration[\"ALLOW_ALL\"] = \"ALLOW_ALL\";\n})(PersonGeneration || (PersonGeneration = {}));\nvar ImagePromptLanguage;\n(function (ImagePromptLanguage) {\n  ImagePromptLanguage[\"auto\"] = \"auto\";\n  ImagePromptLanguage[\"en\"] = \"en\";\n  ImagePromptLanguage[\"ja\"] = \"ja\";\n  ImagePromptLanguage[\"ko\"] = \"ko\";\n  ImagePromptLanguage[\"hi\"] = \"hi\";\n})(ImagePromptLanguage || (ImagePromptLanguage = {}));\nvar FileState;\n(function (FileState) {\n  FileState[\"STATE_UNSPECIFIED\"] = \"STATE_UNSPECIFIED\";\n  FileState[\"PROCESSING\"] = \"PROCESSING\";\n  FileState[\"ACTIVE\"] = \"ACTIVE\";\n  FileState[\"FAILED\"] = \"FAILED\";\n})(FileState || (FileState = {}));\nvar FileSource;\n(function (FileSource) {\n  FileSource[\"SOURCE_UNSPECIFIED\"] = \"SOURCE_UNSPECIFIED\";\n  FileSource[\"UPLOADED\"] = \"UPLOADED\";\n  FileSource[\"GENERATED\"] = \"GENERATED\";\n})(FileSource || (FileSource = {}));\nvar MaskReferenceMode;\n(function (MaskReferenceMode) {\n  MaskReferenceMode[\"MASK_MODE_DEFAULT\"] = \"MASK_MODE_DEFAULT\";\n  MaskReferenceMode[\"MASK_MODE_USER_PROVIDED\"] = \"MASK_MODE_USER_PROVIDED\";\n  MaskReferenceMode[\"MASK_MODE_BACKGROUND\"] = \"MASK_MODE_BACKGROUND\";\n  MaskReferenceMode[\"MASK_MODE_FOREGROUND\"] = \"MASK_MODE_FOREGROUND\";\n  MaskReferenceMode[\"MASK_MODE_SEMANTIC\"] = \"MASK_MODE_SEMANTIC\";\n})(MaskReferenceMode || (MaskReferenceMode = {}));\nvar ControlReferenceType;\n(function (ControlReferenceType) {\n  ControlReferenceType[\"CONTROL_TYPE_DEFAULT\"] = \"CONTROL_TYPE_DEFAULT\";\n  ControlReferenceType[\"CONTROL_TYPE_CANNY\"] = \"CONTROL_TYPE_CANNY\";\n  ControlReferenceType[\"CONTROL_TYPE_SCRIBBLE\"] = \"CONTROL_TYPE_SCRIBBLE\";\n  ControlReferenceType[\"CONTROL_TYPE_FACE_MESH\"] = \"CONTROL_TYPE_FACE_MESH\";\n})(ControlReferenceType || (ControlReferenceType = {}));\nvar SubjectReferenceType;\n(function (SubjectReferenceType) {\n  SubjectReferenceType[\"SUBJECT_TYPE_DEFAULT\"] = \"SUBJECT_TYPE_DEFAULT\";\n  SubjectReferenceType[\"SUBJECT_TYPE_PERSON\"] = \"SUBJECT_TYPE_PERSON\";\n  SubjectReferenceType[\"SUBJECT_TYPE_ANIMAL\"] = \"SUBJECT_TYPE_ANIMAL\";\n  SubjectReferenceType[\"SUBJECT_TYPE_PRODUCT\"] = \"SUBJECT_TYPE_PRODUCT\";\n})(SubjectReferenceType || (SubjectReferenceType = {}));\nvar Modality;\n(function (Modality) {\n  Modality[\"MODALITY_UNSPECIFIED\"] = \"MODALITY_UNSPECIFIED\";\n  Modality[\"TEXT\"] = \"TEXT\";\n  Modality[\"IMAGE\"] = \"IMAGE\";\n  Modality[\"AUDIO\"] = \"AUDIO\";\n})(Modality || (Modality = {}));\n/** A function response. */\nclass FunctionResponse {}\n/**\n * Creates a `Part` object from a `URI` string.\n */\nfunction createPartFromUri(uri, mimeType) {\n  return {\n    fileData: {\n      fileUri: uri,\n      mimeType: mimeType\n    }\n  };\n}\n/**\n * Creates a `Part` object from a `text` string.\n */\nfunction createPartFromText(text) {\n  return {\n    text: text\n  };\n}\n/**\n * Creates a `Part` object from a `FunctionCall` object.\n */\nfunction createPartFromFunctionCall(name, args) {\n  return {\n    functionCall: {\n      name: name,\n      args: args\n    }\n  };\n}\n/**\n * Creates a `Part` object from a `FunctionResponse` object.\n */\nfunction createPartFromFunctionResponse(id, name, response) {\n  return {\n    functionResponse: {\n      id: id,\n      name: name,\n      response: response\n    }\n  };\n}\n/**\n * Creates a `Part` object from a `base64` `string`.\n */\nfunction createPartFromBase64(data, mimeType) {\n  return {\n    inlineData: {\n      data: data,\n      mimeType: mimeType\n    }\n  };\n}\n/**\n * Creates a `Part` object from the `startOffset` and `endOffset` of a `VideoMetadata` object.\n */\nfunction createPartFromVideoMetadata(startOffset, endOffset) {\n  return {\n    videoMetadata: {\n      startOffset: startOffset,\n      endOffset: endOffset\n    }\n  };\n}\n/**\n * Creates a `Part` object from the `outcome` and `output` of a `CodeExecutionResult` object.\n */\nfunction createPartFromCodeExecutionResult(outcome, output) {\n  return {\n    codeExecutionResult: {\n      outcome: outcome,\n      output: output\n    }\n  };\n}\n/**\n * Creates a `Part` object from the `code` and `language` of an `ExecutableCode` object.\n */\nfunction createPartFromExecutableCode(code, language) {\n  return {\n    executableCode: {\n      code: code,\n      language: language\n    }\n  };\n}\nfunction _isPart(obj) {\n  if (typeof obj === 'object' && obj !== null) {\n    return 'fileData' in obj || 'text' in obj || 'functionCall' in obj || 'functionResponse' in obj || 'inlineData' in obj || 'videoMetadata' in obj || 'codeExecutionResult' in obj || 'executableCode' in obj;\n  }\n  return false;\n}\nfunction _toParts(partOrString) {\n  const parts = [];\n  if (typeof partOrString === 'string') {\n    parts.push(createPartFromText(partOrString));\n  } else if (_isPart(partOrString)) {\n    parts.push(partOrString);\n  } else if (Array.isArray(partOrString)) {\n    if (partOrString.length === 0) {\n      throw new Error('partOrString cannot be an empty array');\n    }\n    for (const part of partOrString) {\n      if (typeof part === 'string') {\n        parts.push(createPartFromText(part));\n      } else if (_isPart(part)) {\n        parts.push(part);\n      } else {\n        throw new Error('element in PartUnion must be a Part object or string');\n      }\n    }\n  } else {\n    throw new Error('partOrString must be a Part object, string, or array');\n  }\n  return parts;\n}\n/**\n * Creates a `Content` object with a user role from a `PartListUnion` object or `string`.\n */\nfunction createUserContent(partOrString) {\n  return {\n    role: 'user',\n    parts: _toParts(partOrString)\n  };\n}\n/**\n * Creates a `Content` object with a model role from a `PartListUnion` object or `string`.\n */\nfunction createModelContent(partOrString) {\n  return {\n    role: 'model',\n    parts: _toParts(partOrString)\n  };\n}\n/** Content filter results for a prompt sent in the request. */\nclass GenerateContentResponsePromptFeedback {}\n/** Usage metadata about response(s). */\nclass GenerateContentResponseUsageMetadata {}\n/** Response message for PredictionService.GenerateContent. */\nclass GenerateContentResponse {\n  /**\n   * Returns the concatenation of all text parts from the first candidate in the response.\n   *\n   * @remarks\n   * If there are multiple candidates in the response, the text from the first\n   * one will be returned.\n   * If there are non-text parts in the response, the concatenation of all text\n   * parts will be returned, and a warning will be logged.\n   * If there are thought parts in the response, the concatenation of all text\n   * parts excluding the thought parts will be returned.\n   *\n   * @example\n   * ```ts\n   * const response = await ai.models.generateContent({\n   *   model: 'gemini-2.0-flash',\n   *   contents:\n   *     'Why is the sky blue?',\n   * });\n   *\n   * console.debug(response.text);\n   * ```\n   */\n  get text() {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    if (((_d = (_c = (_b = (_a = this.candidates) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.content) === null || _c === void 0 ? void 0 : _c.parts) === null || _d === void 0 ? void 0 : _d.length) === 0) {\n      return undefined;\n    }\n    if (this.candidates && this.candidates.length > 1) {\n      console.warn('there are multiple candidates in the response, returning text from the first one.');\n    }\n    let text = '';\n    let anyTextPartText = false;\n    const nonTextParts = [];\n    for (const part of (_h = (_g = (_f = (_e = this.candidates) === null || _e === void 0 ? void 0 : _e[0]) === null || _f === void 0 ? void 0 : _f.content) === null || _g === void 0 ? void 0 : _g.parts) !== null && _h !== void 0 ? _h : []) {\n      for (const [fieldName, fieldValue] of Object.entries(part)) {\n        if (fieldName !== 'text' && fieldName !== 'thought' && (fieldValue !== null || fieldValue !== undefined)) {\n          nonTextParts.push(fieldName);\n        }\n      }\n      if (typeof part.text === 'string') {\n        if (typeof part.thought === 'boolean' && part.thought) {\n          continue;\n        }\n        anyTextPartText = true;\n        text += part.text;\n      }\n    }\n    if (nonTextParts.length > 0) {\n      console.warn(\"there are non-text parts \".concat(nonTextParts, \" in the response, returning concatenation of all text parts. Please refer to the non text parts for a full response from model.\"));\n    }\n    // part.text === '' is different from part.text is null\n    return anyTextPartText ? text : undefined;\n  }\n  /**\n   * Returns the function calls from the first candidate in the response.\n   *\n   * @remarks\n   * If there are multiple candidates in the response, the function calls from\n   * the first one will be returned.\n   * If there are no function calls in the response, undefined will be returned.\n   *\n   * @example\n   * ```ts\n   * const controlLightFunctionDeclaration: FunctionDeclaration = {\n   *   name: 'controlLight',\n   *   parameters: {\n   *   type: Type.OBJECT,\n   *   description: 'Set the brightness and color temperature of a room light.',\n   *   properties: {\n   *     brightness: {\n   *       type: Type.NUMBER,\n   *       description:\n   *         'Light level from 0 to 100. Zero is off and 100 is full brightness.',\n   *     },\n   *     colorTemperature: {\n   *       type: Type.STRING,\n   *       description:\n   *         'Color temperature of the light fixture which can be `daylight`, `cool` or `warm`.',\n   *     },\n   *   },\n   *   required: ['brightness', 'colorTemperature'],\n   *  };\n   *  const response = await ai.models.generateContent({\n   *     model: 'gemini-2.0-flash',\n   *     contents: 'Dim the lights so the room feels cozy and warm.',\n   *     config: {\n   *       tools: [{functionDeclarations: [controlLightFunctionDeclaration]}],\n   *       toolConfig: {\n   *         functionCallingConfig: {\n   *           mode: FunctionCallingConfigMode.ANY,\n   *           allowedFunctionNames: ['controlLight'],\n   *         },\n   *       },\n   *     },\n   *   });\n   *  console.debug(JSON.stringify(response.functionCalls));\n   * ```\n   */\n  get functionCalls() {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    if (((_d = (_c = (_b = (_a = this.candidates) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.content) === null || _c === void 0 ? void 0 : _c.parts) === null || _d === void 0 ? void 0 : _d.length) === 0) {\n      return undefined;\n    }\n    if (this.candidates && this.candidates.length > 1) {\n      console.warn('there are multiple candidates in the response, returning function calls from the first one.');\n    }\n    const functionCalls = (_h = (_g = (_f = (_e = this.candidates) === null || _e === void 0 ? void 0 : _e[0]) === null || _f === void 0 ? void 0 : _f.content) === null || _g === void 0 ? void 0 : _g.parts) === null || _h === void 0 ? void 0 : _h.filter(part => part.functionCall).map(part => part.functionCall).filter(functionCall => functionCall !== undefined);\n    if ((functionCalls === null || functionCalls === void 0 ? void 0 : functionCalls.length) === 0) {\n      return undefined;\n    }\n    return functionCalls;\n  }\n  /**\n   * Returns the first executable code from the first candidate in the response.\n   *\n   * @remarks\n   * If there are multiple candidates in the response, the executable code from\n   * the first one will be returned.\n   * If there are no executable code in the response, undefined will be\n   * returned.\n   *\n   * @example\n   * ```ts\n   * const response = await ai.models.generateContent({\n   *   model: 'gemini-2.0-flash',\n   *   contents:\n   *     'What is the sum of the first 50 prime numbers? Generate and run code for the calculation, and make sure you get all 50.'\n   *   config: {\n   *     tools: [{codeExecution: {}}],\n   *   },\n   * });\n   *\n   * console.debug(response.executableCode);\n   * ```\n   */\n  get executableCode() {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n    if (((_d = (_c = (_b = (_a = this.candidates) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.content) === null || _c === void 0 ? void 0 : _c.parts) === null || _d === void 0 ? void 0 : _d.length) === 0) {\n      return undefined;\n    }\n    if (this.candidates && this.candidates.length > 1) {\n      console.warn('there are multiple candidates in the response, returning executable code from the first one.');\n    }\n    const executableCode = (_h = (_g = (_f = (_e = this.candidates) === null || _e === void 0 ? void 0 : _e[0]) === null || _f === void 0 ? void 0 : _f.content) === null || _g === void 0 ? void 0 : _g.parts) === null || _h === void 0 ? void 0 : _h.filter(part => part.executableCode).map(part => part.executableCode).filter(executableCode => executableCode !== undefined);\n    if ((executableCode === null || executableCode === void 0 ? void 0 : executableCode.length) === 0) {\n      return undefined;\n    }\n    return (_j = executableCode === null || executableCode === void 0 ? void 0 : executableCode[0]) === null || _j === void 0 ? void 0 : _j.code;\n  }\n  /**\n   * Returns the first code execution result from the first candidate in the response.\n   *\n   * @remarks\n   * If there are multiple candidates in the response, the code execution result from\n   * the first one will be returned.\n   * If there are no code execution result in the response, undefined will be returned.\n   *\n   * @example\n   * ```ts\n   * const response = await ai.models.generateContent({\n   *   model: 'gemini-2.0-flash',\n   *   contents:\n   *     'What is the sum of the first 50 prime numbers? Generate and run code for the calculation, and make sure you get all 50.'\n   *   config: {\n   *     tools: [{codeExecution: {}}],\n   *   },\n   * });\n   *\n   * console.debug(response.codeExecutionResult);\n   * ```\n   */\n  get codeExecutionResult() {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n    if (((_d = (_c = (_b = (_a = this.candidates) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.content) === null || _c === void 0 ? void 0 : _c.parts) === null || _d === void 0 ? void 0 : _d.length) === 0) {\n      return undefined;\n    }\n    if (this.candidates && this.candidates.length > 1) {\n      console.warn('there are multiple candidates in the response, returning code execution result from the first one.');\n    }\n    const codeExecutionResult = (_h = (_g = (_f = (_e = this.candidates) === null || _e === void 0 ? void 0 : _e[0]) === null || _f === void 0 ? void 0 : _f.content) === null || _g === void 0 ? void 0 : _g.parts) === null || _h === void 0 ? void 0 : _h.filter(part => part.codeExecutionResult).map(part => part.codeExecutionResult).filter(codeExecutionResult => codeExecutionResult !== undefined);\n    if ((codeExecutionResult === null || codeExecutionResult === void 0 ? void 0 : codeExecutionResult.length) === 0) {\n      return undefined;\n    }\n    return (_j = codeExecutionResult === null || codeExecutionResult === void 0 ? void 0 : codeExecutionResult[0]) === null || _j === void 0 ? void 0 : _j.output;\n  }\n}\n/** Response for the embed_content method. */\nclass EmbedContentResponse {}\n/** The output images response. */\nclass GenerateImagesResponse {}\n/** Response for counting tokens. */\nclass CountTokensResponse {}\n/** Response for computing tokens. */\nclass ComputeTokensResponse {}\n/** Empty response for caches.delete method. */\nclass DeleteCachedContentResponse {}\nclass ListCachedContentsResponse {}\n/** Response for the list files method. */\nclass ListFilesResponse {}\n/** A wrapper class for the http response. */\nclass HttpResponse {\n  constructor(response) {\n    // Process the headers.\n    const headers = {};\n    for (const pair of response.headers.entries()) {\n      headers[pair[0]] = pair[1];\n    }\n    this.headers = headers;\n    // Keep the original response.\n    this.responseInternal = response;\n  }\n  json() {\n    return this.responseInternal.json();\n  }\n}\n/** Response for the create file method. */\nclass CreateFileResponse {}\n/** Represents a single response in a replay. */\nclass ReplayResponse {}\n/** Client generated response to a `ToolCall` received from the server.\n\n  Individual `FunctionResponse` objects are matched to the respective\n  `FunctionCall` objects by the `id` field.\n\n  Note that in the unary and server-streaming GenerateContent APIs function\n  calling happens by exchanging the `Content` parts, while in the bidi\n  GenerateContent APIs function calling happens over this dedicated set of\n  messages.\n   */\nclass LiveClientToolResponse {}\n/** Parameters for sending tool responses to the live API. */\nclass SessionSendToolResponseParameters {\n  constructor() {\n    /** Tool responses to send to the session. */\n    this.functionResponses = [];\n  }\n}\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nclass Caches extends BaseModule {\n  constructor(apiClient) {\n    var _this;\n    super();\n    _this = this;\n    this.apiClient = apiClient;\n    /**\n     * Lists cached content configurations.\n     *\n     * @param params - The parameters for the list request.\n     * @return The paginated results of the list of cached contents.\n     *\n     * @example\n     * ```ts\n     * const cachedContents = await ai.caches.list({config: {'pageSize': 2}});\n     * for (const cachedContent of cachedContents) {\n     *   console.log(cachedContent);\n     * }\n     * ```\n     */\n    this.list = async function () {\n      let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return new Pager(PagedItem.PAGED_ITEM_CACHED_CONTENTS, x => _this.listInternal(x), await _this.listInternal(params), params);\n    };\n  }\n  /**\n   * Creates a cached contents resource.\n   *\n   * @param params - The parameters for the create request.\n   * @return The created cached content.\n   *\n   * @example\n   * ```ts\n   * const contents = ...; // Initialize the content to cache.\n   * const response = await ai.caches.create({\n   *   model: 'gemini-2.0-flash',\n   *   config: {\n   *    'contents': contents,\n   *    'displayName': 'test cache',\n   *    'systemInstruction': 'What is the sum of the two pdfs?',\n   *    'ttl': '86400s',\n   *  }\n   * });\n   * ```\n   */\n  async create(params) {\n    var _a, _b;\n    let response;\n    let path = '';\n    let queryParams = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = createCachedContentParametersToVertex(this.apiClient, params);\n      path = formatMap('cachedContents', body['_url']);\n      queryParams = body['_query'];\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n      response = this.apiClient.request({\n        path: path,\n        queryParams: queryParams,\n        body: JSON.stringify(body),\n        httpMethod: 'POST',\n        httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions\n      }).then(httpResponse => {\n        return httpResponse.json();\n      });\n      return response.then(apiResponse => {\n        const resp = cachedContentFromVertex(this.apiClient, apiResponse);\n        return resp;\n      });\n    } else {\n      const body = createCachedContentParametersToMldev(this.apiClient, params);\n      path = formatMap('cachedContents', body['_url']);\n      queryParams = body['_query'];\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n      response = this.apiClient.request({\n        path: path,\n        queryParams: queryParams,\n        body: JSON.stringify(body),\n        httpMethod: 'POST',\n        httpOptions: (_b = params.config) === null || _b === void 0 ? void 0 : _b.httpOptions\n      }).then(httpResponse => {\n        return httpResponse.json();\n      });\n      return response.then(apiResponse => {\n        const resp = cachedContentFromMldev(this.apiClient, apiResponse);\n        return resp;\n      });\n    }\n  }\n  /**\n   * Gets cached content configurations.\n   *\n   * @param params - The parameters for the get request.\n   * @return The cached content.\n   *\n   * @example\n   * ```ts\n   * await ai.caches.get({name: 'gemini-1.5-flash'});\n   * ```\n   */\n  async get(params) {\n    var _a, _b;\n    let response;\n    let path = '';\n    let queryParams = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = getCachedContentParametersToVertex(this.apiClient, params);\n      path = formatMap('{name}', body['_url']);\n      queryParams = body['_query'];\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n      response = this.apiClient.request({\n        path: path,\n        queryParams: queryParams,\n        body: JSON.stringify(body),\n        httpMethod: 'GET',\n        httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions\n      }).then(httpResponse => {\n        return httpResponse.json();\n      });\n      return response.then(apiResponse => {\n        const resp = cachedContentFromVertex(this.apiClient, apiResponse);\n        return resp;\n      });\n    } else {\n      const body = getCachedContentParametersToMldev(this.apiClient, params);\n      path = formatMap('{name}', body['_url']);\n      queryParams = body['_query'];\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n      response = this.apiClient.request({\n        path: path,\n        queryParams: queryParams,\n        body: JSON.stringify(body),\n        httpMethod: 'GET',\n        httpOptions: (_b = params.config) === null || _b === void 0 ? void 0 : _b.httpOptions\n      }).then(httpResponse => {\n        return httpResponse.json();\n      });\n      return response.then(apiResponse => {\n        const resp = cachedContentFromMldev(this.apiClient, apiResponse);\n        return resp;\n      });\n    }\n  }\n  /**\n   * Deletes cached content.\n   *\n   * @param params - The parameters for the delete request.\n   * @return The empty response returned by the API.\n   *\n   * @example\n   * ```ts\n   * await ai.caches.delete({name: 'gemini-1.5-flash'});\n   * ```\n   */\n  async delete(params) {\n    var _a, _b;\n    let response;\n    let path = '';\n    let queryParams = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = deleteCachedContentParametersToVertex(this.apiClient, params);\n      path = formatMap('{name}', body['_url']);\n      queryParams = body['_query'];\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n      response = this.apiClient.request({\n        path: path,\n        queryParams: queryParams,\n        body: JSON.stringify(body),\n        httpMethod: 'DELETE',\n        httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions\n      }).then(httpResponse => {\n        return httpResponse.json();\n      });\n      return response.then(apiResponse => {\n        const resp = deleteCachedContentResponseFromVertex(this.apiClient);\n        const typedResp = new DeleteCachedContentResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    } else {\n      const body = deleteCachedContentParametersToMldev(this.apiClient, params);\n      path = formatMap('{name}', body['_url']);\n      queryParams = body['_query'];\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n      response = this.apiClient.request({\n        path: path,\n        queryParams: queryParams,\n        body: JSON.stringify(body),\n        httpMethod: 'DELETE',\n        httpOptions: (_b = params.config) === null || _b === void 0 ? void 0 : _b.httpOptions\n      }).then(httpResponse => {\n        return httpResponse.json();\n      });\n      return response.then(apiResponse => {\n        const resp = deleteCachedContentResponseFromMldev(this.apiClient);\n        const typedResp = new DeleteCachedContentResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    }\n  }\n  /**\n   * Updates cached content configurations.\n   *\n   * @param params - The parameters for the update request.\n   * @return The updated cached content.\n   *\n   * @example\n   * ```ts\n   * const response = await ai.caches.update({\n   *   name: 'gemini-1.5-flash',\n   *   config: {'ttl': '7600s'}\n   * });\n   * ```\n   */\n  async update(params) {\n    var _a, _b;\n    let response;\n    let path = '';\n    let queryParams = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = updateCachedContentParametersToVertex(this.apiClient, params);\n      path = formatMap('{name}', body['_url']);\n      queryParams = body['_query'];\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n      response = this.apiClient.request({\n        path: path,\n        queryParams: queryParams,\n        body: JSON.stringify(body),\n        httpMethod: 'PATCH',\n        httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions\n      }).then(httpResponse => {\n        return httpResponse.json();\n      });\n      return response.then(apiResponse => {\n        const resp = cachedContentFromVertex(this.apiClient, apiResponse);\n        return resp;\n      });\n    } else {\n      const body = updateCachedContentParametersToMldev(this.apiClient, params);\n      path = formatMap('{name}', body['_url']);\n      queryParams = body['_query'];\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n      response = this.apiClient.request({\n        path: path,\n        queryParams: queryParams,\n        body: JSON.stringify(body),\n        httpMethod: 'PATCH',\n        httpOptions: (_b = params.config) === null || _b === void 0 ? void 0 : _b.httpOptions\n      }).then(httpResponse => {\n        return httpResponse.json();\n      });\n      return response.then(apiResponse => {\n        const resp = cachedContentFromMldev(this.apiClient, apiResponse);\n        return resp;\n      });\n    }\n  }\n  async listInternal(params) {\n    var _a, _b;\n    let response;\n    let path = '';\n    let queryParams = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = listCachedContentsParametersToVertex(this.apiClient, params);\n      path = formatMap('cachedContents', body['_url']);\n      queryParams = body['_query'];\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n      response = this.apiClient.request({\n        path: path,\n        queryParams: queryParams,\n        body: JSON.stringify(body),\n        httpMethod: 'GET',\n        httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions\n      }).then(httpResponse => {\n        return httpResponse.json();\n      });\n      return response.then(apiResponse => {\n        const resp = listCachedContentsResponseFromVertex(this.apiClient, apiResponse);\n        const typedResp = new ListCachedContentsResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    } else {\n      const body = listCachedContentsParametersToMldev(this.apiClient, params);\n      path = formatMap('cachedContents', body['_url']);\n      queryParams = body['_query'];\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n      response = this.apiClient.request({\n        path: path,\n        queryParams: queryParams,\n        body: JSON.stringify(body),\n        httpMethod: 'GET',\n        httpOptions: (_b = params.config) === null || _b === void 0 ? void 0 : _b.httpOptions\n      }).then(httpResponse => {\n        return httpResponse.json();\n      });\n      return response.then(apiResponse => {\n        const resp = listCachedContentsResponseFromMldev(this.apiClient, apiResponse);\n        const typedResp = new ListCachedContentsResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    }\n  }\n}\nfunction partToMldev$1(apiClient, fromObject) {\n  const toObject = {};\n  if (getValueByPath(fromObject, ['videoMetadata']) !== undefined) {\n    throw new Error('videoMetadata parameter is not supported in Gemini API.');\n  }\n  const fromThought = getValueByPath(fromObject, ['thought']);\n  if (fromThought != null) {\n    setValueByPath(toObject, ['thought'], fromThought);\n  }\n  const fromCodeExecutionResult = getValueByPath(fromObject, ['codeExecutionResult']);\n  if (fromCodeExecutionResult != null) {\n    setValueByPath(toObject, ['codeExecutionResult'], fromCodeExecutionResult);\n  }\n  const fromExecutableCode = getValueByPath(fromObject, ['executableCode']);\n  if (fromExecutableCode != null) {\n    setValueByPath(toObject, ['executableCode'], fromExecutableCode);\n  }\n  const fromFileData = getValueByPath(fromObject, ['fileData']);\n  if (fromFileData != null) {\n    setValueByPath(toObject, ['fileData'], fromFileData);\n  }\n  const fromFunctionCall = getValueByPath(fromObject, ['functionCall']);\n  if (fromFunctionCall != null) {\n    setValueByPath(toObject, ['functionCall'], fromFunctionCall);\n  }\n  const fromFunctionResponse = getValueByPath(fromObject, ['functionResponse']);\n  if (fromFunctionResponse != null) {\n    setValueByPath(toObject, ['functionResponse'], fromFunctionResponse);\n  }\n  const fromInlineData = getValueByPath(fromObject, ['inlineData']);\n  if (fromInlineData != null) {\n    setValueByPath(toObject, ['inlineData'], fromInlineData);\n  }\n  const fromText = getValueByPath(fromObject, ['text']);\n  if (fromText != null) {\n    setValueByPath(toObject, ['text'], fromText);\n  }\n  return toObject;\n}\nfunction partToVertex$1(apiClient, fromObject) {\n  const toObject = {};\n  const fromVideoMetadata = getValueByPath(fromObject, ['videoMetadata']);\n  if (fromVideoMetadata != null) {\n    setValueByPath(toObject, ['videoMetadata'], fromVideoMetadata);\n  }\n  const fromThought = getValueByPath(fromObject, ['thought']);\n  if (fromThought != null) {\n    setValueByPath(toObject, ['thought'], fromThought);\n  }\n  const fromCodeExecutionResult = getValueByPath(fromObject, ['codeExecutionResult']);\n  if (fromCodeExecutionResult != null) {\n    setValueByPath(toObject, ['codeExecutionResult'], fromCodeExecutionResult);\n  }\n  const fromExecutableCode = getValueByPath(fromObject, ['executableCode']);\n  if (fromExecutableCode != null) {\n    setValueByPath(toObject, ['executableCode'], fromExecutableCode);\n  }\n  const fromFileData = getValueByPath(fromObject, ['fileData']);\n  if (fromFileData != null) {\n    setValueByPath(toObject, ['fileData'], fromFileData);\n  }\n  const fromFunctionCall = getValueByPath(fromObject, ['functionCall']);\n  if (fromFunctionCall != null) {\n    setValueByPath(toObject, ['functionCall'], fromFunctionCall);\n  }\n  const fromFunctionResponse = getValueByPath(fromObject, ['functionResponse']);\n  if (fromFunctionResponse != null) {\n    setValueByPath(toObject, ['functionResponse'], fromFunctionResponse);\n  }\n  const fromInlineData = getValueByPath(fromObject, ['inlineData']);\n  if (fromInlineData != null) {\n    setValueByPath(toObject, ['inlineData'], fromInlineData);\n  }\n  const fromText = getValueByPath(fromObject, ['text']);\n  if (fromText != null) {\n    setValueByPath(toObject, ['text'], fromText);\n  }\n  return toObject;\n}\n/** @internal */\nfunction contentToMldev$1(apiClient, fromObject) {\n  const toObject = {};\n  const fromParts = getValueByPath(fromObject, ['parts']);\n  if (fromParts != null) {\n    if (Array.isArray(fromParts)) {\n      setValueByPath(toObject, ['parts'], fromParts.map(item => {\n        return partToMldev$1(apiClient, item);\n      }));\n    } else {\n      setValueByPath(toObject, ['parts'], fromParts);\n    }\n  }\n  const fromRole = getValueByPath(fromObject, ['role']);\n  if (fromRole != null) {\n    setValueByPath(toObject, ['role'], fromRole);\n  }\n  return toObject;\n}\n/** @internal */\nfunction contentToVertex$1(apiClient, fromObject) {\n  const toObject = {};\n  const fromParts = getValueByPath(fromObject, ['parts']);\n  if (fromParts != null) {\n    if (Array.isArray(fromParts)) {\n      setValueByPath(toObject, ['parts'], fromParts.map(item => {\n        return partToVertex$1(apiClient, item);\n      }));\n    } else {\n      setValueByPath(toObject, ['parts'], fromParts);\n    }\n  }\n  const fromRole = getValueByPath(fromObject, ['role']);\n  if (fromRole != null) {\n    setValueByPath(toObject, ['role'], fromRole);\n  }\n  return toObject;\n}\nfunction schemaToVertex$1(apiClient, fromObject) {\n  const toObject = {};\n  const fromExample = getValueByPath(fromObject, ['example']);\n  if (fromExample != null) {\n    setValueByPath(toObject, ['example'], fromExample);\n  }\n  const fromPattern = getValueByPath(fromObject, ['pattern']);\n  if (fromPattern != null) {\n    setValueByPath(toObject, ['pattern'], fromPattern);\n  }\n  const fromMinimum = getValueByPath(fromObject, ['minimum']);\n  if (fromMinimum != null) {\n    setValueByPath(toObject, ['minimum'], fromMinimum);\n  }\n  const fromDefault = getValueByPath(fromObject, ['default']);\n  if (fromDefault != null) {\n    setValueByPath(toObject, ['default'], fromDefault);\n  }\n  const fromAnyOf = getValueByPath(fromObject, ['anyOf']);\n  if (fromAnyOf != null) {\n    setValueByPath(toObject, ['anyOf'], fromAnyOf);\n  }\n  const fromMaxLength = getValueByPath(fromObject, ['maxLength']);\n  if (fromMaxLength != null) {\n    setValueByPath(toObject, ['maxLength'], fromMaxLength);\n  }\n  const fromTitle = getValueByPath(fromObject, ['title']);\n  if (fromTitle != null) {\n    setValueByPath(toObject, ['title'], fromTitle);\n  }\n  const fromMinLength = getValueByPath(fromObject, ['minLength']);\n  if (fromMinLength != null) {\n    setValueByPath(toObject, ['minLength'], fromMinLength);\n  }\n  const fromMinProperties = getValueByPath(fromObject, ['minProperties']);\n  if (fromMinProperties != null) {\n    setValueByPath(toObject, ['minProperties'], fromMinProperties);\n  }\n  const fromMaximum = getValueByPath(fromObject, ['maximum']);\n  if (fromMaximum != null) {\n    setValueByPath(toObject, ['maximum'], fromMaximum);\n  }\n  const fromMaxProperties = getValueByPath(fromObject, ['maxProperties']);\n  if (fromMaxProperties != null) {\n    setValueByPath(toObject, ['maxProperties'], fromMaxProperties);\n  }\n  const fromDescription = getValueByPath(fromObject, ['description']);\n  if (fromDescription != null) {\n    setValueByPath(toObject, ['description'], fromDescription);\n  }\n  const fromEnum = getValueByPath(fromObject, ['enum']);\n  if (fromEnum != null) {\n    setValueByPath(toObject, ['enum'], fromEnum);\n  }\n  const fromFormat = getValueByPath(fromObject, ['format']);\n  if (fromFormat != null) {\n    setValueByPath(toObject, ['format'], fromFormat);\n  }\n  const fromItems = getValueByPath(fromObject, ['items']);\n  if (fromItems != null) {\n    setValueByPath(toObject, ['items'], fromItems);\n  }\n  const fromMaxItems = getValueByPath(fromObject, ['maxItems']);\n  if (fromMaxItems != null) {\n    setValueByPath(toObject, ['maxItems'], fromMaxItems);\n  }\n  const fromMinItems = getValueByPath(fromObject, ['minItems']);\n  if (fromMinItems != null) {\n    setValueByPath(toObject, ['minItems'], fromMinItems);\n  }\n  const fromNullable = getValueByPath(fromObject, ['nullable']);\n  if (fromNullable != null) {\n    setValueByPath(toObject, ['nullable'], fromNullable);\n  }\n  const fromProperties = getValueByPath(fromObject, ['properties']);\n  if (fromProperties != null) {\n    setValueByPath(toObject, ['properties'], fromProperties);\n  }\n  const fromPropertyOrdering = getValueByPath(fromObject, ['propertyOrdering']);\n  if (fromPropertyOrdering != null) {\n    setValueByPath(toObject, ['propertyOrdering'], fromPropertyOrdering);\n  }\n  const fromRequired = getValueByPath(fromObject, ['required']);\n  if (fromRequired != null) {\n    setValueByPath(toObject, ['required'], fromRequired);\n  }\n  const fromType = getValueByPath(fromObject, ['type']);\n  if (fromType != null) {\n    setValueByPath(toObject, ['type'], fromType);\n  }\n  return toObject;\n}\nfunction functionDeclarationToMldev$1(apiClient, fromObject) {\n  const toObject = {};\n  if (getValueByPath(fromObject, ['response']) !== undefined) {\n    throw new Error('response parameter is not supported in Gemini API.');\n  }\n  const fromDescription = getValueByPath(fromObject, ['description']);\n  if (fromDescription != null) {\n    setValueByPath(toObject, ['description'], fromDescription);\n  }\n  const fromName = getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    setValueByPath(toObject, ['name'], fromName);\n  }\n  const fromParameters = getValueByPath(fromObject, ['parameters']);\n  if (fromParameters != null) {\n    setValueByPath(toObject, ['parameters'], fromParameters);\n  }\n  return toObject;\n}\nfunction functionDeclarationToVertex$1(apiClient, fromObject) {\n  const toObject = {};\n  const fromResponse = getValueByPath(fromObject, ['response']);\n  if (fromResponse != null) {\n    setValueByPath(toObject, ['response'], schemaToVertex$1(apiClient, fromResponse));\n  }\n  const fromDescription = getValueByPath(fromObject, ['description']);\n  if (fromDescription != null) {\n    setValueByPath(toObject, ['description'], fromDescription);\n  }\n  const fromName = getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    setValueByPath(toObject, ['name'], fromName);\n  }\n  const fromParameters = getValueByPath(fromObject, ['parameters']);\n  if (fromParameters != null) {\n    setValueByPath(toObject, ['parameters'], fromParameters);\n  }\n  return toObject;\n}\nfunction googleSearchToMldev$1(apiClient, fromObject) {\n  const toObject = {};\n  return toObject;\n}\nfunction googleSearchToVertex$1(apiClient, fromObject) {\n  const toObject = {};\n  return toObject;\n}\nfunction dynamicRetrievalConfigToMldev$1(apiClient, fromObject) {\n  const toObject = {};\n  const fromMode = getValueByPath(fromObject, ['mode']);\n  if (fromMode != null) {\n    setValueByPath(toObject, ['mode'], fromMode);\n  }\n  const fromDynamicThreshold = getValueByPath(fromObject, ['dynamicThreshold']);\n  if (fromDynamicThreshold != null) {\n    setValueByPath(toObject, ['dynamicThreshold'], fromDynamicThreshold);\n  }\n  return toObject;\n}\nfunction dynamicRetrievalConfigToVertex$1(apiClient, fromObject) {\n  const toObject = {};\n  const fromMode = getValueByPath(fromObject, ['mode']);\n  if (fromMode != null) {\n    setValueByPath(toObject, ['mode'], fromMode);\n  }\n  const fromDynamicThreshold = getValueByPath(fromObject, ['dynamicThreshold']);\n  if (fromDynamicThreshold != null) {\n    setValueByPath(toObject, ['dynamicThreshold'], fromDynamicThreshold);\n  }\n  return toObject;\n}\nfunction googleSearchRetrievalToMldev$1(apiClient, fromObject) {\n  const toObject = {};\n  const fromDynamicRetrievalConfig = getValueByPath(fromObject, ['dynamicRetrievalConfig']);\n  if (fromDynamicRetrievalConfig != null) {\n    setValueByPath(toObject, ['dynamicRetrievalConfig'], dynamicRetrievalConfigToMldev$1(apiClient, fromDynamicRetrievalConfig));\n  }\n  return toObject;\n}\nfunction googleSearchRetrievalToVertex$1(apiClient, fromObject) {\n  const toObject = {};\n  const fromDynamicRetrievalConfig = getValueByPath(fromObject, ['dynamicRetrievalConfig']);\n  if (fromDynamicRetrievalConfig != null) {\n    setValueByPath(toObject, ['dynamicRetrievalConfig'], dynamicRetrievalConfigToVertex$1(apiClient, fromDynamicRetrievalConfig));\n  }\n  return toObject;\n}\n/** @internal */\nfunction toolToMldev$1(apiClient, fromObject) {\n  const toObject = {};\n  const fromFunctionDeclarations = getValueByPath(fromObject, ['functionDeclarations']);\n  if (fromFunctionDeclarations != null) {\n    if (Array.isArray(fromFunctionDeclarations)) {\n      setValueByPath(toObject, ['functionDeclarations'], fromFunctionDeclarations.map(item => {\n        return functionDeclarationToMldev$1(apiClient, item);\n      }));\n    } else {\n      setValueByPath(toObject, ['functionDeclarations'], fromFunctionDeclarations);\n    }\n  }\n  if (getValueByPath(fromObject, ['retrieval']) !== undefined) {\n    throw new Error('retrieval parameter is not supported in Gemini API.');\n  }\n  const fromGoogleSearch = getValueByPath(fromObject, ['googleSearch']);\n  if (fromGoogleSearch != null) {\n    setValueByPath(toObject, ['googleSearch'], googleSearchToMldev$1());\n  }\n  const fromGoogleSearchRetrieval = getValueByPath(fromObject, ['googleSearchRetrieval']);\n  if (fromGoogleSearchRetrieval != null) {\n    setValueByPath(toObject, ['googleSearchRetrieval'], googleSearchRetrievalToMldev$1(apiClient, fromGoogleSearchRetrieval));\n  }\n  const fromCodeExecution = getValueByPath(fromObject, ['codeExecution']);\n  if (fromCodeExecution != null) {\n    setValueByPath(toObject, ['codeExecution'], fromCodeExecution);\n  }\n  return toObject;\n}\n/** @internal */\nfunction toolToVertex$1(apiClient, fromObject) {\n  const toObject = {};\n  const fromFunctionDeclarations = getValueByPath(fromObject, ['functionDeclarations']);\n  if (fromFunctionDeclarations != null) {\n    if (Array.isArray(fromFunctionDeclarations)) {\n      setValueByPath(toObject, ['functionDeclarations'], fromFunctionDeclarations.map(item => {\n        return functionDeclarationToVertex$1(apiClient, item);\n      }));\n    } else {\n      setValueByPath(toObject, ['functionDeclarations'], fromFunctionDeclarations);\n    }\n  }\n  const fromRetrieval = getValueByPath(fromObject, ['retrieval']);\n  if (fromRetrieval != null) {\n    setValueByPath(toObject, ['retrieval'], fromRetrieval);\n  }\n  const fromGoogleSearch = getValueByPath(fromObject, ['googleSearch']);\n  if (fromGoogleSearch != null) {\n    setValueByPath(toObject, ['googleSearch'], googleSearchToVertex$1());\n  }\n  const fromGoogleSearchRetrieval = getValueByPath(fromObject, ['googleSearchRetrieval']);\n  if (fromGoogleSearchRetrieval != null) {\n    setValueByPath(toObject, ['googleSearchRetrieval'], googleSearchRetrievalToVertex$1(apiClient, fromGoogleSearchRetrieval));\n  }\n  const fromCodeExecution = getValueByPath(fromObject, ['codeExecution']);\n  if (fromCodeExecution != null) {\n    setValueByPath(toObject, ['codeExecution'], fromCodeExecution);\n  }\n  return toObject;\n}\nfunction functionCallingConfigToMldev$1(apiClient, fromObject) {\n  const toObject = {};\n  const fromMode = getValueByPath(fromObject, ['mode']);\n  if (fromMode != null) {\n    setValueByPath(toObject, ['mode'], fromMode);\n  }\n  const fromAllowedFunctionNames = getValueByPath(fromObject, ['allowedFunctionNames']);\n  if (fromAllowedFunctionNames != null) {\n    setValueByPath(toObject, ['allowedFunctionNames'], fromAllowedFunctionNames);\n  }\n  return toObject;\n}\nfunction functionCallingConfigToVertex$1(apiClient, fromObject) {\n  const toObject = {};\n  const fromMode = getValueByPath(fromObject, ['mode']);\n  if (fromMode != null) {\n    setValueByPath(toObject, ['mode'], fromMode);\n  }\n  const fromAllowedFunctionNames = getValueByPath(fromObject, ['allowedFunctionNames']);\n  if (fromAllowedFunctionNames != null) {\n    setValueByPath(toObject, ['allowedFunctionNames'], fromAllowedFunctionNames);\n  }\n  return toObject;\n}\nfunction toolConfigToMldev$1(apiClient, fromObject) {\n  const toObject = {};\n  const fromFunctionCallingConfig = getValueByPath(fromObject, ['functionCallingConfig']);\n  if (fromFunctionCallingConfig != null) {\n    setValueByPath(toObject, ['functionCallingConfig'], functionCallingConfigToMldev$1(apiClient, fromFunctionCallingConfig));\n  }\n  return toObject;\n}\nfunction toolConfigToVertex$1(apiClient, fromObject) {\n  const toObject = {};\n  const fromFunctionCallingConfig = getValueByPath(fromObject, ['functionCallingConfig']);\n  if (fromFunctionCallingConfig != null) {\n    setValueByPath(toObject, ['functionCallingConfig'], functionCallingConfigToVertex$1(apiClient, fromFunctionCallingConfig));\n  }\n  return toObject;\n}\nfunction createCachedContentConfigToMldev(apiClient, fromObject, parentObject) {\n  const toObject = {};\n  const fromTtl = getValueByPath(fromObject, ['ttl']);\n  if (parentObject !== undefined && fromTtl != null) {\n    setValueByPath(parentObject, ['ttl'], fromTtl);\n  }\n  const fromExpireTime = getValueByPath(fromObject, ['expireTime']);\n  if (parentObject !== undefined && fromExpireTime != null) {\n    setValueByPath(parentObject, ['expireTime'], fromExpireTime);\n  }\n  const fromDisplayName = getValueByPath(fromObject, ['displayName']);\n  if (parentObject !== undefined && fromDisplayName != null) {\n    setValueByPath(parentObject, ['displayName'], fromDisplayName);\n  }\n  const fromContents = getValueByPath(fromObject, ['contents']);\n  if (parentObject !== undefined && fromContents != null) {\n    if (Array.isArray(fromContents)) {\n      setValueByPath(parentObject, ['contents'], tContents(apiClient, tContents(apiClient, fromContents).map(item => {\n        return contentToMldev$1(apiClient, item);\n      })));\n    } else {\n      setValueByPath(parentObject, ['contents'], tContents(apiClient, fromContents));\n    }\n  }\n  const fromSystemInstruction = getValueByPath(fromObject, ['systemInstruction']);\n  if (parentObject !== undefined && fromSystemInstruction != null) {\n    setValueByPath(parentObject, ['systemInstruction'], contentToMldev$1(apiClient, tContent(apiClient, fromSystemInstruction)));\n  }\n  const fromTools = getValueByPath(fromObject, ['tools']);\n  if (parentObject !== undefined && fromTools != null) {\n    if (Array.isArray(fromTools)) {\n      setValueByPath(parentObject, ['tools'], fromTools.map(item => {\n        return toolToMldev$1(apiClient, item);\n      }));\n    } else {\n      setValueByPath(parentObject, ['tools'], fromTools);\n    }\n  }\n  const fromToolConfig = getValueByPath(fromObject, ['toolConfig']);\n  if (parentObject !== undefined && fromToolConfig != null) {\n    setValueByPath(parentObject, ['toolConfig'], toolConfigToMldev$1(apiClient, fromToolConfig));\n  }\n  return toObject;\n}\nfunction createCachedContentConfigToVertex(apiClient, fromObject, parentObject) {\n  const toObject = {};\n  const fromTtl = getValueByPath(fromObject, ['ttl']);\n  if (parentObject !== undefined && fromTtl != null) {\n    setValueByPath(parentObject, ['ttl'], fromTtl);\n  }\n  const fromExpireTime = getValueByPath(fromObject, ['expireTime']);\n  if (parentObject !== undefined && fromExpireTime != null) {\n    setValueByPath(parentObject, ['expireTime'], fromExpireTime);\n  }\n  const fromDisplayName = getValueByPath(fromObject, ['displayName']);\n  if (parentObject !== undefined && fromDisplayName != null) {\n    setValueByPath(parentObject, ['displayName'], fromDisplayName);\n  }\n  const fromContents = getValueByPath(fromObject, ['contents']);\n  if (parentObject !== undefined && fromContents != null) {\n    if (Array.isArray(fromContents)) {\n      setValueByPath(parentObject, ['contents'], tContents(apiClient, tContents(apiClient, fromContents).map(item => {\n        return contentToVertex$1(apiClient, item);\n      })));\n    } else {\n      setValueByPath(parentObject, ['contents'], tContents(apiClient, fromContents));\n    }\n  }\n  const fromSystemInstruction = getValueByPath(fromObject, ['systemInstruction']);\n  if (parentObject !== undefined && fromSystemInstruction != null) {\n    setValueByPath(parentObject, ['systemInstruction'], contentToVertex$1(apiClient, tContent(apiClient, fromSystemInstruction)));\n  }\n  const fromTools = getValueByPath(fromObject, ['tools']);\n  if (parentObject !== undefined && fromTools != null) {\n    if (Array.isArray(fromTools)) {\n      setValueByPath(parentObject, ['tools'], fromTools.map(item => {\n        return toolToVertex$1(apiClient, item);\n      }));\n    } else {\n      setValueByPath(parentObject, ['tools'], fromTools);\n    }\n  }\n  const fromToolConfig = getValueByPath(fromObject, ['toolConfig']);\n  if (parentObject !== undefined && fromToolConfig != null) {\n    setValueByPath(parentObject, ['toolConfig'], toolConfigToVertex$1(apiClient, fromToolConfig));\n  }\n  return toObject;\n}\nfunction createCachedContentParametersToMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromModel = getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    setValueByPath(toObject, ['model'], tCachesModel(apiClient, fromModel));\n  }\n  const fromConfig = getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    setValueByPath(toObject, ['config'], createCachedContentConfigToMldev(apiClient, fromConfig, toObject));\n  }\n  return toObject;\n}\nfunction createCachedContentParametersToVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromModel = getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    setValueByPath(toObject, ['model'], tCachesModel(apiClient, fromModel));\n  }\n  const fromConfig = getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    setValueByPath(toObject, ['config'], createCachedContentConfigToVertex(apiClient, fromConfig, toObject));\n  }\n  return toObject;\n}\nfunction getCachedContentParametersToMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromName = getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    setValueByPath(toObject, ['_url', 'name'], tCachedContentName(apiClient, fromName));\n  }\n  const fromConfig = getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    setValueByPath(toObject, ['config'], fromConfig);\n  }\n  return toObject;\n}\nfunction getCachedContentParametersToVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromName = getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    setValueByPath(toObject, ['_url', 'name'], tCachedContentName(apiClient, fromName));\n  }\n  const fromConfig = getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    setValueByPath(toObject, ['config'], fromConfig);\n  }\n  return toObject;\n}\nfunction deleteCachedContentParametersToMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromName = getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    setValueByPath(toObject, ['_url', 'name'], tCachedContentName(apiClient, fromName));\n  }\n  const fromConfig = getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    setValueByPath(toObject, ['config'], fromConfig);\n  }\n  return toObject;\n}\nfunction deleteCachedContentParametersToVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromName = getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    setValueByPath(toObject, ['_url', 'name'], tCachedContentName(apiClient, fromName));\n  }\n  const fromConfig = getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    setValueByPath(toObject, ['config'], fromConfig);\n  }\n  return toObject;\n}\nfunction updateCachedContentConfigToMldev(apiClient, fromObject, parentObject) {\n  const toObject = {};\n  const fromTtl = getValueByPath(fromObject, ['ttl']);\n  if (parentObject !== undefined && fromTtl != null) {\n    setValueByPath(parentObject, ['ttl'], fromTtl);\n  }\n  const fromExpireTime = getValueByPath(fromObject, ['expireTime']);\n  if (parentObject !== undefined && fromExpireTime != null) {\n    setValueByPath(parentObject, ['expireTime'], fromExpireTime);\n  }\n  return toObject;\n}\nfunction updateCachedContentConfigToVertex(apiClient, fromObject, parentObject) {\n  const toObject = {};\n  const fromTtl = getValueByPath(fromObject, ['ttl']);\n  if (parentObject !== undefined && fromTtl != null) {\n    setValueByPath(parentObject, ['ttl'], fromTtl);\n  }\n  const fromExpireTime = getValueByPath(fromObject, ['expireTime']);\n  if (parentObject !== undefined && fromExpireTime != null) {\n    setValueByPath(parentObject, ['expireTime'], fromExpireTime);\n  }\n  return toObject;\n}\nfunction updateCachedContentParametersToMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromName = getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    setValueByPath(toObject, ['_url', 'name'], tCachedContentName(apiClient, fromName));\n  }\n  const fromConfig = getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    setValueByPath(toObject, ['config'], updateCachedContentConfigToMldev(apiClient, fromConfig, toObject));\n  }\n  return toObject;\n}\nfunction updateCachedContentParametersToVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromName = getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    setValueByPath(toObject, ['_url', 'name'], tCachedContentName(apiClient, fromName));\n  }\n  const fromConfig = getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    setValueByPath(toObject, ['config'], updateCachedContentConfigToVertex(apiClient, fromConfig, toObject));\n  }\n  return toObject;\n}\nfunction listCachedContentsConfigToMldev(apiClient, fromObject, parentObject) {\n  const toObject = {};\n  const fromPageSize = getValueByPath(fromObject, ['pageSize']);\n  if (parentObject !== undefined && fromPageSize != null) {\n    setValueByPath(parentObject, ['_query', 'pageSize'], fromPageSize);\n  }\n  const fromPageToken = getValueByPath(fromObject, ['pageToken']);\n  if (parentObject !== undefined && fromPageToken != null) {\n    setValueByPath(parentObject, ['_query', 'pageToken'], fromPageToken);\n  }\n  return toObject;\n}\nfunction listCachedContentsConfigToVertex(apiClient, fromObject, parentObject) {\n  const toObject = {};\n  const fromPageSize = getValueByPath(fromObject, ['pageSize']);\n  if (parentObject !== undefined && fromPageSize != null) {\n    setValueByPath(parentObject, ['_query', 'pageSize'], fromPageSize);\n  }\n  const fromPageToken = getValueByPath(fromObject, ['pageToken']);\n  if (parentObject !== undefined && fromPageToken != null) {\n    setValueByPath(parentObject, ['_query', 'pageToken'], fromPageToken);\n  }\n  return toObject;\n}\nfunction listCachedContentsParametersToMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromConfig = getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    setValueByPath(toObject, ['config'], listCachedContentsConfigToMldev(apiClient, fromConfig, toObject));\n  }\n  return toObject;\n}\nfunction listCachedContentsParametersToVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromConfig = getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    setValueByPath(toObject, ['config'], listCachedContentsConfigToVertex(apiClient, fromConfig, toObject));\n  }\n  return toObject;\n}\nfunction cachedContentFromMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromName = getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    setValueByPath(toObject, ['name'], fromName);\n  }\n  const fromDisplayName = getValueByPath(fromObject, ['displayName']);\n  if (fromDisplayName != null) {\n    setValueByPath(toObject, ['displayName'], fromDisplayName);\n  }\n  const fromModel = getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    setValueByPath(toObject, ['model'], fromModel);\n  }\n  const fromCreateTime = getValueByPath(fromObject, ['createTime']);\n  if (fromCreateTime != null) {\n    setValueByPath(toObject, ['createTime'], fromCreateTime);\n  }\n  const fromUpdateTime = getValueByPath(fromObject, ['updateTime']);\n  if (fromUpdateTime != null) {\n    setValueByPath(toObject, ['updateTime'], fromUpdateTime);\n  }\n  const fromExpireTime = getValueByPath(fromObject, ['expireTime']);\n  if (fromExpireTime != null) {\n    setValueByPath(toObject, ['expireTime'], fromExpireTime);\n  }\n  const fromUsageMetadata = getValueByPath(fromObject, ['usageMetadata']);\n  if (fromUsageMetadata != null) {\n    setValueByPath(toObject, ['usageMetadata'], fromUsageMetadata);\n  }\n  return toObject;\n}\nfunction cachedContentFromVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromName = getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    setValueByPath(toObject, ['name'], fromName);\n  }\n  const fromDisplayName = getValueByPath(fromObject, ['displayName']);\n  if (fromDisplayName != null) {\n    setValueByPath(toObject, ['displayName'], fromDisplayName);\n  }\n  const fromModel = getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    setValueByPath(toObject, ['model'], fromModel);\n  }\n  const fromCreateTime = getValueByPath(fromObject, ['createTime']);\n  if (fromCreateTime != null) {\n    setValueByPath(toObject, ['createTime'], fromCreateTime);\n  }\n  const fromUpdateTime = getValueByPath(fromObject, ['updateTime']);\n  if (fromUpdateTime != null) {\n    setValueByPath(toObject, ['updateTime'], fromUpdateTime);\n  }\n  const fromExpireTime = getValueByPath(fromObject, ['expireTime']);\n  if (fromExpireTime != null) {\n    setValueByPath(toObject, ['expireTime'], fromExpireTime);\n  }\n  const fromUsageMetadata = getValueByPath(fromObject, ['usageMetadata']);\n  if (fromUsageMetadata != null) {\n    setValueByPath(toObject, ['usageMetadata'], fromUsageMetadata);\n  }\n  return toObject;\n}\nfunction deleteCachedContentResponseFromMldev(apiClient, fromObject) {\n  const toObject = {};\n  return toObject;\n}\nfunction deleteCachedContentResponseFromVertex(apiClient, fromObject) {\n  const toObject = {};\n  return toObject;\n}\nfunction listCachedContentsResponseFromMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromNextPageToken = getValueByPath(fromObject, ['nextPageToken']);\n  if (fromNextPageToken != null) {\n    setValueByPath(toObject, ['nextPageToken'], fromNextPageToken);\n  }\n  const fromCachedContents = getValueByPath(fromObject, ['cachedContents']);\n  if (fromCachedContents != null) {\n    if (Array.isArray(fromCachedContents)) {\n      setValueByPath(toObject, ['cachedContents'], fromCachedContents.map(item => {\n        return cachedContentFromMldev(apiClient, item);\n      }));\n    } else {\n      setValueByPath(toObject, ['cachedContents'], fromCachedContents);\n    }\n  }\n  return toObject;\n}\nfunction listCachedContentsResponseFromVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromNextPageToken = getValueByPath(fromObject, ['nextPageToken']);\n  if (fromNextPageToken != null) {\n    setValueByPath(toObject, ['nextPageToken'], fromNextPageToken);\n  }\n  const fromCachedContents = getValueByPath(fromObject, ['cachedContents']);\n  if (fromCachedContents != null) {\n    if (Array.isArray(fromCachedContents)) {\n      setValueByPath(toObject, ['cachedContents'], fromCachedContents.map(item => {\n        return cachedContentFromVertex(apiClient, item);\n      }));\n    } else {\n      setValueByPath(toObject, ['cachedContents'], fromCachedContents);\n    }\n  }\n  return toObject;\n}\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\n\nfunction __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nfunction __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\nfunction __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []),\n    i,\n    q = [];\n  return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i;\n  function awaitReturn(f) {\n    return function (v) {\n      return Promise.resolve(v).then(f, reject);\n    };\n  }\n  function verb(n, f) {\n    if (g[n]) {\n      i[n] = function (v) {\n        return new Promise(function (a, b) {\n          q.push([n, v, a, b]) > 1 || resume(n, v);\n        });\n      };\n      if (f) i[n] = f(i[n]);\n    }\n  }\n  function resume(n, v) {\n    try {\n      step(g[n](v));\n    } catch (e) {\n      settle(q[0][3], e);\n    }\n  }\n  function step(r) {\n    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n  }\n  function fulfill(value) {\n    resume(\"next\", value);\n  }\n  function reject(value) {\n    resume(\"throw\", value);\n  }\n  function settle(f, v) {\n    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n  }\n}\nfunction __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator],\n    i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i);\n  function verb(n) {\n    i[n] = o[n] && function (v) {\n      return new Promise(function (resolve, reject) {\n        v = o[n](v), settle(resolve, reject, v.done, v.value);\n      });\n    };\n  }\n  function settle(resolve, reject, d, v) {\n    Promise.resolve(v).then(function (v) {\n      resolve({\n        value: v,\n        done: d\n      });\n    }, reject);\n  }\n}\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * Returns true if the response is valid, false otherwise.\n */\nfunction isValidResponse(response) {\n  var _a;\n  if (response.candidates == undefined || response.candidates.length === 0) {\n    return false;\n  }\n  const content = (_a = response.candidates[0]) === null || _a === void 0 ? void 0 : _a.content;\n  if (content === undefined) {\n    return false;\n  }\n  return isValidContent(content);\n}\nfunction isValidContent(content) {\n  if (content.parts === undefined || content.parts.length === 0) {\n    return false;\n  }\n  for (const part of content.parts) {\n    if (part === undefined || Object.keys(part).length === 0) {\n      return false;\n    }\n    if (part.text !== undefined && part.text === '') {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * Validates the history contains the correct roles.\n *\n * @remarks\n * Expects the history to start with a user turn and then alternate between\n * user and model turns.\n *\n * @throws Error if the history does not start with a user turn.\n * @throws Error if the history contains an invalid role.\n */\nfunction validateHistory(history) {\n  // Empty history is valid.\n  if (history.length === 0) {\n    return;\n  }\n  if (history[0].role !== 'user') {\n    throw new Error('History must start with a user turn.');\n  }\n  for (const content of history) {\n    if (content.role !== 'user' && content.role !== 'model') {\n      throw new Error(\"Role must be user or model, but got \".concat(content.role, \".\"));\n    }\n  }\n}\n/**\n * Extracts the curated (valid) history from a comprehensive history.\n *\n * @remarks\n * The model may sometimes generate invalid or empty contents(e.g., due to safty\n * filters or recitation). Extracting valid turns from the history\n * ensures that subsequent requests could be accpeted by the model.\n */\nfunction extractCuratedHistory(comprehensiveHistory) {\n  if (comprehensiveHistory === undefined || comprehensiveHistory.length === 0) {\n    return [];\n  }\n  const curatedHistory = [];\n  const length = comprehensiveHistory.length;\n  let i = 0;\n  let userInput = comprehensiveHistory[0];\n  while (i < length) {\n    if (comprehensiveHistory[i].role === 'user') {\n      userInput = comprehensiveHistory[i];\n      i++;\n    } else {\n      const modelOutput = [];\n      let isValid = true;\n      while (i < length && comprehensiveHistory[i].role === 'model') {\n        modelOutput.push(comprehensiveHistory[i]);\n        if (isValid && !isValidContent(comprehensiveHistory[i])) {\n          isValid = false;\n        }\n        i++;\n      }\n      if (isValid) {\n        curatedHistory.push(userInput);\n        curatedHistory.push(...modelOutput);\n      }\n    }\n  }\n  return curatedHistory;\n}\n/**\n * A utility class to create a chat session.\n */\nclass Chats {\n  constructor(modelsModule, apiClient) {\n    this.modelsModule = modelsModule;\n    this.apiClient = apiClient;\n  }\n  /**\n   * Creates a new chat session.\n   *\n   * @remarks\n   * The config in the params will be used for all requests within the chat\n   * session unless overridden by a per-request `config` in\n   * {@link ./types.SendMessageParameters}.\n   *\n   * @param params - Parameters for creating a chat session.\n   * @returns A new chat session.\n   *\n   * @example\n   * ```ts\n   * const chat = ai.chats.create({\n   *   model: 'gemini-2.0-flash'\n   *   config: {\n   *     temperature: 0.5,\n   *     maxOutputTokens: 1024,\n   *   }\n   * });\n   * ```\n   */\n  create(params) {\n    return new Chat(this.apiClient, this.modelsModule, params.model, params.config, params.history);\n  }\n}\n/**\n * Chat session that enables sending messages to the model with previous\n * conversation context.\n *\n * @remarks\n * The session maintains all the turns between user and model.\n */\nclass Chat {\n  constructor(apiClient, modelsModule, model) {\n    let config = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let history = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n    this.apiClient = apiClient;\n    this.modelsModule = modelsModule;\n    this.model = model;\n    this.config = config;\n    this.history = history;\n    // A promise to represent the current state of the message being sent to the\n    // model.\n    this.sendPromise = Promise.resolve();\n    validateHistory(history);\n  }\n  /**\n   * Sends a message to the model and returns the response.\n   *\n   * @remarks\n   * This method will wait for the previous message to be processed before\n   * sending the next message.\n   *\n   * @see {@link Chat#sendMessageStream} for streaming method.\n   * @param params - parameters for sending messages within a chat session.\n   * @returns The model's response.\n   *\n   * @example\n   * ```ts\n   * const chat = ai.chats.create({model: 'gemini-2.0-flash'});\n   * const response = await chat.sendMessage({\n   *   message: 'Why is the sky blue?'\n   * });\n   * console.log(response.text);\n   * ```\n   */\n  async sendMessage(params) {\n    var _a;\n    await this.sendPromise;\n    const inputContent = tContent(this.apiClient, params.message);\n    const responsePromise = this.modelsModule.generateContent({\n      model: this.model,\n      contents: this.getHistory(true).concat(inputContent),\n      config: (_a = params.config) !== null && _a !== void 0 ? _a : this.config\n    });\n    this.sendPromise = (async () => {\n      var _a, _b;\n      const response = await responsePromise;\n      const outputContent = (_b = (_a = response.candidates) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.content;\n      const modelOutput = outputContent ? [outputContent] : [];\n      this.recordHistory(inputContent, modelOutput);\n      return;\n    })();\n    await this.sendPromise;\n    return responsePromise;\n  }\n  /**\n   * Sends a message to the model and returns the response in chunks.\n   *\n   * @remarks\n   * This method will wait for the previous message to be processed before\n   * sending the next message.\n   *\n   * @see {@link Chat#sendMessage} for non-streaming method.\n   * @param params - parameters for sending the message.\n   * @return The model's response.\n   *\n   * @example\n   * ```ts\n   * const chat = ai.chats.create({model: 'gemini-2.0-flash'});\n   * const response = await chat.sendMessageStream({\n   *   message: 'Why is the sky blue?'\n   * });\n   * for await (const chunk of response) {\n   *   console.log(chunk.text);\n   * }\n   * ```\n   */\n  async sendMessageStream(params) {\n    var _a;\n    await this.sendPromise;\n    const inputContent = tContent(this.apiClient, params.message);\n    const streamResponse = this.modelsModule.generateContentStream({\n      model: this.model,\n      contents: this.getHistory(true).concat(inputContent),\n      config: (_a = params.config) !== null && _a !== void 0 ? _a : this.config\n    });\n    this.sendPromise = streamResponse.then(() => undefined);\n    const response = await streamResponse;\n    const result = this.processStreamResponse(response, inputContent);\n    return result;\n  }\n  /**\n   * Returns the chat history.\n   *\n   * @remarks\n   * The history is a list of contents alternating between user and model.\n   *\n   * There are two types of history:\n   * - The `curated history` contains only the valid turns between user and\n   * model, which will be included in the subsequent requests sent to the model.\n   * - The `comprehensive history` contains all turns, including invalid or\n   *   empty model outputs, providing a complete record of the history.\n   *\n   * The history is updated after receiving the response from the model,\n   * for streaming response, it means receiving the last chunk of the response.\n   *\n   * The `comprehensive history` is returned by default. To get the `curated\n   * history`, set the `curated` parameter to `true`.\n   *\n   * @param curated - whether to return the curated history or the comprehensive\n   *     history.\n   * @return History contents alternating between user and model for the entire\n   *     chat session.\n   */\n  getHistory() {\n    let curated = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return curated ? extractCuratedHistory(this.history) : this.history;\n  }\n  processStreamResponse(streamResponse, inputContent) {\n    var _a, _b;\n    return __asyncGenerator(this, arguments, function* processStreamResponse_1() {\n      var _c, e_1, _d, _e;\n      const outputContent = [];\n      try {\n        for (var _f = true, streamResponse_1 = __asyncValues(streamResponse), streamResponse_1_1; streamResponse_1_1 = yield __await(streamResponse_1.next()), _c = streamResponse_1_1.done, !_c; _f = true) {\n          _e = streamResponse_1_1.value;\n          _f = false;\n          const chunk = _e;\n          if (isValidResponse(chunk)) {\n            const content = (_b = (_a = chunk.candidates) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.content;\n            if (content !== undefined) {\n              outputContent.push(content);\n            }\n          }\n          yield yield __await(chunk);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (!_f && !_c && (_d = streamResponse_1.return)) yield __await(_d.call(streamResponse_1));\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      this.recordHistory(inputContent, outputContent);\n    });\n  }\n  recordHistory(userInput, modelOutput) {\n    let outputContents = [];\n    if (modelOutput.length > 0 && modelOutput.every(content => content.role === 'model')) {\n      outputContents = modelOutput;\n    } else {\n      // Appends an empty content when model returns empty response, so that the\n      // history is always alternating between user and model.\n      outputContents.push({\n        role: 'model',\n        parts: []\n      });\n    }\n    this.history.push(userInput);\n    this.history.push(...outputContents);\n  }\n}\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nclass Models extends BaseModule {\n  constructor(apiClient) {\n    super();\n    this.apiClient = apiClient;\n    /**\n     * Makes an API request to generate content with a given model.\n     *\n     * For the `model` parameter, supported formats for Vertex AI API include:\n     * - The Gemini model ID, for example: 'gemini-2.0-flash'\n     * - The full resource name starts with 'projects/', for example:\n     *  'projects/my-project-id/locations/us-central1/publishers/google/models/gemini-2.0-flash'\n     * - The partial resource name with 'publishers/', for example:\n     *  'publishers/google/models/gemini-2.0-flash' or\n     *  'publishers/meta/models/llama-3.1-405b-instruct-maas'\n     * - `/` separated publisher and model name, for example:\n     * 'google/gemini-2.0-flash' or 'meta/llama-3.1-405b-instruct-maas'\n     *\n     * For the `model` parameter, supported formats for Gemini API include:\n     * - The Gemini model ID, for example: 'gemini-2.0-flash'\n     * - The model name starts with 'models/', for example:\n     *  'models/gemini-2.0-flash'\n     * - For tuned models, the model name starts with 'tunedModels/',\n     * for example:\n     * 'tunedModels/1234567890123456789'\n     *\n     * Some models support multimodal input and output.\n     *\n     * @param params - The parameters for generating content.\n     * @return The response from generating content.\n     *\n     * @example\n     * ```ts\n     * const response = await ai.models.generateContent({\n     *   model: 'gemini-2.0-flash',\n     *   contents: 'why is the sky blue?',\n     *   config: {\n     *     candidateCount: 2,\n     *   }\n     * });\n     * console.log(response);\n     * ```\n     */\n    this.generateContent = async params => {\n      return await this.generateContentInternal(params);\n    };\n    /**\n     * Makes an API request to generate content with a given model and yields the\n     * response in chunks.\n     *\n     * For the `model` parameter, supported formats for Vertex AI API include:\n     * - The Gemini model ID, for example: 'gemini-2.0-flash'\n     * - The full resource name starts with 'projects/', for example:\n     *  'projects/my-project-id/locations/us-central1/publishers/google/models/gemini-2.0-flash'\n     * - The partial resource name with 'publishers/', for example:\n     *  'publishers/google/models/gemini-2.0-flash' or\n     *  'publishers/meta/models/llama-3.1-405b-instruct-maas'\n     * - `/` separated publisher and model name, for example:\n     * 'google/gemini-2.0-flash' or 'meta/llama-3.1-405b-instruct-maas'\n     *\n     * For the `model` parameter, supported formats for Gemini API include:\n     * - The Gemini model ID, for example: 'gemini-2.0-flash'\n     * - The model name starts with 'models/', for example:\n     *  'models/gemini-2.0-flash'\n     * - For tuned models, the model name starts with 'tunedModels/',\n     * for example:\n     *  'tunedModels/1234567890123456789'\n     *\n     * Some models support multimodal input and output.\n     *\n     * @param params - The parameters for generating content with streaming response.\n     * @return The response from generating content.\n     *\n     * @example\n     * ```ts\n     * const response = await ai.models.generateContentStream({\n     *   model: 'gemini-2.0-flash',\n     *   contents: 'why is the sky blue?',\n     *   config: {\n     *     maxOutputTokens: 200,\n     *   }\n     * });\n     * for await (const chunk of response) {\n     *   console.log(chunk);\n     * }\n     * ```\n     */\n    this.generateContentStream = async params => {\n      return await this.generateContentStreamInternal(params);\n    };\n  }\n  async generateContentInternal(params) {\n    var _a, _b;\n    let response;\n    let path = '';\n    let queryParams = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = generateContentParametersToVertex(this.apiClient, params);\n      path = formatMap('{model}:generateContent', body['_url']);\n      queryParams = body['_query'];\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n      response = this.apiClient.request({\n        path: path,\n        queryParams: queryParams,\n        body: JSON.stringify(body),\n        httpMethod: 'POST',\n        httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions\n      }).then(httpResponse => {\n        return httpResponse.json();\n      });\n      return response.then(apiResponse => {\n        const resp = generateContentResponseFromVertex(this.apiClient, apiResponse);\n        const typedResp = new GenerateContentResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    } else {\n      const body = generateContentParametersToMldev(this.apiClient, params);\n      path = formatMap('{model}:generateContent', body['_url']);\n      queryParams = body['_query'];\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n      response = this.apiClient.request({\n        path: path,\n        queryParams: queryParams,\n        body: JSON.stringify(body),\n        httpMethod: 'POST',\n        httpOptions: (_b = params.config) === null || _b === void 0 ? void 0 : _b.httpOptions\n      }).then(httpResponse => {\n        return httpResponse.json();\n      });\n      return response.then(apiResponse => {\n        const resp = generateContentResponseFromMldev(this.apiClient, apiResponse);\n        const typedResp = new GenerateContentResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    }\n  }\n  async generateContentStreamInternal(params) {\n    var _a, _b;\n    let response;\n    let path = '';\n    let queryParams = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = generateContentParametersToVertex(this.apiClient, params);\n      path = formatMap('{model}:streamGenerateContent?alt=sse', body['_url']);\n      queryParams = body['_query'];\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n      const apiClient = this.apiClient;\n      response = apiClient.requestStream({\n        path: path,\n        queryParams: queryParams,\n        body: JSON.stringify(body),\n        httpMethod: 'POST',\n        httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions\n      });\n      return response.then(function (apiResponse) {\n        return __asyncGenerator(this, arguments, function* () {\n          var _a, e_1, _b, _c;\n          try {\n            for (var _d = true, apiResponse_1 = __asyncValues(apiResponse), apiResponse_1_1; apiResponse_1_1 = yield __await(apiResponse_1.next()), _a = apiResponse_1_1.done, !_a; _d = true) {\n              _c = apiResponse_1_1.value;\n              _d = false;\n              const chunk = _c;\n              const resp = generateContentResponseFromVertex(apiClient, chunk);\n              const typedResp = new GenerateContentResponse();\n              Object.assign(typedResp, resp);\n              yield yield __await(typedResp);\n            }\n          } catch (e_1_1) {\n            e_1 = {\n              error: e_1_1\n            };\n          } finally {\n            try {\n              if (!_d && !_a && (_b = apiResponse_1.return)) yield __await(_b.call(apiResponse_1));\n            } finally {\n              if (e_1) throw e_1.error;\n            }\n          }\n        });\n      });\n    } else {\n      const body = generateContentParametersToMldev(this.apiClient, params);\n      path = formatMap('{model}:streamGenerateContent?alt=sse', body['_url']);\n      queryParams = body['_query'];\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n      const apiClient = this.apiClient;\n      response = apiClient.requestStream({\n        path: path,\n        queryParams: queryParams,\n        body: JSON.stringify(body),\n        httpMethod: 'POST',\n        httpOptions: (_b = params.config) === null || _b === void 0 ? void 0 : _b.httpOptions\n      });\n      return response.then(function (apiResponse) {\n        return __asyncGenerator(this, arguments, function* () {\n          var _a, e_2, _b, _c;\n          try {\n            for (var _d = true, apiResponse_2 = __asyncValues(apiResponse), apiResponse_2_1; apiResponse_2_1 = yield __await(apiResponse_2.next()), _a = apiResponse_2_1.done, !_a; _d = true) {\n              _c = apiResponse_2_1.value;\n              _d = false;\n              const chunk = _c;\n              const resp = generateContentResponseFromMldev(apiClient, chunk);\n              const typedResp = new GenerateContentResponse();\n              Object.assign(typedResp, resp);\n              yield yield __await(typedResp);\n            }\n          } catch (e_2_1) {\n            e_2 = {\n              error: e_2_1\n            };\n          } finally {\n            try {\n              if (!_d && !_a && (_b = apiResponse_2.return)) yield __await(_b.call(apiResponse_2));\n            } finally {\n              if (e_2) throw e_2.error;\n            }\n          }\n        });\n      });\n    }\n  }\n  /**\n   * Calculates embeddings for the given contents. Only text is supported.\n   *\n   * @param params - The parameters for embedding contents.\n   * @return The response from the API.\n   *\n   * @example\n   * ```ts\n   * const response = await ai.models.embedContent({\n   *  model: 'text-embedding-004',\n   *  contents: [\n   *    'What is your name?',\n   *    'What is your favorite color?',\n   *  ],\n   *  config: {\n   *    outputDimensionality: 64,\n   *  },\n   * });\n   * console.log(response);\n   * ```\n   */\n  async embedContent(params) {\n    var _a, _b;\n    let response;\n    let path = '';\n    let queryParams = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = embedContentParametersToVertex(this.apiClient, params);\n      path = formatMap('{model}:predict', body['_url']);\n      queryParams = body['_query'];\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n      response = this.apiClient.request({\n        path: path,\n        queryParams: queryParams,\n        body: JSON.stringify(body),\n        httpMethod: 'POST',\n        httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions\n      }).then(httpResponse => {\n        return httpResponse.json();\n      });\n      return response.then(apiResponse => {\n        const resp = embedContentResponseFromVertex(this.apiClient, apiResponse);\n        const typedResp = new EmbedContentResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    } else {\n      const body = embedContentParametersToMldev(this.apiClient, params);\n      path = formatMap('{model}:batchEmbedContents', body['_url']);\n      queryParams = body['_query'];\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n      response = this.apiClient.request({\n        path: path,\n        queryParams: queryParams,\n        body: JSON.stringify(body),\n        httpMethod: 'POST',\n        httpOptions: (_b = params.config) === null || _b === void 0 ? void 0 : _b.httpOptions\n      }).then(httpResponse => {\n        return httpResponse.json();\n      });\n      return response.then(apiResponse => {\n        const resp = embedContentResponseFromMldev(this.apiClient, apiResponse);\n        const typedResp = new EmbedContentResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    }\n  }\n  /**\n   * Generates an image based on a text description and configuration.\n   *\n   * @param params - The parameters for generating images.\n   * @return The response from the API.\n   *\n   * @example\n   * ```ts\n   * const response = await ai.models.generateImages({\n   *  model: 'imagen-3.0-generate-002',\n   *  prompt: 'Robot holding a red skateboard',\n   *  config: {\n   *    numberOfImages: 1,\n   *    includeRaiReason: true,\n   *  },\n   * });\n   * console.log(response?.generatedImages?.[0]?.image?.imageBytes);\n   * ```\n   */\n  async generateImages(params) {\n    var _a, _b;\n    let response;\n    let path = '';\n    let queryParams = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = generateImagesParametersToVertex(this.apiClient, params);\n      path = formatMap('{model}:predict', body['_url']);\n      queryParams = body['_query'];\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n      response = this.apiClient.request({\n        path: path,\n        queryParams: queryParams,\n        body: JSON.stringify(body),\n        httpMethod: 'POST',\n        httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions\n      }).then(httpResponse => {\n        return httpResponse.json();\n      });\n      return response.then(apiResponse => {\n        const resp = generateImagesResponseFromVertex(this.apiClient, apiResponse);\n        const typedResp = new GenerateImagesResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    } else {\n      const body = generateImagesParametersToMldev(this.apiClient, params);\n      path = formatMap('{model}:predict', body['_url']);\n      queryParams = body['_query'];\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n      response = this.apiClient.request({\n        path: path,\n        queryParams: queryParams,\n        body: JSON.stringify(body),\n        httpMethod: 'POST',\n        httpOptions: (_b = params.config) === null || _b === void 0 ? void 0 : _b.httpOptions\n      }).then(httpResponse => {\n        return httpResponse.json();\n      });\n      return response.then(apiResponse => {\n        const resp = generateImagesResponseFromMldev(this.apiClient, apiResponse);\n        const typedResp = new GenerateImagesResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    }\n  }\n  /**\n   * Counts the number of tokens in the given contents. Multimodal input is\n   * supported for Gemini models.\n   *\n   * @param params - The parameters for counting tokens.\n   * @return The response from the API.\n   *\n   * @example\n   * ```ts\n   * const response = await ai.models.countTokens({\n   *  model: 'gemini-2.0-flash',\n   *  contents: 'The quick brown fox jumps over the lazy dog.'\n   * });\n   * console.log(response);\n   * ```\n   */\n  async countTokens(params) {\n    var _a, _b;\n    let response;\n    let path = '';\n    let queryParams = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = countTokensParametersToVertex(this.apiClient, params);\n      path = formatMap('{model}:countTokens', body['_url']);\n      queryParams = body['_query'];\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n      response = this.apiClient.request({\n        path: path,\n        queryParams: queryParams,\n        body: JSON.stringify(body),\n        httpMethod: 'POST',\n        httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions\n      }).then(httpResponse => {\n        return httpResponse.json();\n      });\n      return response.then(apiResponse => {\n        const resp = countTokensResponseFromVertex(this.apiClient, apiResponse);\n        const typedResp = new CountTokensResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    } else {\n      const body = countTokensParametersToMldev(this.apiClient, params);\n      path = formatMap('{model}:countTokens', body['_url']);\n      queryParams = body['_query'];\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n      response = this.apiClient.request({\n        path: path,\n        queryParams: queryParams,\n        body: JSON.stringify(body),\n        httpMethod: 'POST',\n        httpOptions: (_b = params.config) === null || _b === void 0 ? void 0 : _b.httpOptions\n      }).then(httpResponse => {\n        return httpResponse.json();\n      });\n      return response.then(apiResponse => {\n        const resp = countTokensResponseFromMldev(this.apiClient, apiResponse);\n        const typedResp = new CountTokensResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    }\n  }\n  /**\n   * Given a list of contents, returns a corresponding TokensInfo containing\n   * the list of tokens and list of token ids.\n   *\n   * This method is not supported by the Gemini Developer API.\n   *\n   * @param params - The parameters for computing tokens.\n   * @return The response from the API.\n   *\n   * @example\n   * ```ts\n   * const response = await ai.models.computeTokens({\n   *  model: 'gemini-2.0-flash',\n   *  contents: 'What is your name?'\n   * });\n   * console.log(response);\n   * ```\n   */\n  async computeTokens(params) {\n    var _a, _b;\n    let response;\n    let path = '';\n    let queryParams = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = computeTokensParametersToVertex(this.apiClient, params);\n      path = formatMap('{model}:computeTokens', body['_url']);\n      queryParams = body['_query'];\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n      response = this.apiClient.request({\n        path: path,\n        queryParams: queryParams,\n        body: JSON.stringify(body),\n        httpMethod: 'POST',\n        httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions\n      }).then(httpResponse => {\n        return httpResponse.json();\n      });\n      return response.then(apiResponse => {\n        const resp = computeTokensResponseFromVertex(this.apiClient, apiResponse);\n        const typedResp = new ComputeTokensResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    } else {\n      const body = computeTokensParametersToMldev(this.apiClient, params);\n      path = formatMap('None', body['_url']);\n      queryParams = body['_query'];\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n      response = this.apiClient.request({\n        path: path,\n        queryParams: queryParams,\n        body: JSON.stringify(body),\n        httpMethod: 'POST',\n        httpOptions: (_b = params.config) === null || _b === void 0 ? void 0 : _b.httpOptions\n      }).then(httpResponse => {\n        return httpResponse.json();\n      });\n      return response.then(apiResponse => {\n        const resp = computeTokensResponseFromMldev(this.apiClient, apiResponse);\n        const typedResp = new ComputeTokensResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    }\n  }\n}\nfunction partToMldev(apiClient, fromObject) {\n  const toObject = {};\n  if (getValueByPath(fromObject, ['videoMetadata']) !== undefined) {\n    throw new Error('videoMetadata parameter is not supported in Gemini API.');\n  }\n  const fromThought = getValueByPath(fromObject, ['thought']);\n  if (fromThought != null) {\n    setValueByPath(toObject, ['thought'], fromThought);\n  }\n  const fromCodeExecutionResult = getValueByPath(fromObject, ['codeExecutionResult']);\n  if (fromCodeExecutionResult != null) {\n    setValueByPath(toObject, ['codeExecutionResult'], fromCodeExecutionResult);\n  }\n  const fromExecutableCode = getValueByPath(fromObject, ['executableCode']);\n  if (fromExecutableCode != null) {\n    setValueByPath(toObject, ['executableCode'], fromExecutableCode);\n  }\n  const fromFileData = getValueByPath(fromObject, ['fileData']);\n  if (fromFileData != null) {\n    setValueByPath(toObject, ['fileData'], fromFileData);\n  }\n  const fromFunctionCall = getValueByPath(fromObject, ['functionCall']);\n  if (fromFunctionCall != null) {\n    setValueByPath(toObject, ['functionCall'], fromFunctionCall);\n  }\n  const fromFunctionResponse = getValueByPath(fromObject, ['functionResponse']);\n  if (fromFunctionResponse != null) {\n    setValueByPath(toObject, ['functionResponse'], fromFunctionResponse);\n  }\n  const fromInlineData = getValueByPath(fromObject, ['inlineData']);\n  if (fromInlineData != null) {\n    setValueByPath(toObject, ['inlineData'], fromInlineData);\n  }\n  const fromText = getValueByPath(fromObject, ['text']);\n  if (fromText != null) {\n    setValueByPath(toObject, ['text'], fromText);\n  }\n  return toObject;\n}\nfunction partToVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromVideoMetadata = getValueByPath(fromObject, ['videoMetadata']);\n  if (fromVideoMetadata != null) {\n    setValueByPath(toObject, ['videoMetadata'], fromVideoMetadata);\n  }\n  const fromThought = getValueByPath(fromObject, ['thought']);\n  if (fromThought != null) {\n    setValueByPath(toObject, ['thought'], fromThought);\n  }\n  const fromCodeExecutionResult = getValueByPath(fromObject, ['codeExecutionResult']);\n  if (fromCodeExecutionResult != null) {\n    setValueByPath(toObject, ['codeExecutionResult'], fromCodeExecutionResult);\n  }\n  const fromExecutableCode = getValueByPath(fromObject, ['executableCode']);\n  if (fromExecutableCode != null) {\n    setValueByPath(toObject, ['executableCode'], fromExecutableCode);\n  }\n  const fromFileData = getValueByPath(fromObject, ['fileData']);\n  if (fromFileData != null) {\n    setValueByPath(toObject, ['fileData'], fromFileData);\n  }\n  const fromFunctionCall = getValueByPath(fromObject, ['functionCall']);\n  if (fromFunctionCall != null) {\n    setValueByPath(toObject, ['functionCall'], fromFunctionCall);\n  }\n  const fromFunctionResponse = getValueByPath(fromObject, ['functionResponse']);\n  if (fromFunctionResponse != null) {\n    setValueByPath(toObject, ['functionResponse'], fromFunctionResponse);\n  }\n  const fromInlineData = getValueByPath(fromObject, ['inlineData']);\n  if (fromInlineData != null) {\n    setValueByPath(toObject, ['inlineData'], fromInlineData);\n  }\n  const fromText = getValueByPath(fromObject, ['text']);\n  if (fromText != null) {\n    setValueByPath(toObject, ['text'], fromText);\n  }\n  return toObject;\n}\n/** @internal */\nfunction contentToMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromParts = getValueByPath(fromObject, ['parts']);\n  if (fromParts != null) {\n    if (Array.isArray(fromParts)) {\n      setValueByPath(toObject, ['parts'], fromParts.map(item => {\n        return partToMldev(apiClient, item);\n      }));\n    } else {\n      setValueByPath(toObject, ['parts'], fromParts);\n    }\n  }\n  const fromRole = getValueByPath(fromObject, ['role']);\n  if (fromRole != null) {\n    setValueByPath(toObject, ['role'], fromRole);\n  }\n  return toObject;\n}\n/** @internal */\nfunction contentToVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromParts = getValueByPath(fromObject, ['parts']);\n  if (fromParts != null) {\n    if (Array.isArray(fromParts)) {\n      setValueByPath(toObject, ['parts'], fromParts.map(item => {\n        return partToVertex(apiClient, item);\n      }));\n    } else {\n      setValueByPath(toObject, ['parts'], fromParts);\n    }\n  }\n  const fromRole = getValueByPath(fromObject, ['role']);\n  if (fromRole != null) {\n    setValueByPath(toObject, ['role'], fromRole);\n  }\n  return toObject;\n}\nfunction schemaToMldev(apiClient, fromObject) {\n  const toObject = {};\n  if (getValueByPath(fromObject, ['example']) !== undefined) {\n    throw new Error('example parameter is not supported in Gemini API.');\n  }\n  if (getValueByPath(fromObject, ['pattern']) !== undefined) {\n    throw new Error('pattern parameter is not supported in Gemini API.');\n  }\n  if (getValueByPath(fromObject, ['minimum']) !== undefined) {\n    throw new Error('minimum parameter is not supported in Gemini API.');\n  }\n  if (getValueByPath(fromObject, ['default']) !== undefined) {\n    throw new Error('default parameter is not supported in Gemini API.');\n  }\n  if (getValueByPath(fromObject, ['anyOf']) !== undefined) {\n    throw new Error('anyOf parameter is not supported in Gemini API.');\n  }\n  if (getValueByPath(fromObject, ['maxLength']) !== undefined) {\n    throw new Error('maxLength parameter is not supported in Gemini API.');\n  }\n  if (getValueByPath(fromObject, ['title']) !== undefined) {\n    throw new Error('title parameter is not supported in Gemini API.');\n  }\n  if (getValueByPath(fromObject, ['minLength']) !== undefined) {\n    throw new Error('minLength parameter is not supported in Gemini API.');\n  }\n  if (getValueByPath(fromObject, ['minProperties']) !== undefined) {\n    throw new Error('minProperties parameter is not supported in Gemini API.');\n  }\n  if (getValueByPath(fromObject, ['maximum']) !== undefined) {\n    throw new Error('maximum parameter is not supported in Gemini API.');\n  }\n  if (getValueByPath(fromObject, ['maxProperties']) !== undefined) {\n    throw new Error('maxProperties parameter is not supported in Gemini API.');\n  }\n  const fromDescription = getValueByPath(fromObject, ['description']);\n  if (fromDescription != null) {\n    setValueByPath(toObject, ['description'], fromDescription);\n  }\n  const fromEnum = getValueByPath(fromObject, ['enum']);\n  if (fromEnum != null) {\n    setValueByPath(toObject, ['enum'], fromEnum);\n  }\n  const fromFormat = getValueByPath(fromObject, ['format']);\n  if (fromFormat != null) {\n    setValueByPath(toObject, ['format'], fromFormat);\n  }\n  const fromItems = getValueByPath(fromObject, ['items']);\n  if (fromItems != null) {\n    setValueByPath(toObject, ['items'], fromItems);\n  }\n  const fromMaxItems = getValueByPath(fromObject, ['maxItems']);\n  if (fromMaxItems != null) {\n    setValueByPath(toObject, ['maxItems'], fromMaxItems);\n  }\n  const fromMinItems = getValueByPath(fromObject, ['minItems']);\n  if (fromMinItems != null) {\n    setValueByPath(toObject, ['minItems'], fromMinItems);\n  }\n  const fromNullable = getValueByPath(fromObject, ['nullable']);\n  if (fromNullable != null) {\n    setValueByPath(toObject, ['nullable'], fromNullable);\n  }\n  const fromProperties = getValueByPath(fromObject, ['properties']);\n  if (fromProperties != null) {\n    setValueByPath(toObject, ['properties'], fromProperties);\n  }\n  const fromPropertyOrdering = getValueByPath(fromObject, ['propertyOrdering']);\n  if (fromPropertyOrdering != null) {\n    setValueByPath(toObject, ['propertyOrdering'], fromPropertyOrdering);\n  }\n  const fromRequired = getValueByPath(fromObject, ['required']);\n  if (fromRequired != null) {\n    setValueByPath(toObject, ['required'], fromRequired);\n  }\n  const fromType = getValueByPath(fromObject, ['type']);\n  if (fromType != null) {\n    setValueByPath(toObject, ['type'], fromType);\n  }\n  return toObject;\n}\nfunction schemaToVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromExample = getValueByPath(fromObject, ['example']);\n  if (fromExample != null) {\n    setValueByPath(toObject, ['example'], fromExample);\n  }\n  const fromPattern = getValueByPath(fromObject, ['pattern']);\n  if (fromPattern != null) {\n    setValueByPath(toObject, ['pattern'], fromPattern);\n  }\n  const fromMinimum = getValueByPath(fromObject, ['minimum']);\n  if (fromMinimum != null) {\n    setValueByPath(toObject, ['minimum'], fromMinimum);\n  }\n  const fromDefault = getValueByPath(fromObject, ['default']);\n  if (fromDefault != null) {\n    setValueByPath(toObject, ['default'], fromDefault);\n  }\n  const fromAnyOf = getValueByPath(fromObject, ['anyOf']);\n  if (fromAnyOf != null) {\n    setValueByPath(toObject, ['anyOf'], fromAnyOf);\n  }\n  const fromMaxLength = getValueByPath(fromObject, ['maxLength']);\n  if (fromMaxLength != null) {\n    setValueByPath(toObject, ['maxLength'], fromMaxLength);\n  }\n  const fromTitle = getValueByPath(fromObject, ['title']);\n  if (fromTitle != null) {\n    setValueByPath(toObject, ['title'], fromTitle);\n  }\n  const fromMinLength = getValueByPath(fromObject, ['minLength']);\n  if (fromMinLength != null) {\n    setValueByPath(toObject, ['minLength'], fromMinLength);\n  }\n  const fromMinProperties = getValueByPath(fromObject, ['minProperties']);\n  if (fromMinProperties != null) {\n    setValueByPath(toObject, ['minProperties'], fromMinProperties);\n  }\n  const fromMaximum = getValueByPath(fromObject, ['maximum']);\n  if (fromMaximum != null) {\n    setValueByPath(toObject, ['maximum'], fromMaximum);\n  }\n  const fromMaxProperties = getValueByPath(fromObject, ['maxProperties']);\n  if (fromMaxProperties != null) {\n    setValueByPath(toObject, ['maxProperties'], fromMaxProperties);\n  }\n  const fromDescription = getValueByPath(fromObject, ['description']);\n  if (fromDescription != null) {\n    setValueByPath(toObject, ['description'], fromDescription);\n  }\n  const fromEnum = getValueByPath(fromObject, ['enum']);\n  if (fromEnum != null) {\n    setValueByPath(toObject, ['enum'], fromEnum);\n  }\n  const fromFormat = getValueByPath(fromObject, ['format']);\n  if (fromFormat != null) {\n    setValueByPath(toObject, ['format'], fromFormat);\n  }\n  const fromItems = getValueByPath(fromObject, ['items']);\n  if (fromItems != null) {\n    setValueByPath(toObject, ['items'], fromItems);\n  }\n  const fromMaxItems = getValueByPath(fromObject, ['maxItems']);\n  if (fromMaxItems != null) {\n    setValueByPath(toObject, ['maxItems'], fromMaxItems);\n  }\n  const fromMinItems = getValueByPath(fromObject, ['minItems']);\n  if (fromMinItems != null) {\n    setValueByPath(toObject, ['minItems'], fromMinItems);\n  }\n  const fromNullable = getValueByPath(fromObject, ['nullable']);\n  if (fromNullable != null) {\n    setValueByPath(toObject, ['nullable'], fromNullable);\n  }\n  const fromProperties = getValueByPath(fromObject, ['properties']);\n  if (fromProperties != null) {\n    setValueByPath(toObject, ['properties'], fromProperties);\n  }\n  const fromPropertyOrdering = getValueByPath(fromObject, ['propertyOrdering']);\n  if (fromPropertyOrdering != null) {\n    setValueByPath(toObject, ['propertyOrdering'], fromPropertyOrdering);\n  }\n  const fromRequired = getValueByPath(fromObject, ['required']);\n  if (fromRequired != null) {\n    setValueByPath(toObject, ['required'], fromRequired);\n  }\n  const fromType = getValueByPath(fromObject, ['type']);\n  if (fromType != null) {\n    setValueByPath(toObject, ['type'], fromType);\n  }\n  return toObject;\n}\nfunction safetySettingToMldev(apiClient, fromObject) {\n  const toObject = {};\n  if (getValueByPath(fromObject, ['method']) !== undefined) {\n    throw new Error('method parameter is not supported in Gemini API.');\n  }\n  const fromCategory = getValueByPath(fromObject, ['category']);\n  if (fromCategory != null) {\n    setValueByPath(toObject, ['category'], fromCategory);\n  }\n  const fromThreshold = getValueByPath(fromObject, ['threshold']);\n  if (fromThreshold != null) {\n    setValueByPath(toObject, ['threshold'], fromThreshold);\n  }\n  return toObject;\n}\nfunction safetySettingToVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromMethod = getValueByPath(fromObject, ['method']);\n  if (fromMethod != null) {\n    setValueByPath(toObject, ['method'], fromMethod);\n  }\n  const fromCategory = getValueByPath(fromObject, ['category']);\n  if (fromCategory != null) {\n    setValueByPath(toObject, ['category'], fromCategory);\n  }\n  const fromThreshold = getValueByPath(fromObject, ['threshold']);\n  if (fromThreshold != null) {\n    setValueByPath(toObject, ['threshold'], fromThreshold);\n  }\n  return toObject;\n}\nfunction functionDeclarationToMldev(apiClient, fromObject) {\n  const toObject = {};\n  if (getValueByPath(fromObject, ['response']) !== undefined) {\n    throw new Error('response parameter is not supported in Gemini API.');\n  }\n  const fromDescription = getValueByPath(fromObject, ['description']);\n  if (fromDescription != null) {\n    setValueByPath(toObject, ['description'], fromDescription);\n  }\n  const fromName = getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    setValueByPath(toObject, ['name'], fromName);\n  }\n  const fromParameters = getValueByPath(fromObject, ['parameters']);\n  if (fromParameters != null) {\n    setValueByPath(toObject, ['parameters'], fromParameters);\n  }\n  return toObject;\n}\nfunction functionDeclarationToVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromResponse = getValueByPath(fromObject, ['response']);\n  if (fromResponse != null) {\n    setValueByPath(toObject, ['response'], schemaToVertex(apiClient, fromResponse));\n  }\n  const fromDescription = getValueByPath(fromObject, ['description']);\n  if (fromDescription != null) {\n    setValueByPath(toObject, ['description'], fromDescription);\n  }\n  const fromName = getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    setValueByPath(toObject, ['name'], fromName);\n  }\n  const fromParameters = getValueByPath(fromObject, ['parameters']);\n  if (fromParameters != null) {\n    setValueByPath(toObject, ['parameters'], fromParameters);\n  }\n  return toObject;\n}\nfunction googleSearchToMldev(apiClient, fromObject) {\n  const toObject = {};\n  return toObject;\n}\nfunction googleSearchToVertex(apiClient, fromObject) {\n  const toObject = {};\n  return toObject;\n}\nfunction dynamicRetrievalConfigToMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromMode = getValueByPath(fromObject, ['mode']);\n  if (fromMode != null) {\n    setValueByPath(toObject, ['mode'], fromMode);\n  }\n  const fromDynamicThreshold = getValueByPath(fromObject, ['dynamicThreshold']);\n  if (fromDynamicThreshold != null) {\n    setValueByPath(toObject, ['dynamicThreshold'], fromDynamicThreshold);\n  }\n  return toObject;\n}\nfunction dynamicRetrievalConfigToVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromMode = getValueByPath(fromObject, ['mode']);\n  if (fromMode != null) {\n    setValueByPath(toObject, ['mode'], fromMode);\n  }\n  const fromDynamicThreshold = getValueByPath(fromObject, ['dynamicThreshold']);\n  if (fromDynamicThreshold != null) {\n    setValueByPath(toObject, ['dynamicThreshold'], fromDynamicThreshold);\n  }\n  return toObject;\n}\nfunction googleSearchRetrievalToMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromDynamicRetrievalConfig = getValueByPath(fromObject, ['dynamicRetrievalConfig']);\n  if (fromDynamicRetrievalConfig != null) {\n    setValueByPath(toObject, ['dynamicRetrievalConfig'], dynamicRetrievalConfigToMldev(apiClient, fromDynamicRetrievalConfig));\n  }\n  return toObject;\n}\nfunction googleSearchRetrievalToVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromDynamicRetrievalConfig = getValueByPath(fromObject, ['dynamicRetrievalConfig']);\n  if (fromDynamicRetrievalConfig != null) {\n    setValueByPath(toObject, ['dynamicRetrievalConfig'], dynamicRetrievalConfigToVertex(apiClient, fromDynamicRetrievalConfig));\n  }\n  return toObject;\n}\n/** @internal */\nfunction toolToMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromFunctionDeclarations = getValueByPath(fromObject, ['functionDeclarations']);\n  if (fromFunctionDeclarations != null) {\n    if (Array.isArray(fromFunctionDeclarations)) {\n      setValueByPath(toObject, ['functionDeclarations'], fromFunctionDeclarations.map(item => {\n        return functionDeclarationToMldev(apiClient, item);\n      }));\n    } else {\n      setValueByPath(toObject, ['functionDeclarations'], fromFunctionDeclarations);\n    }\n  }\n  if (getValueByPath(fromObject, ['retrieval']) !== undefined) {\n    throw new Error('retrieval parameter is not supported in Gemini API.');\n  }\n  const fromGoogleSearch = getValueByPath(fromObject, ['googleSearch']);\n  if (fromGoogleSearch != null) {\n    setValueByPath(toObject, ['googleSearch'], googleSearchToMldev());\n  }\n  const fromGoogleSearchRetrieval = getValueByPath(fromObject, ['googleSearchRetrieval']);\n  if (fromGoogleSearchRetrieval != null) {\n    setValueByPath(toObject, ['googleSearchRetrieval'], googleSearchRetrievalToMldev(apiClient, fromGoogleSearchRetrieval));\n  }\n  const fromCodeExecution = getValueByPath(fromObject, ['codeExecution']);\n  if (fromCodeExecution != null) {\n    setValueByPath(toObject, ['codeExecution'], fromCodeExecution);\n  }\n  return toObject;\n}\n/** @internal */\nfunction toolToVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromFunctionDeclarations = getValueByPath(fromObject, ['functionDeclarations']);\n  if (fromFunctionDeclarations != null) {\n    if (Array.isArray(fromFunctionDeclarations)) {\n      setValueByPath(toObject, ['functionDeclarations'], fromFunctionDeclarations.map(item => {\n        return functionDeclarationToVertex(apiClient, item);\n      }));\n    } else {\n      setValueByPath(toObject, ['functionDeclarations'], fromFunctionDeclarations);\n    }\n  }\n  const fromRetrieval = getValueByPath(fromObject, ['retrieval']);\n  if (fromRetrieval != null) {\n    setValueByPath(toObject, ['retrieval'], fromRetrieval);\n  }\n  const fromGoogleSearch = getValueByPath(fromObject, ['googleSearch']);\n  if (fromGoogleSearch != null) {\n    setValueByPath(toObject, ['googleSearch'], googleSearchToVertex());\n  }\n  const fromGoogleSearchRetrieval = getValueByPath(fromObject, ['googleSearchRetrieval']);\n  if (fromGoogleSearchRetrieval != null) {\n    setValueByPath(toObject, ['googleSearchRetrieval'], googleSearchRetrievalToVertex(apiClient, fromGoogleSearchRetrieval));\n  }\n  const fromCodeExecution = getValueByPath(fromObject, ['codeExecution']);\n  if (fromCodeExecution != null) {\n    setValueByPath(toObject, ['codeExecution'], fromCodeExecution);\n  }\n  return toObject;\n}\nfunction functionCallingConfigToMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromMode = getValueByPath(fromObject, ['mode']);\n  if (fromMode != null) {\n    setValueByPath(toObject, ['mode'], fromMode);\n  }\n  const fromAllowedFunctionNames = getValueByPath(fromObject, ['allowedFunctionNames']);\n  if (fromAllowedFunctionNames != null) {\n    setValueByPath(toObject, ['allowedFunctionNames'], fromAllowedFunctionNames);\n  }\n  return toObject;\n}\nfunction functionCallingConfigToVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromMode = getValueByPath(fromObject, ['mode']);\n  if (fromMode != null) {\n    setValueByPath(toObject, ['mode'], fromMode);\n  }\n  const fromAllowedFunctionNames = getValueByPath(fromObject, ['allowedFunctionNames']);\n  if (fromAllowedFunctionNames != null) {\n    setValueByPath(toObject, ['allowedFunctionNames'], fromAllowedFunctionNames);\n  }\n  return toObject;\n}\nfunction toolConfigToMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromFunctionCallingConfig = getValueByPath(fromObject, ['functionCallingConfig']);\n  if (fromFunctionCallingConfig != null) {\n    setValueByPath(toObject, ['functionCallingConfig'], functionCallingConfigToMldev(apiClient, fromFunctionCallingConfig));\n  }\n  return toObject;\n}\nfunction toolConfigToVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromFunctionCallingConfig = getValueByPath(fromObject, ['functionCallingConfig']);\n  if (fromFunctionCallingConfig != null) {\n    setValueByPath(toObject, ['functionCallingConfig'], functionCallingConfigToVertex(apiClient, fromFunctionCallingConfig));\n  }\n  return toObject;\n}\nfunction prebuiltVoiceConfigToMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromVoiceName = getValueByPath(fromObject, ['voiceName']);\n  if (fromVoiceName != null) {\n    setValueByPath(toObject, ['voiceName'], fromVoiceName);\n  }\n  return toObject;\n}\nfunction prebuiltVoiceConfigToVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromVoiceName = getValueByPath(fromObject, ['voiceName']);\n  if (fromVoiceName != null) {\n    setValueByPath(toObject, ['voiceName'], fromVoiceName);\n  }\n  return toObject;\n}\nfunction voiceConfigToMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromPrebuiltVoiceConfig = getValueByPath(fromObject, ['prebuiltVoiceConfig']);\n  if (fromPrebuiltVoiceConfig != null) {\n    setValueByPath(toObject, ['prebuiltVoiceConfig'], prebuiltVoiceConfigToMldev(apiClient, fromPrebuiltVoiceConfig));\n  }\n  return toObject;\n}\nfunction voiceConfigToVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromPrebuiltVoiceConfig = getValueByPath(fromObject, ['prebuiltVoiceConfig']);\n  if (fromPrebuiltVoiceConfig != null) {\n    setValueByPath(toObject, ['prebuiltVoiceConfig'], prebuiltVoiceConfigToVertex(apiClient, fromPrebuiltVoiceConfig));\n  }\n  return toObject;\n}\nfunction speechConfigToMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromVoiceConfig = getValueByPath(fromObject, ['voiceConfig']);\n  if (fromVoiceConfig != null) {\n    setValueByPath(toObject, ['voiceConfig'], voiceConfigToMldev(apiClient, fromVoiceConfig));\n  }\n  return toObject;\n}\nfunction speechConfigToVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromVoiceConfig = getValueByPath(fromObject, ['voiceConfig']);\n  if (fromVoiceConfig != null) {\n    setValueByPath(toObject, ['voiceConfig'], voiceConfigToVertex(apiClient, fromVoiceConfig));\n  }\n  return toObject;\n}\nfunction thinkingConfigToMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromIncludeThoughts = getValueByPath(fromObject, ['includeThoughts']);\n  if (fromIncludeThoughts != null) {\n    setValueByPath(toObject, ['includeThoughts'], fromIncludeThoughts);\n  }\n  return toObject;\n}\nfunction thinkingConfigToVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromIncludeThoughts = getValueByPath(fromObject, ['includeThoughts']);\n  if (fromIncludeThoughts != null) {\n    setValueByPath(toObject, ['includeThoughts'], fromIncludeThoughts);\n  }\n  return toObject;\n}\nfunction generateContentConfigToMldev(apiClient, fromObject, parentObject) {\n  const toObject = {};\n  const fromSystemInstruction = getValueByPath(fromObject, ['systemInstruction']);\n  if (parentObject !== undefined && fromSystemInstruction != null) {\n    setValueByPath(parentObject, ['systemInstruction'], contentToMldev(apiClient, tContent(apiClient, fromSystemInstruction)));\n  }\n  const fromTemperature = getValueByPath(fromObject, ['temperature']);\n  if (fromTemperature != null) {\n    setValueByPath(toObject, ['temperature'], fromTemperature);\n  }\n  const fromTopP = getValueByPath(fromObject, ['topP']);\n  if (fromTopP != null) {\n    setValueByPath(toObject, ['topP'], fromTopP);\n  }\n  const fromTopK = getValueByPath(fromObject, ['topK']);\n  if (fromTopK != null) {\n    setValueByPath(toObject, ['topK'], fromTopK);\n  }\n  const fromCandidateCount = getValueByPath(fromObject, ['candidateCount']);\n  if (fromCandidateCount != null) {\n    setValueByPath(toObject, ['candidateCount'], fromCandidateCount);\n  }\n  const fromMaxOutputTokens = getValueByPath(fromObject, ['maxOutputTokens']);\n  if (fromMaxOutputTokens != null) {\n    setValueByPath(toObject, ['maxOutputTokens'], fromMaxOutputTokens);\n  }\n  const fromStopSequences = getValueByPath(fromObject, ['stopSequences']);\n  if (fromStopSequences != null) {\n    setValueByPath(toObject, ['stopSequences'], fromStopSequences);\n  }\n  const fromResponseLogprobs = getValueByPath(fromObject, ['responseLogprobs']);\n  if (fromResponseLogprobs != null) {\n    setValueByPath(toObject, ['responseLogprobs'], fromResponseLogprobs);\n  }\n  const fromLogprobs = getValueByPath(fromObject, ['logprobs']);\n  if (fromLogprobs != null) {\n    setValueByPath(toObject, ['logprobs'], fromLogprobs);\n  }\n  const fromPresencePenalty = getValueByPath(fromObject, ['presencePenalty']);\n  if (fromPresencePenalty != null) {\n    setValueByPath(toObject, ['presencePenalty'], fromPresencePenalty);\n  }\n  const fromFrequencyPenalty = getValueByPath(fromObject, ['frequencyPenalty']);\n  if (fromFrequencyPenalty != null) {\n    setValueByPath(toObject, ['frequencyPenalty'], fromFrequencyPenalty);\n  }\n  const fromSeed = getValueByPath(fromObject, ['seed']);\n  if (fromSeed != null) {\n    setValueByPath(toObject, ['seed'], fromSeed);\n  }\n  const fromResponseMimeType = getValueByPath(fromObject, ['responseMimeType']);\n  if (fromResponseMimeType != null) {\n    setValueByPath(toObject, ['responseMimeType'], fromResponseMimeType);\n  }\n  const fromResponseSchema = getValueByPath(fromObject, ['responseSchema']);\n  if (fromResponseSchema != null) {\n    setValueByPath(toObject, ['responseSchema'], schemaToMldev(apiClient, tSchema(apiClient, fromResponseSchema)));\n  }\n  if (getValueByPath(fromObject, ['routingConfig']) !== undefined) {\n    throw new Error('routingConfig parameter is not supported in Gemini API.');\n  }\n  const fromSafetySettings = getValueByPath(fromObject, ['safetySettings']);\n  if (parentObject !== undefined && fromSafetySettings != null) {\n    if (Array.isArray(fromSafetySettings)) {\n      setValueByPath(parentObject, ['safetySettings'], fromSafetySettings.map(item => {\n        return safetySettingToMldev(apiClient, item);\n      }));\n    } else {\n      setValueByPath(parentObject, ['safetySettings'], fromSafetySettings);\n    }\n  }\n  const fromTools = getValueByPath(fromObject, ['tools']);\n  if (parentObject !== undefined && fromTools != null) {\n    if (Array.isArray(fromTools)) {\n      setValueByPath(parentObject, ['tools'], tTools(apiClient, tTools(apiClient, fromTools).map(item => {\n        return toolToMldev(apiClient, tTool(apiClient, item));\n      })));\n    } else {\n      setValueByPath(parentObject, ['tools'], tTools(apiClient, fromTools));\n    }\n  }\n  const fromToolConfig = getValueByPath(fromObject, ['toolConfig']);\n  if (parentObject !== undefined && fromToolConfig != null) {\n    setValueByPath(parentObject, ['toolConfig'], toolConfigToMldev(apiClient, fromToolConfig));\n  }\n  if (getValueByPath(fromObject, ['labels']) !== undefined) {\n    throw new Error('labels parameter is not supported in Gemini API.');\n  }\n  const fromCachedContent = getValueByPath(fromObject, ['cachedContent']);\n  if (parentObject !== undefined && fromCachedContent != null) {\n    setValueByPath(parentObject, ['cachedContent'], tCachedContentName(apiClient, fromCachedContent));\n  }\n  const fromResponseModalities = getValueByPath(fromObject, ['responseModalities']);\n  if (fromResponseModalities != null) {\n    setValueByPath(toObject, ['responseModalities'], fromResponseModalities);\n  }\n  const fromMediaResolution = getValueByPath(fromObject, ['mediaResolution']);\n  if (fromMediaResolution != null) {\n    setValueByPath(toObject, ['mediaResolution'], fromMediaResolution);\n  }\n  const fromSpeechConfig = getValueByPath(fromObject, ['speechConfig']);\n  if (fromSpeechConfig != null) {\n    setValueByPath(toObject, ['speechConfig'], speechConfigToMldev(apiClient, tSpeechConfig(apiClient, fromSpeechConfig)));\n  }\n  if (getValueByPath(fromObject, ['audioTimestamp']) !== undefined) {\n    throw new Error('audioTimestamp parameter is not supported in Gemini API.');\n  }\n  const fromThinkingConfig = getValueByPath(fromObject, ['thinkingConfig']);\n  if (fromThinkingConfig != null) {\n    setValueByPath(toObject, ['thinkingConfig'], thinkingConfigToMldev(apiClient, fromThinkingConfig));\n  }\n  return toObject;\n}\nfunction generateContentConfigToVertex(apiClient, fromObject, parentObject) {\n  const toObject = {};\n  const fromSystemInstruction = getValueByPath(fromObject, ['systemInstruction']);\n  if (parentObject !== undefined && fromSystemInstruction != null) {\n    setValueByPath(parentObject, ['systemInstruction'], contentToVertex(apiClient, tContent(apiClient, fromSystemInstruction)));\n  }\n  const fromTemperature = getValueByPath(fromObject, ['temperature']);\n  if (fromTemperature != null) {\n    setValueByPath(toObject, ['temperature'], fromTemperature);\n  }\n  const fromTopP = getValueByPath(fromObject, ['topP']);\n  if (fromTopP != null) {\n    setValueByPath(toObject, ['topP'], fromTopP);\n  }\n  const fromTopK = getValueByPath(fromObject, ['topK']);\n  if (fromTopK != null) {\n    setValueByPath(toObject, ['topK'], fromTopK);\n  }\n  const fromCandidateCount = getValueByPath(fromObject, ['candidateCount']);\n  if (fromCandidateCount != null) {\n    setValueByPath(toObject, ['candidateCount'], fromCandidateCount);\n  }\n  const fromMaxOutputTokens = getValueByPath(fromObject, ['maxOutputTokens']);\n  if (fromMaxOutputTokens != null) {\n    setValueByPath(toObject, ['maxOutputTokens'], fromMaxOutputTokens);\n  }\n  const fromStopSequences = getValueByPath(fromObject, ['stopSequences']);\n  if (fromStopSequences != null) {\n    setValueByPath(toObject, ['stopSequences'], fromStopSequences);\n  }\n  const fromResponseLogprobs = getValueByPath(fromObject, ['responseLogprobs']);\n  if (fromResponseLogprobs != null) {\n    setValueByPath(toObject, ['responseLogprobs'], fromResponseLogprobs);\n  }\n  const fromLogprobs = getValueByPath(fromObject, ['logprobs']);\n  if (fromLogprobs != null) {\n    setValueByPath(toObject, ['logprobs'], fromLogprobs);\n  }\n  const fromPresencePenalty = getValueByPath(fromObject, ['presencePenalty']);\n  if (fromPresencePenalty != null) {\n    setValueByPath(toObject, ['presencePenalty'], fromPresencePenalty);\n  }\n  const fromFrequencyPenalty = getValueByPath(fromObject, ['frequencyPenalty']);\n  if (fromFrequencyPenalty != null) {\n    setValueByPath(toObject, ['frequencyPenalty'], fromFrequencyPenalty);\n  }\n  const fromSeed = getValueByPath(fromObject, ['seed']);\n  if (fromSeed != null) {\n    setValueByPath(toObject, ['seed'], fromSeed);\n  }\n  const fromResponseMimeType = getValueByPath(fromObject, ['responseMimeType']);\n  if (fromResponseMimeType != null) {\n    setValueByPath(toObject, ['responseMimeType'], fromResponseMimeType);\n  }\n  const fromResponseSchema = getValueByPath(fromObject, ['responseSchema']);\n  if (fromResponseSchema != null) {\n    setValueByPath(toObject, ['responseSchema'], schemaToVertex(apiClient, tSchema(apiClient, fromResponseSchema)));\n  }\n  const fromRoutingConfig = getValueByPath(fromObject, ['routingConfig']);\n  if (fromRoutingConfig != null) {\n    setValueByPath(toObject, ['routingConfig'], fromRoutingConfig);\n  }\n  const fromSafetySettings = getValueByPath(fromObject, ['safetySettings']);\n  if (parentObject !== undefined && fromSafetySettings != null) {\n    if (Array.isArray(fromSafetySettings)) {\n      setValueByPath(parentObject, ['safetySettings'], fromSafetySettings.map(item => {\n        return safetySettingToVertex(apiClient, item);\n      }));\n    } else {\n      setValueByPath(parentObject, ['safetySettings'], fromSafetySettings);\n    }\n  }\n  const fromTools = getValueByPath(fromObject, ['tools']);\n  if (parentObject !== undefined && fromTools != null) {\n    if (Array.isArray(fromTools)) {\n      setValueByPath(parentObject, ['tools'], tTools(apiClient, tTools(apiClient, fromTools).map(item => {\n        return toolToVertex(apiClient, tTool(apiClient, item));\n      })));\n    } else {\n      setValueByPath(parentObject, ['tools'], tTools(apiClient, fromTools));\n    }\n  }\n  const fromToolConfig = getValueByPath(fromObject, ['toolConfig']);\n  if (parentObject !== undefined && fromToolConfig != null) {\n    setValueByPath(parentObject, ['toolConfig'], toolConfigToVertex(apiClient, fromToolConfig));\n  }\n  const fromLabels = getValueByPath(fromObject, ['labels']);\n  if (parentObject !== undefined && fromLabels != null) {\n    setValueByPath(parentObject, ['labels'], fromLabels);\n  }\n  const fromCachedContent = getValueByPath(fromObject, ['cachedContent']);\n  if (parentObject !== undefined && fromCachedContent != null) {\n    setValueByPath(parentObject, ['cachedContent'], tCachedContentName(apiClient, fromCachedContent));\n  }\n  const fromResponseModalities = getValueByPath(fromObject, ['responseModalities']);\n  if (fromResponseModalities != null) {\n    setValueByPath(toObject, ['responseModalities'], fromResponseModalities);\n  }\n  const fromMediaResolution = getValueByPath(fromObject, ['mediaResolution']);\n  if (fromMediaResolution != null) {\n    setValueByPath(toObject, ['mediaResolution'], fromMediaResolution);\n  }\n  const fromSpeechConfig = getValueByPath(fromObject, ['speechConfig']);\n  if (fromSpeechConfig != null) {\n    setValueByPath(toObject, ['speechConfig'], speechConfigToVertex(apiClient, tSpeechConfig(apiClient, fromSpeechConfig)));\n  }\n  const fromAudioTimestamp = getValueByPath(fromObject, ['audioTimestamp']);\n  if (fromAudioTimestamp != null) {\n    setValueByPath(toObject, ['audioTimestamp'], fromAudioTimestamp);\n  }\n  const fromThinkingConfig = getValueByPath(fromObject, ['thinkingConfig']);\n  if (fromThinkingConfig != null) {\n    setValueByPath(toObject, ['thinkingConfig'], thinkingConfigToVertex(apiClient, fromThinkingConfig));\n  }\n  return toObject;\n}\nfunction generateContentParametersToMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromModel = getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    setValueByPath(toObject, ['_url', 'model'], tModel(apiClient, fromModel));\n  }\n  const fromContents = getValueByPath(fromObject, ['contents']);\n  if (fromContents != null) {\n    if (Array.isArray(fromContents)) {\n      setValueByPath(toObject, ['contents'], tContents(apiClient, tContents(apiClient, fromContents).map(item => {\n        return contentToMldev(apiClient, item);\n      })));\n    } else {\n      setValueByPath(toObject, ['contents'], tContents(apiClient, fromContents));\n    }\n  }\n  const fromConfig = getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    setValueByPath(toObject, ['generationConfig'], generateContentConfigToMldev(apiClient, fromConfig, toObject));\n  }\n  return toObject;\n}\nfunction generateContentParametersToVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromModel = getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    setValueByPath(toObject, ['_url', 'model'], tModel(apiClient, fromModel));\n  }\n  const fromContents = getValueByPath(fromObject, ['contents']);\n  if (fromContents != null) {\n    if (Array.isArray(fromContents)) {\n      setValueByPath(toObject, ['contents'], tContents(apiClient, tContents(apiClient, fromContents).map(item => {\n        return contentToVertex(apiClient, item);\n      })));\n    } else {\n      setValueByPath(toObject, ['contents'], tContents(apiClient, fromContents));\n    }\n  }\n  const fromConfig = getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    setValueByPath(toObject, ['generationConfig'], generateContentConfigToVertex(apiClient, fromConfig, toObject));\n  }\n  return toObject;\n}\nfunction embedContentConfigToMldev(apiClient, fromObject, parentObject) {\n  const toObject = {};\n  const fromTaskType = getValueByPath(fromObject, ['taskType']);\n  if (parentObject !== undefined && fromTaskType != null) {\n    setValueByPath(parentObject, ['requests[]', 'taskType'], fromTaskType);\n  }\n  const fromTitle = getValueByPath(fromObject, ['title']);\n  if (parentObject !== undefined && fromTitle != null) {\n    setValueByPath(parentObject, ['requests[]', 'title'], fromTitle);\n  }\n  const fromOutputDimensionality = getValueByPath(fromObject, ['outputDimensionality']);\n  if (parentObject !== undefined && fromOutputDimensionality != null) {\n    setValueByPath(parentObject, ['requests[]', 'outputDimensionality'], fromOutputDimensionality);\n  }\n  if (getValueByPath(fromObject, ['mimeType']) !== undefined) {\n    throw new Error('mimeType parameter is not supported in Gemini API.');\n  }\n  if (getValueByPath(fromObject, ['autoTruncate']) !== undefined) {\n    throw new Error('autoTruncate parameter is not supported in Gemini API.');\n  }\n  return toObject;\n}\nfunction embedContentConfigToVertex(apiClient, fromObject, parentObject) {\n  const toObject = {};\n  const fromTaskType = getValueByPath(fromObject, ['taskType']);\n  if (parentObject !== undefined && fromTaskType != null) {\n    setValueByPath(parentObject, ['instances[]', 'task_type'], fromTaskType);\n  }\n  const fromTitle = getValueByPath(fromObject, ['title']);\n  if (parentObject !== undefined && fromTitle != null) {\n    setValueByPath(parentObject, ['instances[]', 'title'], fromTitle);\n  }\n  const fromOutputDimensionality = getValueByPath(fromObject, ['outputDimensionality']);\n  if (parentObject !== undefined && fromOutputDimensionality != null) {\n    setValueByPath(parentObject, ['parameters', 'outputDimensionality'], fromOutputDimensionality);\n  }\n  const fromMimeType = getValueByPath(fromObject, ['mimeType']);\n  if (parentObject !== undefined && fromMimeType != null) {\n    setValueByPath(parentObject, ['instances[]', 'mimeType'], fromMimeType);\n  }\n  const fromAutoTruncate = getValueByPath(fromObject, ['autoTruncate']);\n  if (parentObject !== undefined && fromAutoTruncate != null) {\n    setValueByPath(parentObject, ['parameters', 'autoTruncate'], fromAutoTruncate);\n  }\n  return toObject;\n}\nfunction embedContentParametersToMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromModel = getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    setValueByPath(toObject, ['_url', 'model'], tModel(apiClient, fromModel));\n  }\n  const fromContents = getValueByPath(fromObject, ['contents']);\n  if (fromContents != null) {\n    setValueByPath(toObject, ['requests[]', 'content'], tContentsForEmbed(apiClient, fromContents));\n  }\n  const fromConfig = getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    setValueByPath(toObject, ['config'], embedContentConfigToMldev(apiClient, fromConfig, toObject));\n  }\n  const fromModelForEmbedContent = getValueByPath(fromObject, ['model']);\n  if (fromModelForEmbedContent !== undefined) {\n    setValueByPath(toObject, ['requests[]', 'model'], tModel(apiClient, fromModelForEmbedContent));\n  }\n  return toObject;\n}\nfunction embedContentParametersToVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromModel = getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    setValueByPath(toObject, ['_url', 'model'], tModel(apiClient, fromModel));\n  }\n  const fromContents = getValueByPath(fromObject, ['contents']);\n  if (fromContents != null) {\n    setValueByPath(toObject, ['instances[]', 'content'], tContentsForEmbed(apiClient, fromContents));\n  }\n  const fromConfig = getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    setValueByPath(toObject, ['config'], embedContentConfigToVertex(apiClient, fromConfig, toObject));\n  }\n  return toObject;\n}\nfunction generateImagesConfigToMldev(apiClient, fromObject, parentObject) {\n  const toObject = {};\n  if (getValueByPath(fromObject, ['outputGcsUri']) !== undefined) {\n    throw new Error('outputGcsUri parameter is not supported in Gemini API.');\n  }\n  if (getValueByPath(fromObject, ['negativePrompt']) !== undefined) {\n    throw new Error('negativePrompt parameter is not supported in Gemini API.');\n  }\n  const fromNumberOfImages = getValueByPath(fromObject, ['numberOfImages']);\n  if (parentObject !== undefined && fromNumberOfImages != null) {\n    setValueByPath(parentObject, ['parameters', 'sampleCount'], fromNumberOfImages);\n  }\n  const fromAspectRatio = getValueByPath(fromObject, ['aspectRatio']);\n  if (parentObject !== undefined && fromAspectRatio != null) {\n    setValueByPath(parentObject, ['parameters', 'aspectRatio'], fromAspectRatio);\n  }\n  const fromGuidanceScale = getValueByPath(fromObject, ['guidanceScale']);\n  if (parentObject !== undefined && fromGuidanceScale != null) {\n    setValueByPath(parentObject, ['parameters', 'guidanceScale'], fromGuidanceScale);\n  }\n  if (getValueByPath(fromObject, ['seed']) !== undefined) {\n    throw new Error('seed parameter is not supported in Gemini API.');\n  }\n  const fromSafetyFilterLevel = getValueByPath(fromObject, ['safetyFilterLevel']);\n  if (parentObject !== undefined && fromSafetyFilterLevel != null) {\n    setValueByPath(parentObject, ['parameters', 'safetySetting'], fromSafetyFilterLevel);\n  }\n  const fromPersonGeneration = getValueByPath(fromObject, ['personGeneration']);\n  if (parentObject !== undefined && fromPersonGeneration != null) {\n    setValueByPath(parentObject, ['parameters', 'personGeneration'], fromPersonGeneration);\n  }\n  const fromIncludeSafetyAttributes = getValueByPath(fromObject, ['includeSafetyAttributes']);\n  if (parentObject !== undefined && fromIncludeSafetyAttributes != null) {\n    setValueByPath(parentObject, ['parameters', 'includeSafetyAttributes'], fromIncludeSafetyAttributes);\n  }\n  const fromIncludeRaiReason = getValueByPath(fromObject, ['includeRaiReason']);\n  if (parentObject !== undefined && fromIncludeRaiReason != null) {\n    setValueByPath(parentObject, ['parameters', 'includeRaiReason'], fromIncludeRaiReason);\n  }\n  const fromLanguage = getValueByPath(fromObject, ['language']);\n  if (parentObject !== undefined && fromLanguage != null) {\n    setValueByPath(parentObject, ['parameters', 'language'], fromLanguage);\n  }\n  const fromOutputMimeType = getValueByPath(fromObject, ['outputMimeType']);\n  if (parentObject !== undefined && fromOutputMimeType != null) {\n    setValueByPath(parentObject, ['parameters', 'outputOptions', 'mimeType'], fromOutputMimeType);\n  }\n  const fromOutputCompressionQuality = getValueByPath(fromObject, ['outputCompressionQuality']);\n  if (parentObject !== undefined && fromOutputCompressionQuality != null) {\n    setValueByPath(parentObject, ['parameters', 'outputOptions', 'compressionQuality'], fromOutputCompressionQuality);\n  }\n  if (getValueByPath(fromObject, ['addWatermark']) !== undefined) {\n    throw new Error('addWatermark parameter is not supported in Gemini API.');\n  }\n  if (getValueByPath(fromObject, ['enhancePrompt']) !== undefined) {\n    throw new Error('enhancePrompt parameter is not supported in Gemini API.');\n  }\n  return toObject;\n}\nfunction generateImagesConfigToVertex(apiClient, fromObject, parentObject) {\n  const toObject = {};\n  const fromOutputGcsUri = getValueByPath(fromObject, ['outputGcsUri']);\n  if (parentObject !== undefined && fromOutputGcsUri != null) {\n    setValueByPath(parentObject, ['parameters', 'storageUri'], fromOutputGcsUri);\n  }\n  const fromNegativePrompt = getValueByPath(fromObject, ['negativePrompt']);\n  if (parentObject !== undefined && fromNegativePrompt != null) {\n    setValueByPath(parentObject, ['parameters', 'negativePrompt'], fromNegativePrompt);\n  }\n  const fromNumberOfImages = getValueByPath(fromObject, ['numberOfImages']);\n  if (parentObject !== undefined && fromNumberOfImages != null) {\n    setValueByPath(parentObject, ['parameters', 'sampleCount'], fromNumberOfImages);\n  }\n  const fromAspectRatio = getValueByPath(fromObject, ['aspectRatio']);\n  if (parentObject !== undefined && fromAspectRatio != null) {\n    setValueByPath(parentObject, ['parameters', 'aspectRatio'], fromAspectRatio);\n  }\n  const fromGuidanceScale = getValueByPath(fromObject, ['guidanceScale']);\n  if (parentObject !== undefined && fromGuidanceScale != null) {\n    setValueByPath(parentObject, ['parameters', 'guidanceScale'], fromGuidanceScale);\n  }\n  const fromSeed = getValueByPath(fromObject, ['seed']);\n  if (parentObject !== undefined && fromSeed != null) {\n    setValueByPath(parentObject, ['parameters', 'seed'], fromSeed);\n  }\n  const fromSafetyFilterLevel = getValueByPath(fromObject, ['safetyFilterLevel']);\n  if (parentObject !== undefined && fromSafetyFilterLevel != null) {\n    setValueByPath(parentObject, ['parameters', 'safetySetting'], fromSafetyFilterLevel);\n  }\n  const fromPersonGeneration = getValueByPath(fromObject, ['personGeneration']);\n  if (parentObject !== undefined && fromPersonGeneration != null) {\n    setValueByPath(parentObject, ['parameters', 'personGeneration'], fromPersonGeneration);\n  }\n  const fromIncludeSafetyAttributes = getValueByPath(fromObject, ['includeSafetyAttributes']);\n  if (parentObject !== undefined && fromIncludeSafetyAttributes != null) {\n    setValueByPath(parentObject, ['parameters', 'includeSafetyAttributes'], fromIncludeSafetyAttributes);\n  }\n  const fromIncludeRaiReason = getValueByPath(fromObject, ['includeRaiReason']);\n  if (parentObject !== undefined && fromIncludeRaiReason != null) {\n    setValueByPath(parentObject, ['parameters', 'includeRaiReason'], fromIncludeRaiReason);\n  }\n  const fromLanguage = getValueByPath(fromObject, ['language']);\n  if (parentObject !== undefined && fromLanguage != null) {\n    setValueByPath(parentObject, ['parameters', 'language'], fromLanguage);\n  }\n  const fromOutputMimeType = getValueByPath(fromObject, ['outputMimeType']);\n  if (parentObject !== undefined && fromOutputMimeType != null) {\n    setValueByPath(parentObject, ['parameters', 'outputOptions', 'mimeType'], fromOutputMimeType);\n  }\n  const fromOutputCompressionQuality = getValueByPath(fromObject, ['outputCompressionQuality']);\n  if (parentObject !== undefined && fromOutputCompressionQuality != null) {\n    setValueByPath(parentObject, ['parameters', 'outputOptions', 'compressionQuality'], fromOutputCompressionQuality);\n  }\n  const fromAddWatermark = getValueByPath(fromObject, ['addWatermark']);\n  if (parentObject !== undefined && fromAddWatermark != null) {\n    setValueByPath(parentObject, ['parameters', 'addWatermark'], fromAddWatermark);\n  }\n  const fromEnhancePrompt = getValueByPath(fromObject, ['enhancePrompt']);\n  if (parentObject !== undefined && fromEnhancePrompt != null) {\n    setValueByPath(parentObject, ['parameters', 'enhancePrompt'], fromEnhancePrompt);\n  }\n  return toObject;\n}\nfunction generateImagesParametersToMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromModel = getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    setValueByPath(toObject, ['_url', 'model'], tModel(apiClient, fromModel));\n  }\n  const fromPrompt = getValueByPath(fromObject, ['prompt']);\n  if (fromPrompt != null) {\n    setValueByPath(toObject, ['instances[0]', 'prompt'], fromPrompt);\n  }\n  const fromConfig = getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    setValueByPath(toObject, ['config'], generateImagesConfigToMldev(apiClient, fromConfig, toObject));\n  }\n  return toObject;\n}\nfunction generateImagesParametersToVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromModel = getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    setValueByPath(toObject, ['_url', 'model'], tModel(apiClient, fromModel));\n  }\n  const fromPrompt = getValueByPath(fromObject, ['prompt']);\n  if (fromPrompt != null) {\n    setValueByPath(toObject, ['instances[0]', 'prompt'], fromPrompt);\n  }\n  const fromConfig = getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    setValueByPath(toObject, ['config'], generateImagesConfigToVertex(apiClient, fromConfig, toObject));\n  }\n  return toObject;\n}\nfunction countTokensConfigToMldev(apiClient, fromObject) {\n  const toObject = {};\n  if (getValueByPath(fromObject, ['systemInstruction']) !== undefined) {\n    throw new Error('systemInstruction parameter is not supported in Gemini API.');\n  }\n  if (getValueByPath(fromObject, ['tools']) !== undefined) {\n    throw new Error('tools parameter is not supported in Gemini API.');\n  }\n  if (getValueByPath(fromObject, ['generationConfig']) !== undefined) {\n    throw new Error('generationConfig parameter is not supported in Gemini API.');\n  }\n  return toObject;\n}\nfunction countTokensConfigToVertex(apiClient, fromObject, parentObject) {\n  const toObject = {};\n  const fromSystemInstruction = getValueByPath(fromObject, ['systemInstruction']);\n  if (parentObject !== undefined && fromSystemInstruction != null) {\n    setValueByPath(parentObject, ['systemInstruction'], contentToVertex(apiClient, tContent(apiClient, fromSystemInstruction)));\n  }\n  const fromTools = getValueByPath(fromObject, ['tools']);\n  if (parentObject !== undefined && fromTools != null) {\n    if (Array.isArray(fromTools)) {\n      setValueByPath(parentObject, ['tools'], fromTools.map(item => {\n        return toolToVertex(apiClient, item);\n      }));\n    } else {\n      setValueByPath(parentObject, ['tools'], fromTools);\n    }\n  }\n  const fromGenerationConfig = getValueByPath(fromObject, ['generationConfig']);\n  if (parentObject !== undefined && fromGenerationConfig != null) {\n    setValueByPath(parentObject, ['generationConfig'], fromGenerationConfig);\n  }\n  return toObject;\n}\nfunction countTokensParametersToMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromModel = getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    setValueByPath(toObject, ['_url', 'model'], tModel(apiClient, fromModel));\n  }\n  const fromContents = getValueByPath(fromObject, ['contents']);\n  if (fromContents != null) {\n    if (Array.isArray(fromContents)) {\n      setValueByPath(toObject, ['contents'], tContents(apiClient, tContents(apiClient, fromContents).map(item => {\n        return contentToMldev(apiClient, item);\n      })));\n    } else {\n      setValueByPath(toObject, ['contents'], tContents(apiClient, fromContents));\n    }\n  }\n  const fromConfig = getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    setValueByPath(toObject, ['config'], countTokensConfigToMldev(apiClient, fromConfig));\n  }\n  return toObject;\n}\nfunction countTokensParametersToVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromModel = getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    setValueByPath(toObject, ['_url', 'model'], tModel(apiClient, fromModel));\n  }\n  const fromContents = getValueByPath(fromObject, ['contents']);\n  if (fromContents != null) {\n    if (Array.isArray(fromContents)) {\n      setValueByPath(toObject, ['contents'], tContents(apiClient, tContents(apiClient, fromContents).map(item => {\n        return contentToVertex(apiClient, item);\n      })));\n    } else {\n      setValueByPath(toObject, ['contents'], tContents(apiClient, fromContents));\n    }\n  }\n  const fromConfig = getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    setValueByPath(toObject, ['config'], countTokensConfigToVertex(apiClient, fromConfig, toObject));\n  }\n  return toObject;\n}\nfunction computeTokensParametersToMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromModel = getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    setValueByPath(toObject, ['_url', 'model'], tModel(apiClient, fromModel));\n  }\n  if (getValueByPath(fromObject, ['contents']) !== undefined) {\n    throw new Error('contents parameter is not supported in Gemini API.');\n  }\n  const fromConfig = getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    setValueByPath(toObject, ['config'], fromConfig);\n  }\n  return toObject;\n}\nfunction computeTokensParametersToVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromModel = getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    setValueByPath(toObject, ['_url', 'model'], tModel(apiClient, fromModel));\n  }\n  const fromContents = getValueByPath(fromObject, ['contents']);\n  if (fromContents != null) {\n    if (Array.isArray(fromContents)) {\n      setValueByPath(toObject, ['contents'], tContents(apiClient, tContents(apiClient, fromContents).map(item => {\n        return contentToVertex(apiClient, item);\n      })));\n    } else {\n      setValueByPath(toObject, ['contents'], tContents(apiClient, fromContents));\n    }\n  }\n  const fromConfig = getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    setValueByPath(toObject, ['config'], fromConfig);\n  }\n  return toObject;\n}\nfunction partFromMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromThought = getValueByPath(fromObject, ['thought']);\n  if (fromThought != null) {\n    setValueByPath(toObject, ['thought'], fromThought);\n  }\n  const fromCodeExecutionResult = getValueByPath(fromObject, ['codeExecutionResult']);\n  if (fromCodeExecutionResult != null) {\n    setValueByPath(toObject, ['codeExecutionResult'], fromCodeExecutionResult);\n  }\n  const fromExecutableCode = getValueByPath(fromObject, ['executableCode']);\n  if (fromExecutableCode != null) {\n    setValueByPath(toObject, ['executableCode'], fromExecutableCode);\n  }\n  const fromFileData = getValueByPath(fromObject, ['fileData']);\n  if (fromFileData != null) {\n    setValueByPath(toObject, ['fileData'], fromFileData);\n  }\n  const fromFunctionCall = getValueByPath(fromObject, ['functionCall']);\n  if (fromFunctionCall != null) {\n    setValueByPath(toObject, ['functionCall'], fromFunctionCall);\n  }\n  const fromFunctionResponse = getValueByPath(fromObject, ['functionResponse']);\n  if (fromFunctionResponse != null) {\n    setValueByPath(toObject, ['functionResponse'], fromFunctionResponse);\n  }\n  const fromInlineData = getValueByPath(fromObject, ['inlineData']);\n  if (fromInlineData != null) {\n    setValueByPath(toObject, ['inlineData'], fromInlineData);\n  }\n  const fromText = getValueByPath(fromObject, ['text']);\n  if (fromText != null) {\n    setValueByPath(toObject, ['text'], fromText);\n  }\n  return toObject;\n}\nfunction partFromVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromVideoMetadata = getValueByPath(fromObject, ['videoMetadata']);\n  if (fromVideoMetadata != null) {\n    setValueByPath(toObject, ['videoMetadata'], fromVideoMetadata);\n  }\n  const fromThought = getValueByPath(fromObject, ['thought']);\n  if (fromThought != null) {\n    setValueByPath(toObject, ['thought'], fromThought);\n  }\n  const fromCodeExecutionResult = getValueByPath(fromObject, ['codeExecutionResult']);\n  if (fromCodeExecutionResult != null) {\n    setValueByPath(toObject, ['codeExecutionResult'], fromCodeExecutionResult);\n  }\n  const fromExecutableCode = getValueByPath(fromObject, ['executableCode']);\n  if (fromExecutableCode != null) {\n    setValueByPath(toObject, ['executableCode'], fromExecutableCode);\n  }\n  const fromFileData = getValueByPath(fromObject, ['fileData']);\n  if (fromFileData != null) {\n    setValueByPath(toObject, ['fileData'], fromFileData);\n  }\n  const fromFunctionCall = getValueByPath(fromObject, ['functionCall']);\n  if (fromFunctionCall != null) {\n    setValueByPath(toObject, ['functionCall'], fromFunctionCall);\n  }\n  const fromFunctionResponse = getValueByPath(fromObject, ['functionResponse']);\n  if (fromFunctionResponse != null) {\n    setValueByPath(toObject, ['functionResponse'], fromFunctionResponse);\n  }\n  const fromInlineData = getValueByPath(fromObject, ['inlineData']);\n  if (fromInlineData != null) {\n    setValueByPath(toObject, ['inlineData'], fromInlineData);\n  }\n  const fromText = getValueByPath(fromObject, ['text']);\n  if (fromText != null) {\n    setValueByPath(toObject, ['text'], fromText);\n  }\n  return toObject;\n}\n/** @internal */\nfunction contentFromMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromParts = getValueByPath(fromObject, ['parts']);\n  if (fromParts != null) {\n    if (Array.isArray(fromParts)) {\n      setValueByPath(toObject, ['parts'], fromParts.map(item => {\n        return partFromMldev(apiClient, item);\n      }));\n    } else {\n      setValueByPath(toObject, ['parts'], fromParts);\n    }\n  }\n  const fromRole = getValueByPath(fromObject, ['role']);\n  if (fromRole != null) {\n    setValueByPath(toObject, ['role'], fromRole);\n  }\n  return toObject;\n}\n/** @internal */\nfunction contentFromVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromParts = getValueByPath(fromObject, ['parts']);\n  if (fromParts != null) {\n    if (Array.isArray(fromParts)) {\n      setValueByPath(toObject, ['parts'], fromParts.map(item => {\n        return partFromVertex(apiClient, item);\n      }));\n    } else {\n      setValueByPath(toObject, ['parts'], fromParts);\n    }\n  }\n  const fromRole = getValueByPath(fromObject, ['role']);\n  if (fromRole != null) {\n    setValueByPath(toObject, ['role'], fromRole);\n  }\n  return toObject;\n}\nfunction citationMetadataFromMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromCitations = getValueByPath(fromObject, ['citationSources']);\n  if (fromCitations != null) {\n    setValueByPath(toObject, ['citations'], fromCitations);\n  }\n  return toObject;\n}\nfunction citationMetadataFromVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromCitations = getValueByPath(fromObject, ['citations']);\n  if (fromCitations != null) {\n    setValueByPath(toObject, ['citations'], fromCitations);\n  }\n  return toObject;\n}\nfunction candidateFromMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromContent = getValueByPath(fromObject, ['content']);\n  if (fromContent != null) {\n    setValueByPath(toObject, ['content'], contentFromMldev(apiClient, fromContent));\n  }\n  const fromCitationMetadata = getValueByPath(fromObject, ['citationMetadata']);\n  if (fromCitationMetadata != null) {\n    setValueByPath(toObject, ['citationMetadata'], citationMetadataFromMldev(apiClient, fromCitationMetadata));\n  }\n  const fromTokenCount = getValueByPath(fromObject, ['tokenCount']);\n  if (fromTokenCount != null) {\n    setValueByPath(toObject, ['tokenCount'], fromTokenCount);\n  }\n  const fromAvgLogprobs = getValueByPath(fromObject, ['avgLogprobs']);\n  if (fromAvgLogprobs != null) {\n    setValueByPath(toObject, ['avgLogprobs'], fromAvgLogprobs);\n  }\n  const fromFinishReason = getValueByPath(fromObject, ['finishReason']);\n  if (fromFinishReason != null) {\n    setValueByPath(toObject, ['finishReason'], fromFinishReason);\n  }\n  const fromGroundingMetadata = getValueByPath(fromObject, ['groundingMetadata']);\n  if (fromGroundingMetadata != null) {\n    setValueByPath(toObject, ['groundingMetadata'], fromGroundingMetadata);\n  }\n  const fromIndex = getValueByPath(fromObject, ['index']);\n  if (fromIndex != null) {\n    setValueByPath(toObject, ['index'], fromIndex);\n  }\n  const fromLogprobsResult = getValueByPath(fromObject, ['logprobsResult']);\n  if (fromLogprobsResult != null) {\n    setValueByPath(toObject, ['logprobsResult'], fromLogprobsResult);\n  }\n  const fromSafetyRatings = getValueByPath(fromObject, ['safetyRatings']);\n  if (fromSafetyRatings != null) {\n    setValueByPath(toObject, ['safetyRatings'], fromSafetyRatings);\n  }\n  return toObject;\n}\nfunction candidateFromVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromContent = getValueByPath(fromObject, ['content']);\n  if (fromContent != null) {\n    setValueByPath(toObject, ['content'], contentFromVertex(apiClient, fromContent));\n  }\n  const fromCitationMetadata = getValueByPath(fromObject, ['citationMetadata']);\n  if (fromCitationMetadata != null) {\n    setValueByPath(toObject, ['citationMetadata'], citationMetadataFromVertex(apiClient, fromCitationMetadata));\n  }\n  const fromFinishMessage = getValueByPath(fromObject, ['finishMessage']);\n  if (fromFinishMessage != null) {\n    setValueByPath(toObject, ['finishMessage'], fromFinishMessage);\n  }\n  const fromAvgLogprobs = getValueByPath(fromObject, ['avgLogprobs']);\n  if (fromAvgLogprobs != null) {\n    setValueByPath(toObject, ['avgLogprobs'], fromAvgLogprobs);\n  }\n  const fromFinishReason = getValueByPath(fromObject, ['finishReason']);\n  if (fromFinishReason != null) {\n    setValueByPath(toObject, ['finishReason'], fromFinishReason);\n  }\n  const fromGroundingMetadata = getValueByPath(fromObject, ['groundingMetadata']);\n  if (fromGroundingMetadata != null) {\n    setValueByPath(toObject, ['groundingMetadata'], fromGroundingMetadata);\n  }\n  const fromIndex = getValueByPath(fromObject, ['index']);\n  if (fromIndex != null) {\n    setValueByPath(toObject, ['index'], fromIndex);\n  }\n  const fromLogprobsResult = getValueByPath(fromObject, ['logprobsResult']);\n  if (fromLogprobsResult != null) {\n    setValueByPath(toObject, ['logprobsResult'], fromLogprobsResult);\n  }\n  const fromSafetyRatings = getValueByPath(fromObject, ['safetyRatings']);\n  if (fromSafetyRatings != null) {\n    setValueByPath(toObject, ['safetyRatings'], fromSafetyRatings);\n  }\n  return toObject;\n}\nfunction generateContentResponseFromMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromCandidates = getValueByPath(fromObject, ['candidates']);\n  if (fromCandidates != null) {\n    if (Array.isArray(fromCandidates)) {\n      setValueByPath(toObject, ['candidates'], fromCandidates.map(item => {\n        return candidateFromMldev(apiClient, item);\n      }));\n    } else {\n      setValueByPath(toObject, ['candidates'], fromCandidates);\n    }\n  }\n  const fromModelVersion = getValueByPath(fromObject, ['modelVersion']);\n  if (fromModelVersion != null) {\n    setValueByPath(toObject, ['modelVersion'], fromModelVersion);\n  }\n  const fromPromptFeedback = getValueByPath(fromObject, ['promptFeedback']);\n  if (fromPromptFeedback != null) {\n    setValueByPath(toObject, ['promptFeedback'], fromPromptFeedback);\n  }\n  const fromUsageMetadata = getValueByPath(fromObject, ['usageMetadata']);\n  if (fromUsageMetadata != null) {\n    setValueByPath(toObject, ['usageMetadata'], fromUsageMetadata);\n  }\n  return toObject;\n}\nfunction generateContentResponseFromVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromCandidates = getValueByPath(fromObject, ['candidates']);\n  if (fromCandidates != null) {\n    if (Array.isArray(fromCandidates)) {\n      setValueByPath(toObject, ['candidates'], fromCandidates.map(item => {\n        return candidateFromVertex(apiClient, item);\n      }));\n    } else {\n      setValueByPath(toObject, ['candidates'], fromCandidates);\n    }\n  }\n  const fromCreateTime = getValueByPath(fromObject, ['createTime']);\n  if (fromCreateTime != null) {\n    setValueByPath(toObject, ['createTime'], fromCreateTime);\n  }\n  const fromResponseId = getValueByPath(fromObject, ['responseId']);\n  if (fromResponseId != null) {\n    setValueByPath(toObject, ['responseId'], fromResponseId);\n  }\n  const fromModelVersion = getValueByPath(fromObject, ['modelVersion']);\n  if (fromModelVersion != null) {\n    setValueByPath(toObject, ['modelVersion'], fromModelVersion);\n  }\n  const fromPromptFeedback = getValueByPath(fromObject, ['promptFeedback']);\n  if (fromPromptFeedback != null) {\n    setValueByPath(toObject, ['promptFeedback'], fromPromptFeedback);\n  }\n  const fromUsageMetadata = getValueByPath(fromObject, ['usageMetadata']);\n  if (fromUsageMetadata != null) {\n    setValueByPath(toObject, ['usageMetadata'], fromUsageMetadata);\n  }\n  return toObject;\n}\nfunction contentEmbeddingStatisticsFromVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromTruncated = getValueByPath(fromObject, ['truncated']);\n  if (fromTruncated != null) {\n    setValueByPath(toObject, ['truncated'], fromTruncated);\n  }\n  const fromTokenCount = getValueByPath(fromObject, ['token_count']);\n  if (fromTokenCount != null) {\n    setValueByPath(toObject, ['tokenCount'], fromTokenCount);\n  }\n  return toObject;\n}\nfunction contentEmbeddingFromMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromValues = getValueByPath(fromObject, ['values']);\n  if (fromValues != null) {\n    setValueByPath(toObject, ['values'], fromValues);\n  }\n  return toObject;\n}\nfunction contentEmbeddingFromVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromValues = getValueByPath(fromObject, ['values']);\n  if (fromValues != null) {\n    setValueByPath(toObject, ['values'], fromValues);\n  }\n  const fromStatistics = getValueByPath(fromObject, ['statistics']);\n  if (fromStatistics != null) {\n    setValueByPath(toObject, ['statistics'], contentEmbeddingStatisticsFromVertex(apiClient, fromStatistics));\n  }\n  return toObject;\n}\nfunction embedContentMetadataFromMldev(apiClient, fromObject) {\n  const toObject = {};\n  return toObject;\n}\nfunction embedContentMetadataFromVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromBillableCharacterCount = getValueByPath(fromObject, ['billableCharacterCount']);\n  if (fromBillableCharacterCount != null) {\n    setValueByPath(toObject, ['billableCharacterCount'], fromBillableCharacterCount);\n  }\n  return toObject;\n}\nfunction embedContentResponseFromMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromEmbeddings = getValueByPath(fromObject, ['embeddings']);\n  if (fromEmbeddings != null) {\n    if (Array.isArray(fromEmbeddings)) {\n      setValueByPath(toObject, ['embeddings'], fromEmbeddings.map(item => {\n        return contentEmbeddingFromMldev(apiClient, item);\n      }));\n    } else {\n      setValueByPath(toObject, ['embeddings'], fromEmbeddings);\n    }\n  }\n  const fromMetadata = getValueByPath(fromObject, ['metadata']);\n  if (fromMetadata != null) {\n    setValueByPath(toObject, ['metadata'], embedContentMetadataFromMldev());\n  }\n  return toObject;\n}\nfunction embedContentResponseFromVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromEmbeddings = getValueByPath(fromObject, ['predictions[]', 'embeddings']);\n  if (fromEmbeddings != null) {\n    if (Array.isArray(fromEmbeddings)) {\n      setValueByPath(toObject, ['embeddings'], fromEmbeddings.map(item => {\n        return contentEmbeddingFromVertex(apiClient, item);\n      }));\n    } else {\n      setValueByPath(toObject, ['embeddings'], fromEmbeddings);\n    }\n  }\n  const fromMetadata = getValueByPath(fromObject, ['metadata']);\n  if (fromMetadata != null) {\n    setValueByPath(toObject, ['metadata'], embedContentMetadataFromVertex(apiClient, fromMetadata));\n  }\n  return toObject;\n}\nfunction imageFromMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromImageBytes = getValueByPath(fromObject, ['bytesBase64Encoded']);\n  if (fromImageBytes != null) {\n    setValueByPath(toObject, ['imageBytes'], tBytes(apiClient, fromImageBytes));\n  }\n  const fromMimeType = getValueByPath(fromObject, ['mimeType']);\n  if (fromMimeType != null) {\n    setValueByPath(toObject, ['mimeType'], fromMimeType);\n  }\n  return toObject;\n}\nfunction imageFromVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromGcsUri = getValueByPath(fromObject, ['gcsUri']);\n  if (fromGcsUri != null) {\n    setValueByPath(toObject, ['gcsUri'], fromGcsUri);\n  }\n  const fromImageBytes = getValueByPath(fromObject, ['bytesBase64Encoded']);\n  if (fromImageBytes != null) {\n    setValueByPath(toObject, ['imageBytes'], tBytes(apiClient, fromImageBytes));\n  }\n  const fromMimeType = getValueByPath(fromObject, ['mimeType']);\n  if (fromMimeType != null) {\n    setValueByPath(toObject, ['mimeType'], fromMimeType);\n  }\n  return toObject;\n}\nfunction generatedImageFromMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromImage = getValueByPath(fromObject, ['_self']);\n  if (fromImage != null) {\n    setValueByPath(toObject, ['image'], imageFromMldev(apiClient, fromImage));\n  }\n  const fromRaiFilteredReason = getValueByPath(fromObject, ['raiFilteredReason']);\n  if (fromRaiFilteredReason != null) {\n    setValueByPath(toObject, ['raiFilteredReason'], fromRaiFilteredReason);\n  }\n  return toObject;\n}\nfunction generatedImageFromVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromImage = getValueByPath(fromObject, ['_self']);\n  if (fromImage != null) {\n    setValueByPath(toObject, ['image'], imageFromVertex(apiClient, fromImage));\n  }\n  const fromRaiFilteredReason = getValueByPath(fromObject, ['raiFilteredReason']);\n  if (fromRaiFilteredReason != null) {\n    setValueByPath(toObject, ['raiFilteredReason'], fromRaiFilteredReason);\n  }\n  const fromEnhancedPrompt = getValueByPath(fromObject, ['prompt']);\n  if (fromEnhancedPrompt != null) {\n    setValueByPath(toObject, ['enhancedPrompt'], fromEnhancedPrompt);\n  }\n  return toObject;\n}\nfunction generateImagesResponseFromMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromGeneratedImages = getValueByPath(fromObject, ['predictions']);\n  if (fromGeneratedImages != null) {\n    if (Array.isArray(fromGeneratedImages)) {\n      setValueByPath(toObject, ['generatedImages'], fromGeneratedImages.map(item => {\n        return generatedImageFromMldev(apiClient, item);\n      }));\n    } else {\n      setValueByPath(toObject, ['generatedImages'], fromGeneratedImages);\n    }\n  }\n  return toObject;\n}\nfunction generateImagesResponseFromVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromGeneratedImages = getValueByPath(fromObject, ['predictions']);\n  if (fromGeneratedImages != null) {\n    if (Array.isArray(fromGeneratedImages)) {\n      setValueByPath(toObject, ['generatedImages'], fromGeneratedImages.map(item => {\n        return generatedImageFromVertex(apiClient, item);\n      }));\n    } else {\n      setValueByPath(toObject, ['generatedImages'], fromGeneratedImages);\n    }\n  }\n  return toObject;\n}\nfunction countTokensResponseFromMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromTotalTokens = getValueByPath(fromObject, ['totalTokens']);\n  if (fromTotalTokens != null) {\n    setValueByPath(toObject, ['totalTokens'], fromTotalTokens);\n  }\n  const fromCachedContentTokenCount = getValueByPath(fromObject, ['cachedContentTokenCount']);\n  if (fromCachedContentTokenCount != null) {\n    setValueByPath(toObject, ['cachedContentTokenCount'], fromCachedContentTokenCount);\n  }\n  return toObject;\n}\nfunction countTokensResponseFromVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromTotalTokens = getValueByPath(fromObject, ['totalTokens']);\n  if (fromTotalTokens != null) {\n    setValueByPath(toObject, ['totalTokens'], fromTotalTokens);\n  }\n  return toObject;\n}\nfunction computeTokensResponseFromMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromTokensInfo = getValueByPath(fromObject, ['tokensInfo']);\n  if (fromTokensInfo != null) {\n    setValueByPath(toObject, ['tokensInfo'], fromTokensInfo);\n  }\n  return toObject;\n}\nfunction computeTokensResponseFromVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromTokensInfo = getValueByPath(fromObject, ['tokensInfo']);\n  if (fromTokensInfo != null) {\n    setValueByPath(toObject, ['tokensInfo'], fromTokensInfo);\n  }\n  return toObject;\n}\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nconst FUNCTION_RESPONSE_REQUIRES_ID = 'FunctionResponse request must have an `id` field from the response of a ToolCall.FunctionalCalls in Google AI.';\nfunction liveConnectConfigToMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromGenerationConfig = getValueByPath(fromObject, ['generationConfig']);\n  if (fromGenerationConfig !== undefined) {\n    setValueByPath(toObject, ['generationConfig'], fromGenerationConfig);\n  }\n  const fromResponseModalities = getValueByPath(fromObject, ['responseModalities']);\n  if (fromResponseModalities !== undefined) {\n    setValueByPath(toObject, ['generationConfig', 'responseModalities'], fromResponseModalities);\n  }\n  const fromSpeechConfig = getValueByPath(fromObject, ['speechConfig']);\n  if (fromSpeechConfig !== undefined) {\n    setValueByPath(toObject, ['generationConfig', 'speechConfig'], fromSpeechConfig);\n  }\n  const fromSystemInstruction = getValueByPath(fromObject, ['systemInstruction']);\n  if (fromSystemInstruction !== undefined && fromSystemInstruction !== null) {\n    setValueByPath(toObject, ['systemInstruction'], contentToMldev(apiClient, fromSystemInstruction));\n  }\n  const fromTools = getValueByPath(fromObject, ['tools']);\n  if (fromTools !== undefined && fromTools !== null && Array.isArray(fromTools)) {\n    setValueByPath(toObject, ['tools'], fromTools.map(item => {\n      return toolToMldev(apiClient, item);\n    }));\n  }\n  return toObject;\n}\nfunction liveConnectConfigToVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromGenerationConfig = getValueByPath(fromObject, ['generationConfig']);\n  if (fromGenerationConfig !== undefined) {\n    setValueByPath(toObject, ['generationConfig'], fromGenerationConfig);\n  }\n  const fromResponseModalities = getValueByPath(fromObject, ['responseModalities']);\n  if (fromResponseModalities !== undefined) {\n    setValueByPath(toObject, ['generationConfig', 'responseModalities'], fromResponseModalities);\n  } else {\n    // Set default to AUDIO to align with MLDev API.\n    setValueByPath(toObject, ['generationConfig', 'responseModalities'], ['AUDIO']);\n  }\n  const fromSpeechConfig = getValueByPath(fromObject, ['speechConfig']);\n  if (fromSpeechConfig !== undefined) {\n    setValueByPath(toObject, ['generationConfig', 'speechConfig'], fromSpeechConfig);\n  }\n  const fromSystemInstruction = getValueByPath(fromObject, ['systemInstruction']);\n  if (fromSystemInstruction !== undefined && fromSystemInstruction !== null) {\n    setValueByPath(toObject, ['systemInstruction'], contentToVertex(apiClient, fromSystemInstruction));\n  }\n  const fromTools = getValueByPath(fromObject, ['tools']);\n  if (fromTools !== undefined && fromTools !== null && Array.isArray(fromTools)) {\n    setValueByPath(toObject, ['tools'], fromTools.map(item => {\n      return toolToVertex(apiClient, item);\n    }));\n  }\n  return toObject;\n}\nfunction liveConnectParametersToMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromConfig = getValueByPath(fromObject, ['config']);\n  if (fromConfig !== undefined && fromConfig !== null) {\n    setValueByPath(toObject, ['setup'], liveConnectConfigToMldev(apiClient, fromConfig));\n  }\n  const fromModel = getValueByPath(fromObject, ['model']);\n  if (fromModel !== undefined) {\n    setValueByPath(toObject, ['setup', 'model'], fromModel);\n  }\n  return toObject;\n}\nfunction liveConnectParametersToVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromConfig = getValueByPath(fromObject, ['config']);\n  if (fromConfig !== undefined && fromConfig !== null) {\n    setValueByPath(toObject, ['setup'], liveConnectConfigToVertex(apiClient, fromConfig));\n  }\n  const fromModel = getValueByPath(fromObject, ['model']);\n  if (fromModel !== undefined) {\n    setValueByPath(toObject, ['setup', 'model'], fromModel);\n  }\n  return toObject;\n}\nfunction liveServerContentFromMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromModelTurn = getValueByPath(fromObject, ['modelTurn']);\n  if (fromModelTurn !== undefined && fromModelTurn !== null) {\n    setValueByPath(toObject, ['modelTurn'], contentFromMldev(apiClient, fromModelTurn));\n  }\n  const fromTurnComplete = getValueByPath(fromObject, ['turnComplete']);\n  if (fromTurnComplete !== undefined) {\n    setValueByPath(toObject, ['turnComplete'], fromTurnComplete);\n  }\n  const fromInterrupted = getValueByPath(fromObject, ['interrupted']);\n  if (fromInterrupted !== undefined) {\n    setValueByPath(toObject, ['interrupted'], fromInterrupted);\n  }\n  return toObject;\n}\nfunction liveServerContentFromVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromModelTurn = getValueByPath(fromObject, ['modelTurn']);\n  if (fromModelTurn !== undefined && fromModelTurn !== null) {\n    setValueByPath(toObject, ['modelTurn'], contentFromVertex(apiClient, fromModelTurn));\n  }\n  const fromTurnComplete = getValueByPath(fromObject, ['turnComplete']);\n  if (fromTurnComplete !== undefined) {\n    setValueByPath(toObject, ['turnComplete'], fromTurnComplete);\n  }\n  const fromInterrupted = getValueByPath(fromObject, ['interrupted']);\n  if (fromInterrupted !== undefined) {\n    setValueByPath(toObject, ['interrupted'], fromInterrupted);\n  }\n  return toObject;\n}\nfunction functionCallFromMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromId = getValueByPath(fromObject, ['id']);\n  if (fromId !== undefined) {\n    setValueByPath(toObject, ['id'], fromId);\n  }\n  const fromArgs = getValueByPath(fromObject, ['args']);\n  if (fromArgs !== undefined) {\n    setValueByPath(toObject, ['args'], fromArgs);\n  }\n  const fromName = getValueByPath(fromObject, ['name']);\n  if (fromName !== undefined) {\n    setValueByPath(toObject, ['name'], fromName);\n  }\n  return toObject;\n}\nfunction functionCallFromVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromArgs = getValueByPath(fromObject, ['args']);\n  if (fromArgs !== undefined) {\n    setValueByPath(toObject, ['args'], fromArgs);\n  }\n  const fromName = getValueByPath(fromObject, ['name']);\n  if (fromName !== undefined) {\n    setValueByPath(toObject, ['name'], fromName);\n  }\n  return toObject;\n}\nfunction liveServerToolCallFromMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromFunctionCalls = getValueByPath(fromObject, ['functionCalls']);\n  if (fromFunctionCalls !== undefined && fromFunctionCalls !== null && Array.isArray(fromFunctionCalls)) {\n    setValueByPath(toObject, ['functionCalls'], fromFunctionCalls.map(item => {\n      return functionCallFromMldev(apiClient, item);\n    }));\n  }\n  return toObject;\n}\nfunction liveServerToolCallFromVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromFunctionCalls = getValueByPath(fromObject, ['functionCalls']);\n  if (fromFunctionCalls !== undefined && fromFunctionCalls !== null && Array.isArray(fromFunctionCalls)) {\n    setValueByPath(toObject, ['functionCalls'], fromFunctionCalls.map(item => {\n      return functionCallFromVertex(apiClient, item);\n    }));\n  }\n  return toObject;\n}\nfunction liveServerToolCallCancellationFromMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromIds = getValueByPath(fromObject, ['ids']);\n  if (fromIds !== undefined) {\n    setValueByPath(toObject, ['ids'], fromIds);\n  }\n  return toObject;\n}\nfunction liveServerToolCallCancellationFromVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromIds = getValueByPath(fromObject, ['ids']);\n  if (fromIds !== undefined) {\n    setValueByPath(toObject, ['ids'], fromIds);\n  }\n  return toObject;\n}\nfunction liveServerMessageFromMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromSetupComplete = getValueByPath(fromObject, ['setupComplete']);\n  if (fromSetupComplete !== undefined) {\n    setValueByPath(toObject, ['setupComplete'], fromSetupComplete);\n  }\n  const fromServerContent = getValueByPath(fromObject, ['serverContent']);\n  if (fromServerContent !== undefined && fromServerContent !== null) {\n    setValueByPath(toObject, ['serverContent'], liveServerContentFromMldev(apiClient, fromServerContent));\n  }\n  const fromToolCall = getValueByPath(fromObject, ['toolCall']);\n  if (fromToolCall !== undefined && fromToolCall !== null) {\n    setValueByPath(toObject, ['toolCall'], liveServerToolCallFromMldev(apiClient, fromToolCall));\n  }\n  const fromToolCallCancellation = getValueByPath(fromObject, ['toolCallCancellation']);\n  if (fromToolCallCancellation !== undefined && fromToolCallCancellation !== null) {\n    setValueByPath(toObject, ['toolCallCancellation'], liveServerToolCallCancellationFromMldev(apiClient, fromToolCallCancellation));\n  }\n  return toObject;\n}\nfunction liveServerMessageFromVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromSetupComplete = getValueByPath(fromObject, ['setupComplete']);\n  if (fromSetupComplete !== undefined) {\n    setValueByPath(toObject, ['setupComplete'], fromSetupComplete);\n  }\n  const fromServerContent = getValueByPath(fromObject, ['serverContent']);\n  if (fromServerContent !== undefined && fromServerContent !== null) {\n    setValueByPath(toObject, ['serverContent'], liveServerContentFromVertex(apiClient, fromServerContent));\n  }\n  const fromToolCall = getValueByPath(fromObject, ['toolCall']);\n  if (fromToolCall !== undefined && fromToolCall !== null) {\n    setValueByPath(toObject, ['toolCall'], liveServerToolCallFromVertex(apiClient, fromToolCall));\n  }\n  const fromToolCallCancellation = getValueByPath(fromObject, ['toolCallCancellation']);\n  if (fromToolCallCancellation !== undefined && fromToolCallCancellation !== null) {\n    setValueByPath(toObject, ['toolCallCancellation'], liveServerToolCallCancellationFromVertex(apiClient, fromToolCallCancellation));\n  }\n  return toObject;\n}\n/**\n * Handles incoming messages from the WebSocket.\n *\n * @remarks\n * This function is responsible for parsing incoming messages, transforming them\n * into LiveServerMessages, and then calling the onmessage callback. Note that\n * the first message which is received from the server is a setupComplete\n * message.\n *\n * @param apiClient The ApiClient instance.\n * @param onmessage The user-provided onmessage callback (if any).\n * @param event The MessageEvent from the WebSocket.\n */\nasync function handleWebSocketMessage(apiClient, onmessage, event) {\n  let serverMessage;\n  let data;\n  if (event.data instanceof Blob) {\n    data = JSON.parse(await event.data.text());\n  } else {\n    data = JSON.parse(event.data);\n  }\n  if (apiClient.isVertexAI()) {\n    serverMessage = liveServerMessageFromVertex(apiClient, data);\n  } else {\n    serverMessage = liveServerMessageFromMldev(apiClient, data);\n  }\n  onmessage(serverMessage);\n}\n/**\n   Live class encapsulates the configuration for live interaction with the\n   Generative Language API. It embeds ApiClient for general API settings.\n\n   @experimental\n  */\nclass Live {\n  constructor(apiClient, auth, webSocketFactory) {\n    this.apiClient = apiClient;\n    this.auth = auth;\n    this.webSocketFactory = webSocketFactory;\n  }\n  /**\n     Establishes a connection to the specified model with the given\n     configuration and returns a Session object representing that connection.\n        @experimental\n        @param params - The parameters for establishing a connection to the model.\n     @return A live session.\n        @example\n     ```ts\n     const session = await ai.live.connect({\n       model: 'gemini-2.0-flash-exp',\n       config: {\n         responseModalities: [Modality.AUDIO],\n       },\n       callbacks: {\n         onopen: () => {\n           console.log('Connected to the socket.');\n         },\n         onmessage: (e: MessageEvent) => {\n           console.log('Received message from the server: %s\\n', debug(e.data));\n         },\n         onerror: (e: ErrorEvent) => {\n           console.log('Error occurred: %s\\n', debug(e.error));\n         },\n         onclose: (e: CloseEvent) => {\n           console.log('Connection closed.');\n         },\n       },\n     });\n     ```\n    */\n  async connect(params) {\n    var _a, _b;\n    const websocketBaseUrl = this.apiClient.getWebsocketBaseUrl();\n    const apiVersion = this.apiClient.getApiVersion();\n    let url;\n    const headers = mapToHeaders(this.apiClient.getDefaultHeaders());\n    if (this.apiClient.isVertexAI()) {\n      url = \"\".concat(websocketBaseUrl, \"/ws/google.cloud.aiplatform.\").concat(apiVersion, \".LlmBidiService/BidiGenerateContent\");\n      await this.auth.addAuthHeaders(headers);\n    } else {\n      const apiKey = this.apiClient.getApiKey();\n      url = \"\".concat(websocketBaseUrl, \"/ws/google.ai.generativelanguage.\").concat(apiVersion, \".GenerativeService.BidiGenerateContent?key=\").concat(apiKey);\n    }\n    let onopenResolve = () => {};\n    const onopenPromise = new Promise(resolve => {\n      onopenResolve = resolve;\n    });\n    const callbacks = params.callbacks;\n    const onopenAwaitedCallback = function () {\n      var _a;\n      (_a = callbacks === null || callbacks === void 0 ? void 0 : callbacks.onopen) === null || _a === void 0 ? void 0 : _a.call(callbacks);\n      onopenResolve({});\n    };\n    const apiClient = this.apiClient;\n    const websocketCallbacks = {\n      onopen: onopenAwaitedCallback,\n      onmessage: event => {\n        void handleWebSocketMessage(apiClient, callbacks.onmessage, event);\n      },\n      onerror: (_a = callbacks === null || callbacks === void 0 ? void 0 : callbacks.onerror) !== null && _a !== void 0 ? _a : function (e) {},\n      onclose: (_b = callbacks === null || callbacks === void 0 ? void 0 : callbacks.onclose) !== null && _b !== void 0 ? _b : function (e) {}\n    };\n    const conn = this.webSocketFactory.create(url, headersToMap(headers), websocketCallbacks);\n    conn.connect();\n    // Wait for the websocket to open before sending requests.\n    await onopenPromise;\n    let transformedModel = tModel(this.apiClient, params.model);\n    if (this.apiClient.isVertexAI() && transformedModel.startsWith('publishers/')) {\n      const project = this.apiClient.getProject();\n      const location = this.apiClient.getLocation();\n      transformedModel = \"projects/\".concat(project, \"/locations/\").concat(location, \"/\") + transformedModel;\n    }\n    let clientMessage = {};\n    const liveConnectParameters = {\n      model: transformedModel,\n      config: params.config,\n      callbacks: params.callbacks\n    };\n    if (this.apiClient.isVertexAI()) {\n      clientMessage = liveConnectParametersToVertex(this.apiClient, liveConnectParameters);\n    } else {\n      clientMessage = liveConnectParametersToMldev(this.apiClient, liveConnectParameters);\n    }\n    conn.send(JSON.stringify(clientMessage));\n    return new Session(conn, this.apiClient);\n  }\n}\n/**\n   Represents a connection to the API.\n\n   @experimental\n  */\nclass Session {\n  constructor(conn, apiClient) {\n    this.conn = conn;\n    this.apiClient = apiClient;\n  }\n  tLiveClientContent(apiClient, params) {\n    if (params.turns !== null && params.turns !== undefined) {\n      let contents = [];\n      try {\n        contents = tContents(apiClient, params.turns);\n        if (apiClient.isVertexAI()) {\n          contents = contents.map(item => contentToVertex(apiClient, item));\n        } else {\n          contents = contents.map(item => contentToMldev(apiClient, item));\n        }\n      } catch (_a) {\n        throw new Error(\"Failed to parse client content \\\"turns\\\", type: '\".concat(typeof params.turns, \"'\"));\n      }\n      return {\n        clientContent: {\n          turns: contents,\n          turnComplete: params.turnComplete\n        }\n      };\n    }\n    return {\n      clientContent: {\n        turnComplete: params.turnComplete\n      }\n    };\n  }\n  tLiveClientRealtimeInput(apiClient, params) {\n    let clientMessage = {};\n    if (!('media' in params) || !params.media) {\n      throw new Error(\"Failed to convert realtime input \\\"media\\\", type: '\".concat(typeof params.media, \"'\"));\n    }\n    // LiveClientRealtimeInput\n    clientMessage = {\n      realtimeInput: {\n        mediaChunks: [params.media]\n      }\n    };\n    return clientMessage;\n  }\n  tLiveClienttToolResponse(apiClient, params) {\n    let functionResponses = [];\n    if (params.functionResponses == null) {\n      throw new Error('functionResponses is required.');\n    }\n    if (!Array.isArray(params.functionResponses)) {\n      functionResponses = [params.functionResponses];\n    }\n    if (functionResponses.length === 0) {\n      throw new Error('functionResponses is required.');\n    }\n    for (const functionResponse of functionResponses) {\n      if (typeof functionResponse !== 'object' || functionResponse === null || !('name' in functionResponse) || !('response' in functionResponse)) {\n        throw new Error(\"Could not parse function response, type '\".concat(typeof functionResponse, \"'.\"));\n      }\n      if (!apiClient.isVertexAI() && !('id' in functionResponse)) {\n        throw new Error(FUNCTION_RESPONSE_REQUIRES_ID);\n      }\n    }\n    const clientMessage = {\n      toolResponse: {\n        functionResponses: functionResponses\n      }\n    };\n    return clientMessage;\n  }\n  /**\n    Send a message over the established connection.\n       @param params - Contains two **optional** properties, `turns` and\n        `turnComplete`.\n         - `turns` will be converted to a `Content[]`\n      - `turnComplete: true` indicates that you are done sending content and\n    expect a response.\n       @experimental\n       @remanks\n    There are two ways to send messages to the live API:\n    `sendClientContent` and `sendRealtimeInput`.\n       `sendClientContent` messages are added to the model context **in order**.\n    Having a conversation using `sendClientContent` messages is roughly\n    equivalent to using the `Chat.sendMessageStream`, except that the state of\n    the `chat` history is stored on the API server instead of locally.\n       Because of `sendClientContent`'s order guarantee, the model cannot respons\n    as quickly to `sendClientContent` messages as to `sendRealtimeInput`\n    messages. This makes the biggest difference when sending objects that have\n    significant preprocessing time (typically images).\n       The `sendClientContent` message sends a `Content[]`\n    which has more options than the `Blob` sent by `sendRealtimeInput`.\n       So the main use-cases for `sendClientContent` over `sendRealtimeInput` are:\n       - Sending anything that can't be represented as a `Blob` (text,\n    `sendClientContent({turns=\"Hello?\"}`)).\n    - Managing turns when not using audio input and voice activity detection.\n      (`sendClientContent({turnComplete:true})` or the short form\n    `sendClientContent()`)\n    - Prefilling a conversation context\n      ```\n      sendClientContent({\n          turns: [\n            Content({role:user, parts:...}),\n            Content({role:user, parts:...}),\n            ...\n          ]\n      })\n      ```\n    @experimental\n   */\n  sendClientContent(params) {\n    if (params.turns == null && params.turnComplete == null) {\n      params = {\n        turnComplete: true\n      };\n    }\n    const clientMessage = this.tLiveClientContent(this.apiClient, params);\n    this.conn.send(JSON.stringify(clientMessage));\n  }\n  /**\n    Send a realtime message over the established connection.\n       @param params - Contains one property, `media`.\n         - `media` will be converted to a `Blob`\n       @experimental\n       @remanks\n    Use `sendRealtimeInput` for realtime audio chunks and video frames (images).\n       With `sendRealtimeInput` the api will respond to audio automatically\n    based on voice activity detection (VAD).\n       `sendRealtimeInput` is optimized for responsivness at the expense of\n    deterministic ordering guarantees. Audio and video tokens are to the\n    context when they become available.\n       Note: The Call signature expects a `Blob` object, but only a subset\n    of audio and image mimetypes are allowed.\n   */\n  sendRealtimeInput(params) {\n    if (params.media == null) {\n      throw new Error('Media is required.');\n    }\n    const clientMessage = this.tLiveClientRealtimeInput(this.apiClient, params);\n    this.conn.send(JSON.stringify(clientMessage));\n  }\n  /**\n    Send a function response message over the established connection.\n       @param params - Contains property `functionResponses`.\n         - `functionResponses` will be converted to a `functionResponses[]`\n       @remanks\n    Use `sendFunctionResponse` to reply to `LiveServerToolCall` from the server.\n       Use {@link LiveConnectConfig#tools} to configure the callable functions.\n       @experimental\n   */\n  sendToolResponse(params) {\n    if (params.functionResponses == null) {\n      throw new Error('Tool response parameters are required.');\n    }\n    const clientMessage = this.tLiveClienttToolResponse(this.apiClient, params);\n    this.conn.send(JSON.stringify(clientMessage));\n  }\n  /**\n     Terminates the WebSocket connection.\n        @experimental\n        @example\n     ```ts\n     const session = await ai.live.connect({\n       model: 'gemini-2.0-flash-exp',\n       config: {\n         responseModalities: [Modality.AUDIO],\n       }\n     });\n        session.close();\n     ```\n   */\n  close() {\n    this.conn.close();\n  }\n}\n// Converts an headers object to a \"map\" object as expected by the WebSocket\n// constructor. We use this as the Auth interface works with Headers objects\n// while the WebSocket constructor takes a map.\nfunction headersToMap(headers) {\n  const headerMap = {};\n  headers.forEach((value, key) => {\n    headerMap[key] = value;\n  });\n  return headerMap;\n}\n// Converts a \"map\" object to a headers object. We use this as the Auth\n// interface works with Headers objects while the API client default headers\n// returns a map.\nfunction mapToHeaders(map) {\n  const headers = new Headers();\n  for (const [key, value] of Object.entries(map)) {\n    headers.append(key, value);\n  }\n  return headers;\n}\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nconst CONTENT_TYPE_HEADER = 'Content-Type';\nconst USER_AGENT_HEADER = 'User-Agent';\nconst GOOGLE_API_CLIENT_HEADER = 'x-goog-api-client';\nconst SDK_VERSION = '0.3.1'; // x-release-please-version\nconst LIBRARY_LABEL = \"google-genai-sdk/\".concat(SDK_VERSION);\nconst VERTEX_AI_API_DEFAULT_VERSION = 'v1beta1';\nconst GOOGLE_AI_API_DEFAULT_VERSION = 'v1beta';\nconst responseLineRE = /^data: (.*)(?:\\n\\n|\\r\\r|\\r\\n\\r\\n)/;\n/**\n * Client errors raised by the GenAI API.\n */\nclass ClientError extends Error {\n  constructor(message, stackTrace) {\n    if (stackTrace) {\n      super(message, {\n        cause: stackTrace\n      });\n    } else {\n      super(message, {\n        cause: new Error().stack\n      });\n    }\n    this.message = message;\n    this.name = 'ClientError';\n  }\n}\n/**\n * Server errors raised by the GenAI API.\n */\nclass ServerError extends Error {\n  constructor(message, stackTrace) {\n    if (stackTrace) {\n      super(message, {\n        cause: stackTrace\n      });\n    } else {\n      super(message, {\n        cause: new Error().stack\n      });\n    }\n    this.message = message;\n    this.name = 'ServerError';\n  }\n}\n/**\n * The ApiClient class is used to send requests to the Gemini API or Vertex AI\n * endpoints.\n */\nclass ApiClient {\n  constructor(opts) {\n    var _a, _b;\n    this.clientOptions = Object.assign(Object.assign({}, opts), {\n      project: opts.project,\n      location: opts.location,\n      apiKey: opts.apiKey,\n      vertexai: opts.vertexai\n    });\n    const initHttpOptions = {};\n    if (this.clientOptions.vertexai) {\n      initHttpOptions.apiVersion = (_a = this.clientOptions.apiVersion) !== null && _a !== void 0 ? _a : VERTEX_AI_API_DEFAULT_VERSION;\n      initHttpOptions.baseUrl = \"https://\".concat(this.clientOptions.location, \"-aiplatform.googleapis.com/\");\n      this.clientOptions.apiKey = undefined; // unset API key.\n    } else {\n      initHttpOptions.apiVersion = (_b = this.clientOptions.apiVersion) !== null && _b !== void 0 ? _b : GOOGLE_AI_API_DEFAULT_VERSION;\n      initHttpOptions.baseUrl = \"https://generativelanguage.googleapis.com/\";\n    }\n    initHttpOptions.headers = this.getDefaultHeaders();\n    this.clientOptions.httpOptions = initHttpOptions;\n    if (opts.httpOptions) {\n      this.clientOptions.httpOptions = this.patchHttpOptions(initHttpOptions, opts.httpOptions);\n    }\n  }\n  isVertexAI() {\n    var _a;\n    return (_a = this.clientOptions.vertexai) !== null && _a !== void 0 ? _a : false;\n  }\n  getProject() {\n    return this.clientOptions.project;\n  }\n  getLocation() {\n    return this.clientOptions.location;\n  }\n  getApiVersion() {\n    if (this.clientOptions.httpOptions && this.clientOptions.httpOptions.apiVersion !== undefined) {\n      return this.clientOptions.httpOptions.apiVersion;\n    }\n    throw new Error('API version is not set.');\n  }\n  getBaseUrl() {\n    if (this.clientOptions.httpOptions && this.clientOptions.httpOptions.baseUrl !== undefined) {\n      return this.clientOptions.httpOptions.baseUrl;\n    }\n    throw new Error('Base URL is not set.');\n  }\n  getRequestUrl() {\n    return this.getRequestUrlInternal(this.clientOptions.httpOptions);\n  }\n  getHeaders() {\n    if (this.clientOptions.httpOptions && this.clientOptions.httpOptions.headers !== undefined) {\n      return this.clientOptions.httpOptions.headers;\n    } else {\n      throw new Error('Headers are not set.');\n    }\n  }\n  getRequestUrlInternal(httpOptions) {\n    if (!httpOptions || httpOptions.baseUrl === undefined || httpOptions.apiVersion === undefined) {\n      throw new Error('HTTP options are not correctly set.');\n    }\n    const baseUrl = httpOptions.baseUrl.endsWith('/') ? httpOptions.baseUrl.slice(0, -1) : httpOptions.baseUrl;\n    const urlElement = [baseUrl];\n    if (httpOptions.apiVersion && httpOptions.apiVersion !== '') {\n      urlElement.push(httpOptions.apiVersion);\n    }\n    return urlElement.join('/');\n  }\n  getBaseResourcePath() {\n    return \"projects/\".concat(this.clientOptions.project, \"/locations/\").concat(this.clientOptions.location);\n  }\n  getApiKey() {\n    return this.clientOptions.apiKey;\n  }\n  getWebsocketBaseUrl() {\n    const baseUrl = this.getBaseUrl();\n    const urlParts = new URL(baseUrl);\n    urlParts.protocol = 'wss';\n    return urlParts.toString();\n  }\n  setBaseUrl(url) {\n    if (this.clientOptions.httpOptions) {\n      this.clientOptions.httpOptions.baseUrl = url;\n    } else {\n      throw new Error('HTTP options are not correctly set.');\n    }\n  }\n  constructUrl(path, httpOptions) {\n    const urlElement = [this.getRequestUrlInternal(httpOptions)];\n    if (this.clientOptions.vertexai && !path.startsWith('projects/')) {\n      urlElement.push(this.getBaseResourcePath());\n    }\n    if (path !== '') {\n      urlElement.push(path);\n    }\n    const url = new URL(\"\".concat(urlElement.join('/')));\n    return url;\n  }\n  async request(request) {\n    let patchedHttpOptions = this.clientOptions.httpOptions;\n    if (request.httpOptions) {\n      patchedHttpOptions = this.patchHttpOptions(this.clientOptions.httpOptions, request.httpOptions);\n    }\n    const url = this.constructUrl(request.path, patchedHttpOptions);\n    if (request.queryParams) {\n      for (const [key, value] of Object.entries(request.queryParams)) {\n        url.searchParams.append(key, String(value));\n      }\n    }\n    let requestInit = {};\n    if (request.httpMethod === 'GET') {\n      if (request.body && request.body !== '{}') {\n        throw new Error('Request body should be empty for GET request, but got non empty request body');\n      }\n    } else {\n      requestInit.body = request.body;\n    }\n    requestInit = await this.includeExtraHttpOptionsToRequestInit(requestInit, patchedHttpOptions);\n    return this.unaryApiCall(url, requestInit, request.httpMethod);\n  }\n  patchHttpOptions(baseHttpOptions, requestHttpOptions) {\n    const patchedHttpOptions = JSON.parse(JSON.stringify(baseHttpOptions));\n    for (const [key, value] of Object.entries(requestHttpOptions)) {\n      // Records compile to objects.\n      if (typeof value === 'object') {\n        // @ts-expect-error TS2345TS7053: Element implicitly has an 'any' type\n        // because expression of type 'string' can't be used to index type\n        // 'HttpOptions'.\n        patchedHttpOptions[key] = Object.assign(Object.assign({}, patchedHttpOptions[key]), value);\n      } else if (value !== undefined) {\n        // @ts-expect-error TS2345TS7053: Element implicitly has an 'any' type\n        // because expression of type 'string' can't be used to index type\n        // 'HttpOptions'.\n        patchedHttpOptions[key] = value;\n      }\n    }\n    return patchedHttpOptions;\n  }\n  async requestStream(request) {\n    let patchedHttpOptions = this.clientOptions.httpOptions;\n    if (request.httpOptions) {\n      patchedHttpOptions = this.patchHttpOptions(this.clientOptions.httpOptions, request.httpOptions);\n    }\n    const url = this.constructUrl(request.path, patchedHttpOptions);\n    if (!url.searchParams.has('alt') || url.searchParams.get('alt') !== 'sse') {\n      url.searchParams.set('alt', 'sse');\n    }\n    let requestInit = {};\n    requestInit.body = request.body;\n    requestInit = await this.includeExtraHttpOptionsToRequestInit(requestInit, patchedHttpOptions);\n    return this.streamApiCall(url, requestInit, request.httpMethod);\n  }\n  async includeExtraHttpOptionsToRequestInit(requestInit, httpOptions) {\n    if (httpOptions && httpOptions.timeout && httpOptions.timeout > 0) {\n      const abortController = new AbortController();\n      const signal = abortController.signal;\n      setTimeout(() => abortController.abort(), httpOptions.timeout);\n      requestInit.signal = signal;\n    }\n    requestInit.headers = await this.getHeadersInternal(httpOptions);\n    return requestInit;\n  }\n  async unaryApiCall(url, requestInit, httpMethod) {\n    return this.apiCall(url.toString(), Object.assign(Object.assign({}, requestInit), {\n      method: httpMethod\n    })).then(async response => {\n      await throwErrorIfNotOK(response);\n      return new HttpResponse(response);\n    }).catch(e => {\n      if (e instanceof Error) {\n        throw e;\n      } else {\n        throw new Error(JSON.stringify(e));\n      }\n    });\n  }\n  async streamApiCall(url, requestInit, httpMethod) {\n    return this.apiCall(url.toString(), Object.assign(Object.assign({}, requestInit), {\n      method: httpMethod\n    })).then(async response => {\n      await throwErrorIfNotOK(response);\n      return this.processStreamResponse(response);\n    }).catch(e => {\n      if (e instanceof Error) {\n        throw e;\n      } else {\n        throw new Error(JSON.stringify(e));\n      }\n    });\n  }\n  processStreamResponse(response) {\n    var _a;\n    return __asyncGenerator(this, arguments, function* processStreamResponse_1() {\n      const reader = (_a = response === null || response === void 0 ? void 0 : response.body) === null || _a === void 0 ? void 0 : _a.getReader();\n      const decoder = new TextDecoder('utf-8');\n      if (!reader) {\n        throw new Error('Response body is empty');\n      }\n      try {\n        let buffer = '';\n        while (true) {\n          const {\n            done,\n            value\n          } = yield __await(reader.read());\n          if (done) {\n            if (buffer.trim().length > 0) {\n              throw new Error('Incomplete JSON segment at the end');\n            }\n            break;\n          }\n          const chunkString = decoder.decode(value);\n          buffer += chunkString;\n          let match = buffer.match(responseLineRE);\n          while (match) {\n            const processedChunkString = match[1];\n            try {\n              const chunkData = JSON.parse(processedChunkString);\n              yield yield __await(chunkData);\n              buffer = buffer.slice(match[0].length);\n              match = buffer.match(responseLineRE);\n            } catch (e) {\n              throw new Error(\"exception parsing stream chunk \".concat(processedChunkString, \". \").concat(e));\n            }\n          }\n        }\n      } finally {\n        reader.releaseLock();\n      }\n    });\n  }\n  async apiCall(url, requestInit) {\n    return fetch(url, requestInit).catch(e => {\n      throw new Error(\"exception \".concat(e, \" sending request\"));\n    });\n  }\n  getDefaultHeaders() {\n    const headers = {};\n    const versionHeaderValue = LIBRARY_LABEL + ' ' + this.clientOptions.userAgentExtra;\n    headers[USER_AGENT_HEADER] = versionHeaderValue;\n    headers[GOOGLE_API_CLIENT_HEADER] = versionHeaderValue;\n    headers[CONTENT_TYPE_HEADER] = 'application/json';\n    return headers;\n  }\n  async getHeadersInternal(httpOptions) {\n    const headers = new Headers();\n    if (httpOptions && httpOptions.headers) {\n      for (const [key, value] of Object.entries(httpOptions.headers)) {\n        headers.append(key, value);\n      }\n    }\n    await this.clientOptions.auth.addAuthHeaders(headers);\n    return headers;\n  }\n  /**\n   * Uploads a file asynchronously using Gemini API only, this is not supported\n   * in Vertex AI.\n   *\n   * @param file The string path to the file to be uploaded or a Blob object.\n   * @param config Optional parameters specified in the `UploadFileConfig`\n   *     interface. @see {@link UploadFileConfig}\n   * @return A promise that resolves to a `File` object.\n   * @throws An error if called on a Vertex AI client.\n   * @throws An error if the `mimeType` is not provided and can not be inferred,\n   */\n  async uploadFile(file, config) {\n    var _a;\n    const fileToUpload = {};\n    if (config != null) {\n      fileToUpload.mimeType = config.mimeType;\n      fileToUpload.name = config.name;\n      fileToUpload.displayName = config.displayName;\n    }\n    if (fileToUpload.name && !fileToUpload.name.startsWith('files/')) {\n      fileToUpload.name = \"files/\".concat(fileToUpload.name);\n    }\n    const uploader = this.clientOptions.uploader;\n    const fileStat = await uploader.stat(file);\n    fileToUpload.sizeBytes = fileStat.size;\n    const mimeType = (_a = config === null || config === void 0 ? void 0 : config.mimeType) !== null && _a !== void 0 ? _a : fileStat.type;\n    if (mimeType === undefined || mimeType === '') {\n      throw new Error('Can not determine mimeType. Please provide mimeType in the config.');\n    }\n    fileToUpload.mimeType = mimeType;\n    const uploadUrl = await this.fetchUploadUrl(fileToUpload, config);\n    return uploader.upload(file, uploadUrl, this);\n  }\n  async fetchUploadUrl(file, config) {\n    var _a;\n    let httpOptions = {};\n    if (config === null || config === void 0 ? void 0 : config.httpOptions) {\n      httpOptions = config.httpOptions;\n    } else {\n      httpOptions = {\n        apiVersion: '',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Goog-Upload-Protocol': 'resumable',\n          'X-Goog-Upload-Command': 'start',\n          'X-Goog-Upload-Header-Content-Length': \"\".concat(file.sizeBytes),\n          'X-Goog-Upload-Header-Content-Type': \"\".concat(file.mimeType)\n        }\n      };\n    }\n    const body = {\n      'file': file\n    };\n    const httpResponse = await this.request({\n      path: formatMap('upload/v1beta/files', body['_url']),\n      body: JSON.stringify(body),\n      httpMethod: 'POST',\n      httpOptions\n    });\n    if (!httpResponse || !(httpResponse === null || httpResponse === void 0 ? void 0 : httpResponse.headers)) {\n      throw new Error('Server did not return an HttpResponse or the returned HttpResponse did not have headers.');\n    }\n    const uploadUrl = (_a = httpResponse === null || httpResponse === void 0 ? void 0 : httpResponse.headers) === null || _a === void 0 ? void 0 : _a['x-goog-upload-url'];\n    if (uploadUrl === undefined) {\n      throw new Error('Failed to get upload url. Server did not return the x-google-upload-url in the headers');\n    }\n    return uploadUrl;\n  }\n}\nasync function throwErrorIfNotOK(response) {\n  var _a;\n  if (response === undefined) {\n    throw new ServerError('response is undefined');\n  }\n  if (!response.ok) {\n    const status = response.status;\n    const statusText = response.statusText;\n    let errorBody;\n    if ((_a = response.headers.get('content-type')) === null || _a === void 0 ? void 0 : _a.includes('application/json')) {\n      errorBody = await response.json();\n    } else {\n      errorBody = {\n        error: {\n          message: 'exception parsing response',\n          code: response.status,\n          status: response.statusText\n        }\n      };\n    }\n    const errorMessage = \"got status: \".concat(status, \" \").concat(statusText, \". \").concat(JSON.stringify(errorBody));\n    if (status >= 400 && status < 500) {\n      const clientError = new ClientError(errorMessage);\n      throw clientError;\n    } else if (status >= 500 && status < 600) {\n      const serverError = new ServerError(errorMessage);\n      throw serverError;\n    }\n    throw new Error(errorMessage);\n  }\n}\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nclass Files extends BaseModule {\n  constructor(apiClient) {\n    var _this2;\n    super();\n    _this2 = this;\n    this.apiClient = apiClient;\n    /**\n     * Lists all current project files from the service.\n     *\n     * @param params - The parameters for the list request\n     * @return The paginated results of the list of files\n     *\n     * @example\n     * The following code prints the names of all files from the service, the\n     * size of each page is 10.\n     *\n     * ```ts\n     * const listResponse = await ai.files.list({config: {'pageSize': 10}});\n     * for await (const file of listResponse) {\n     *   console.log(file.name);\n     * }\n     * ```\n     */\n    this.list = async function () {\n      let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return new Pager(PagedItem.PAGED_ITEM_FILES, x => _this2.listInternal(x), await _this2.listInternal(params), params);\n    };\n  }\n  /**\n   * Uploads a file asynchronously to the Gemini API.\n   * This method is not available in Vertex AI.\n   * Supported upload sources:\n   * - Node.js: File path (string) or Blob object.\n   * - Browser: Blob object (e.g., File).\n   *\n   * @remarks\n   * The `mimeType` can be specified in the `config` parameter. If omitted:\n   *  - For file path (string) inputs, the `mimeType` will be inferred from the\n   *     file extension.\n   *  - For Blob object inputs, the `mimeType` will be set to the Blob's `type`\n   *     property.\n   * Somex eamples for file extension to mimeType mapping:\n   * .txt -> text/plain\n   * .json -> application/json\n   * .jpg  -> image/jpeg\n   * .png -> image/png\n   * .mp3 -> audio/mpeg\n   * .mp4 -> video/mp4\n   *\n   * This section can contain multiple paragraphs and code examples.\n   *\n   * @param params - Optional parameters specified in the\n   *        `common.UploadFileParameters` interface.\n   *        Optional @see {@link common.UploadFileParameters}\n   * @return A promise that resolves to a `types.File` object.\n   * @throws An error if called on a Vertex AI client.\n   * @throws An error if the `mimeType` is not provided and can not be inferred,\n   * the `mimeType` can be provided in the `params.config` parameter.\n   * @throws An error occurs if a suitable upload location cannot be established.\n   *\n   * @example\n   * The following code uploads a file to Gemini API.\n   *\n   * ```ts\n   * const file = await ai.files.upload({file: 'file.txt', config: {\n   *   mimeType: 'text/plain',\n   * }});\n   * console.log(file.name);\n   * ```\n   */\n  async upload(params) {\n    if (this.apiClient.isVertexAI()) {\n      throw new Error('Vertex AI does not support uploading files. You can share files through a GCS bucket.');\n    }\n    return this.apiClient.uploadFile(params.file, params.config).then(response => {\n      const file = fileFromMldev(this.apiClient, response);\n      return file;\n    });\n  }\n  async listInternal(params) {\n    var _a, _b;\n    let response;\n    let path = '';\n    let queryParams = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = listFilesParametersToVertex(this.apiClient, params);\n      path = formatMap('None', body['_url']);\n      queryParams = body['_query'];\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n      response = this.apiClient.request({\n        path: path,\n        queryParams: queryParams,\n        body: JSON.stringify(body),\n        httpMethod: 'GET',\n        httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions\n      }).then(httpResponse => {\n        return httpResponse.json();\n      });\n      return response.then(apiResponse => {\n        const resp = listFilesResponseFromVertex(this.apiClient);\n        const typedResp = new ListFilesResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    } else {\n      const body = listFilesParametersToMldev(this.apiClient, params);\n      path = formatMap('files', body['_url']);\n      queryParams = body['_query'];\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n      response = this.apiClient.request({\n        path: path,\n        queryParams: queryParams,\n        body: JSON.stringify(body),\n        httpMethod: 'GET',\n        httpOptions: (_b = params.config) === null || _b === void 0 ? void 0 : _b.httpOptions\n      }).then(httpResponse => {\n        return httpResponse.json();\n      });\n      return response.then(apiResponse => {\n        const resp = listFilesResponseFromMldev(this.apiClient, apiResponse);\n        const typedResp = new ListFilesResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    }\n  }\n  async createInternal(params) {\n    var _a, _b;\n    let response;\n    let path = '';\n    let queryParams = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = createFileParametersToVertex(this.apiClient, params);\n      path = formatMap('', body['_url']);\n      queryParams = body['_query'];\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n      response = this.apiClient.request({\n        path: path,\n        queryParams: queryParams,\n        body: JSON.stringify(body),\n        httpMethod: 'POST',\n        httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions\n      }).then(httpResponse => {\n        return httpResponse.json();\n      });\n      return response.then(apiResponse => {\n        const resp = createFileResponseFromVertex(this.apiClient, apiResponse);\n        const typedResp = new CreateFileResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    } else {\n      const body = createFileParametersToMldev(this.apiClient, params);\n      path = formatMap('upload/v1beta/files', body['_url']);\n      queryParams = body['_query'];\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n      response = this.apiClient.request({\n        path: path,\n        queryParams: queryParams,\n        body: JSON.stringify(body),\n        httpMethod: 'POST',\n        httpOptions: (_b = params.config) === null || _b === void 0 ? void 0 : _b.httpOptions\n      }).then(httpResponse => {\n        return httpResponse.json();\n      });\n      return response.then(apiResponse => {\n        const resp = createFileResponseFromMldev(this.apiClient, apiResponse);\n        const typedResp = new CreateFileResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    }\n  }\n  /**\n   * Retrieves the file information from the service.\n   *\n   * @param params - The parameters for the get request\n   * @return The Promise that resolves to the types.File object requested.\n   *\n   * @example\n   * ```ts\n   * const config: GetFileParameters = {\n   *   name: fileName,\n   * };\n   * file = await ai.files.get(config);\n   * console.log(file.name);\n   * ```\n   */\n  async get(params) {\n    var _a, _b;\n    let response;\n    let path = '';\n    let queryParams = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = getFileParametersToVertex(this.apiClient, params);\n      path = formatMap('None', body['_url']);\n      queryParams = body['_query'];\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n      response = this.apiClient.request({\n        path: path,\n        queryParams: queryParams,\n        body: JSON.stringify(body),\n        httpMethod: 'GET',\n        httpOptions: (_a = params.config) === null || _a === void 0 ? void 0 : _a.httpOptions\n      }).then(httpResponse => {\n        return httpResponse.json();\n      });\n      return response.then(apiResponse => {\n        const resp = fileFromVertex(this.apiClient);\n        return resp;\n      });\n    } else {\n      const body = getFileParametersToMldev(this.apiClient, params);\n      path = formatMap('files/{file}', body['_url']);\n      queryParams = body['_query'];\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n      response = this.apiClient.request({\n        path: path,\n        queryParams: queryParams,\n        body: JSON.stringify(body),\n        httpMethod: 'GET',\n        httpOptions: (_b = params.config) === null || _b === void 0 ? void 0 : _b.httpOptions\n      }).then(httpResponse => {\n        return httpResponse.json();\n      });\n      return response.then(apiResponse => {\n        const resp = fileFromMldev(this.apiClient, apiResponse);\n        return resp;\n      });\n    }\n  }\n}\nfunction listFilesConfigToMldev(apiClient, fromObject, parentObject) {\n  const toObject = {};\n  const fromPageSize = getValueByPath(fromObject, ['pageSize']);\n  if (parentObject !== undefined && fromPageSize != null) {\n    setValueByPath(parentObject, ['_query', 'pageSize'], fromPageSize);\n  }\n  const fromPageToken = getValueByPath(fromObject, ['pageToken']);\n  if (parentObject !== undefined && fromPageToken != null) {\n    setValueByPath(parentObject, ['_query', 'pageToken'], fromPageToken);\n  }\n  return toObject;\n}\nfunction listFilesParametersToMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromConfig = getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    setValueByPath(toObject, ['config'], listFilesConfigToMldev(apiClient, fromConfig, toObject));\n  }\n  return toObject;\n}\nfunction listFilesParametersToVertex(apiClient, fromObject) {\n  const toObject = {};\n  if (getValueByPath(fromObject, ['config']) !== undefined) {\n    throw new Error('config parameter is not supported in Vertex AI.');\n  }\n  return toObject;\n}\nfunction fileStatusToMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromDetails = getValueByPath(fromObject, ['details']);\n  if (fromDetails != null) {\n    setValueByPath(toObject, ['details'], fromDetails);\n  }\n  const fromMessage = getValueByPath(fromObject, ['message']);\n  if (fromMessage != null) {\n    setValueByPath(toObject, ['message'], fromMessage);\n  }\n  const fromCode = getValueByPath(fromObject, ['code']);\n  if (fromCode != null) {\n    setValueByPath(toObject, ['code'], fromCode);\n  }\n  return toObject;\n}\nfunction fileToMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromName = getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    setValueByPath(toObject, ['name'], fromName);\n  }\n  const fromDisplayName = getValueByPath(fromObject, ['displayName']);\n  if (fromDisplayName != null) {\n    setValueByPath(toObject, ['displayName'], fromDisplayName);\n  }\n  const fromMimeType = getValueByPath(fromObject, ['mimeType']);\n  if (fromMimeType != null) {\n    setValueByPath(toObject, ['mimeType'], fromMimeType);\n  }\n  const fromSizeBytes = getValueByPath(fromObject, ['sizeBytes']);\n  if (fromSizeBytes != null) {\n    setValueByPath(toObject, ['sizeBytes'], fromSizeBytes);\n  }\n  const fromCreateTime = getValueByPath(fromObject, ['createTime']);\n  if (fromCreateTime != null) {\n    setValueByPath(toObject, ['createTime'], fromCreateTime);\n  }\n  const fromExpirationTime = getValueByPath(fromObject, ['expirationTime']);\n  if (fromExpirationTime != null) {\n    setValueByPath(toObject, ['expirationTime'], fromExpirationTime);\n  }\n  const fromUpdateTime = getValueByPath(fromObject, ['updateTime']);\n  if (fromUpdateTime != null) {\n    setValueByPath(toObject, ['updateTime'], fromUpdateTime);\n  }\n  const fromSha256Hash = getValueByPath(fromObject, ['sha256Hash']);\n  if (fromSha256Hash != null) {\n    setValueByPath(toObject, ['sha256Hash'], fromSha256Hash);\n  }\n  const fromUri = getValueByPath(fromObject, ['uri']);\n  if (fromUri != null) {\n    setValueByPath(toObject, ['uri'], fromUri);\n  }\n  const fromDownloadUri = getValueByPath(fromObject, ['downloadUri']);\n  if (fromDownloadUri != null) {\n    setValueByPath(toObject, ['downloadUri'], fromDownloadUri);\n  }\n  const fromState = getValueByPath(fromObject, ['state']);\n  if (fromState != null) {\n    setValueByPath(toObject, ['state'], fromState);\n  }\n  const fromSource = getValueByPath(fromObject, ['source']);\n  if (fromSource != null) {\n    setValueByPath(toObject, ['source'], fromSource);\n  }\n  const fromVideoMetadata = getValueByPath(fromObject, ['videoMetadata']);\n  if (fromVideoMetadata != null) {\n    setValueByPath(toObject, ['videoMetadata'], fromVideoMetadata);\n  }\n  const fromError = getValueByPath(fromObject, ['error']);\n  if (fromError != null) {\n    setValueByPath(toObject, ['error'], fileStatusToMldev(apiClient, fromError));\n  }\n  return toObject;\n}\nfunction createFileParametersToMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromFile = getValueByPath(fromObject, ['file']);\n  if (fromFile != null) {\n    setValueByPath(toObject, ['file'], fileToMldev(apiClient, fromFile));\n  }\n  const fromConfig = getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    setValueByPath(toObject, ['config'], fromConfig);\n  }\n  return toObject;\n}\nfunction createFileParametersToVertex(apiClient, fromObject) {\n  const toObject = {};\n  if (getValueByPath(fromObject, ['file']) !== undefined) {\n    throw new Error('file parameter is not supported in Vertex AI.');\n  }\n  if (getValueByPath(fromObject, ['config']) !== undefined) {\n    throw new Error('config parameter is not supported in Vertex AI.');\n  }\n  return toObject;\n}\nfunction getFileParametersToMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromName = getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    setValueByPath(toObject, ['_url', 'file'], tFileName(apiClient, fromName));\n  }\n  const fromConfig = getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    setValueByPath(toObject, ['config'], fromConfig);\n  }\n  return toObject;\n}\nfunction getFileParametersToVertex(apiClient, fromObject) {\n  const toObject = {};\n  if (getValueByPath(fromObject, ['name']) !== undefined) {\n    throw new Error('name parameter is not supported in Vertex AI.');\n  }\n  if (getValueByPath(fromObject, ['config']) !== undefined) {\n    throw new Error('config parameter is not supported in Vertex AI.');\n  }\n  return toObject;\n}\nfunction fileStatusFromMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromDetails = getValueByPath(fromObject, ['details']);\n  if (fromDetails != null) {\n    setValueByPath(toObject, ['details'], fromDetails);\n  }\n  const fromMessage = getValueByPath(fromObject, ['message']);\n  if (fromMessage != null) {\n    setValueByPath(toObject, ['message'], fromMessage);\n  }\n  const fromCode = getValueByPath(fromObject, ['code']);\n  if (fromCode != null) {\n    setValueByPath(toObject, ['code'], fromCode);\n  }\n  return toObject;\n}\nfunction fileFromMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromName = getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    setValueByPath(toObject, ['name'], fromName);\n  }\n  const fromDisplayName = getValueByPath(fromObject, ['displayName']);\n  if (fromDisplayName != null) {\n    setValueByPath(toObject, ['displayName'], fromDisplayName);\n  }\n  const fromMimeType = getValueByPath(fromObject, ['mimeType']);\n  if (fromMimeType != null) {\n    setValueByPath(toObject, ['mimeType'], fromMimeType);\n  }\n  const fromSizeBytes = getValueByPath(fromObject, ['sizeBytes']);\n  if (fromSizeBytes != null) {\n    setValueByPath(toObject, ['sizeBytes'], fromSizeBytes);\n  }\n  const fromCreateTime = getValueByPath(fromObject, ['createTime']);\n  if (fromCreateTime != null) {\n    setValueByPath(toObject, ['createTime'], fromCreateTime);\n  }\n  const fromExpirationTime = getValueByPath(fromObject, ['expirationTime']);\n  if (fromExpirationTime != null) {\n    setValueByPath(toObject, ['expirationTime'], fromExpirationTime);\n  }\n  const fromUpdateTime = getValueByPath(fromObject, ['updateTime']);\n  if (fromUpdateTime != null) {\n    setValueByPath(toObject, ['updateTime'], fromUpdateTime);\n  }\n  const fromSha256Hash = getValueByPath(fromObject, ['sha256Hash']);\n  if (fromSha256Hash != null) {\n    setValueByPath(toObject, ['sha256Hash'], fromSha256Hash);\n  }\n  const fromUri = getValueByPath(fromObject, ['uri']);\n  if (fromUri != null) {\n    setValueByPath(toObject, ['uri'], fromUri);\n  }\n  const fromDownloadUri = getValueByPath(fromObject, ['downloadUri']);\n  if (fromDownloadUri != null) {\n    setValueByPath(toObject, ['downloadUri'], fromDownloadUri);\n  }\n  const fromState = getValueByPath(fromObject, ['state']);\n  if (fromState != null) {\n    setValueByPath(toObject, ['state'], fromState);\n  }\n  const fromSource = getValueByPath(fromObject, ['source']);\n  if (fromSource != null) {\n    setValueByPath(toObject, ['source'], fromSource);\n  }\n  const fromVideoMetadata = getValueByPath(fromObject, ['videoMetadata']);\n  if (fromVideoMetadata != null) {\n    setValueByPath(toObject, ['videoMetadata'], fromVideoMetadata);\n  }\n  const fromError = getValueByPath(fromObject, ['error']);\n  if (fromError != null) {\n    setValueByPath(toObject, ['error'], fileStatusFromMldev(apiClient, fromError));\n  }\n  return toObject;\n}\nfunction fileFromVertex(apiClient, fromObject) {\n  const toObject = {};\n  return toObject;\n}\nfunction listFilesResponseFromMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromNextPageToken = getValueByPath(fromObject, ['nextPageToken']);\n  if (fromNextPageToken != null) {\n    setValueByPath(toObject, ['nextPageToken'], fromNextPageToken);\n  }\n  const fromFiles = getValueByPath(fromObject, ['files']);\n  if (fromFiles != null) {\n    if (Array.isArray(fromFiles)) {\n      setValueByPath(toObject, ['files'], fromFiles.map(item => {\n        return fileFromMldev(apiClient, item);\n      }));\n    } else {\n      setValueByPath(toObject, ['files'], fromFiles);\n    }\n  }\n  return toObject;\n}\nfunction listFilesResponseFromVertex(apiClient, fromObject) {\n  const toObject = {};\n  return toObject;\n}\nfunction createFileResponseFromMldev(apiClient, fromObject) {\n  const toObject = {};\n  const fromHttpHeaders = getValueByPath(fromObject, ['httpHeaders']);\n  if (fromHttpHeaders != null) {\n    setValueByPath(toObject, ['httpHeaders'], fromHttpHeaders);\n  }\n  return toObject;\n}\nfunction createFileResponseFromVertex(apiClient, fromObject) {\n  const toObject = {};\n  const fromHttpHeaders = getValueByPath(fromObject, ['httpHeaders']);\n  if (fromHttpHeaders != null) {\n    setValueByPath(toObject, ['httpHeaders'], fromHttpHeaders);\n  }\n  return toObject;\n}\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nfunction crossError() {\n  // TODO(b/399934880): this message needs a link to a help page explaining how to enable conditional exports\n  return new Error(\"This feature requires the web or Node specific @google/genai implementation, you can fix this by either:\\n\\n*Enabling conditional exports for your project [recommended]*\\n\\n*Using a platform specific import* - Make sure your code imports either '@google/genai/web' or '@google/genai/node' instead of '@google/genai'.\\n\");\n}\nconst MAX_CHUNK_SIZE = 1024 * 1024 * 8; // bytes\n// TODO(b/401271082): re-enable lint once CrossUploader is implemented.\n/*  eslint-disable @typescript-eslint/no-unused-vars */\nclass CrossUploader {\n  async upload(file, uploadUrl, apiClient) {\n    throw crossError();\n  }\n  //TODO(b/401351146) Implement CrossUploader's methods.\n  async stat(file) {\n    throw crossError();\n  }\n  async uploadBlob(file, uploadUrl, apiClient) {\n    var _a, _b;\n    let fileSize = 0;\n    let offset = 0;\n    let response = new HttpResponse(new Response());\n    let uploadCommand = 'upload';\n    fileSize = file.size;\n    while (offset < fileSize) {\n      const chunkSize = Math.min(MAX_CHUNK_SIZE, fileSize - offset);\n      const chunk = file.slice(offset, offset + chunkSize);\n      if (offset + chunkSize >= fileSize) {\n        uploadCommand += ', finalize';\n      }\n      response = await apiClient.request({\n        path: '',\n        body: chunk,\n        httpMethod: 'POST',\n        httpOptions: {\n          apiVersion: '',\n          baseUrl: uploadUrl,\n          headers: {\n            'X-Goog-Upload-Command': uploadCommand,\n            'X-Goog-Upload-Offset': String(offset),\n            'Content-Length': String(chunkSize)\n          }\n        }\n      });\n      offset += chunkSize;\n      // The `x-goog-upload-status` header field can be `active`, `final` and\n      //`cancelled` in resposne.\n      if (((_a = response === null || response === void 0 ? void 0 : response.headers) === null || _a === void 0 ? void 0 : _a['x-goog-upload-status']) !== 'active') {\n        break;\n      }\n      // TODO(b/401391430) Investigate why the upload status is not finalized\n      // even though all content has been uploaded.\n      if (fileSize <= offset) {\n        throw new Error('All content has been uploaded, but the upload status is not finalized.');\n      }\n    }\n    const responseJson = await (response === null || response === void 0 ? void 0 : response.json());\n    if (((_b = response === null || response === void 0 ? void 0 : response.headers) === null || _b === void 0 ? void 0 : _b['x-goog-upload-status']) !== 'final') {\n      throw new Error('Failed to upload file: Upload status is not finalized.');\n    }\n    return responseJson['file'];\n  }\n}\nclass BrowserUploader {\n  async upload(file, uploadUrl, apiClient) {\n    if (typeof file === 'string') {\n      throw new Error('File path is not supported in browser uploader.');\n    }\n    const crossUploader = new CrossUploader();\n    return await crossUploader.uploadBlob(file, uploadUrl, apiClient);\n  }\n  async stat(file) {\n    if (typeof file === 'string') {\n      throw new Error('File path is not supported in browser uploader.');\n    } else {\n      const fileStat = {\n        size: file.size,\n        type: file.type\n      };\n      return fileStat;\n    }\n  }\n}\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n// TODO((b/401271082): re-enable lint once BrowserWebSocketFactory is\n// implemented.\n/*  eslint-disable @typescript-eslint/no-unused-vars */\nclass BrowserWebSocketFactory {\n  create(url, headers, callbacks) {\n    return new BrowserWebSocket(url, headers, callbacks);\n  }\n}\nclass BrowserWebSocket {\n  constructor(url, headers, callbacks) {\n    this.url = url;\n    this.headers = headers;\n    this.callbacks = callbacks;\n  }\n  connect() {\n    this.ws = new WebSocket(this.url);\n    this.ws.onopen = this.callbacks.onopen;\n    this.ws.onerror = this.callbacks.onerror;\n    this.ws.onclose = this.callbacks.onclose;\n    this.ws.onmessage = this.callbacks.onmessage;\n  }\n  send(message) {\n    if (this.ws === undefined) {\n      throw new Error('WebSocket is not connected');\n    }\n    this.ws.send(message);\n  }\n  close() {\n    if (this.ws === undefined) {\n      throw new Error('WebSocket is not connected');\n    }\n    this.ws.close();\n  }\n}\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nconst GOOGLE_API_KEY_HEADER = 'x-goog-api-key';\n// TODO(b/395122533): We need a secure client side authentication mechanism.\nclass WebAuth {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n  }\n  async addAuthHeaders(headers) {\n    if (headers.get(GOOGLE_API_KEY_HEADER) !== null) {\n      return;\n    }\n    headers.append(GOOGLE_API_KEY_HEADER, this.apiKey);\n  }\n}\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nconst LANGUAGE_LABEL_PREFIX = 'gl-node/';\n/**\n * The Google GenAI SDK.\n *\n * @remarks\n * Provides access to the GenAI features through either the {@link https://cloud.google.com/vertex-ai/docs/reference/rest | Gemini API}\n * or the {@link https://cloud.google.com/vertex-ai/docs/reference/rest | Vertex AI API}.\n *\n * The {@link GoogleGenAIOptions.vertexai} value determines which of the API services to use.\n *\n * When using the Gemini API, a {@link GoogleGenAIOptions.apiKey} must also be set,\n * when using Vertex AI {@link GoogleGenAIOptions.project} and {@link GoogleGenAIOptions.location} must also be set.\n *\n * @example\n * Initializing the SDK for using the Gemini API:\n * ```ts\n * import {GoogleGenAI} from '@google/genai';\n * const ai = new GoogleGenAI({apiKey: 'GEMINI_API_KEY'});\n * ```\n *\n * @example\n * Initializing the SDK for using the Vertex AI API:\n * ```ts\n * import {GoogleGenAI} from '@google/genai';\n * const ai = new GoogleGenAI({\n *   vertexai: true,\n *   project: 'PROJECT_ID',\n *   location: 'PROJECT_LOCATION'\n * });\n * ```\n *\n */\nclass GoogleGenAI {\n  constructor(options) {\n    var _a;\n    if (options.apiKey == null) {\n      throw new Error('An API Key must be set when running in a browser');\n    }\n    this.vertexai = (_a = options.vertexai) !== null && _a !== void 0 ? _a : false;\n    this.apiKey = options.apiKey;\n    this.apiVersion = options.apiVersion;\n    const auth = new WebAuth(this.apiKey);\n    this.apiClient = new ApiClient({\n      auth: auth,\n      apiVersion: this.apiVersion,\n      apiKey: this.apiKey,\n      vertexai: this.vertexai,\n      httpOptions: options.httpOptions,\n      userAgentExtra: LANGUAGE_LABEL_PREFIX + 'web',\n      uploader: new BrowserUploader()\n    });\n    this.models = new Models(this.apiClient);\n    this.live = new Live(this.apiClient, auth, new BrowserWebSocketFactory());\n    this.chats = new Chats(this.models, this.apiClient);\n    this.caches = new Caches(this.apiClient);\n    this.files = new Files(this.apiClient);\n  }\n}\nexport { BlockedReason, Caches, Chat, Chats, ComputeTokensResponse, ControlReferenceType, CountTokensResponse, CreateFileResponse, DeleteCachedContentResponse, DynamicRetrievalConfigMode, EmbedContentResponse, FileSource, FileState, FinishReason, FunctionCallingConfigMode, FunctionResponse, GenerateContentResponse, GenerateContentResponsePromptFeedback, GenerateContentResponseUsageMetadata, GenerateImagesResponse, GoogleGenAI, HarmBlockMethod, HarmBlockThreshold, HarmCategory, HarmProbability, HarmSeverity, HttpResponse, ImagePromptLanguage, Language, ListCachedContentsResponse, ListFilesResponse, Live, LiveClientToolResponse, MaskReferenceMode, MediaResolution, Modality, Mode, Models, Outcome, PersonGeneration, ReplayResponse, SafetyFilterLevel, Session, SessionSendToolResponseParameters, State, SubjectReferenceType, Type, contentToMldev$1 as contentToMldev, contentToVertex$1 as contentToVertex, createModelContent, createPartFromBase64, createPartFromCodeExecutionResult, createPartFromExecutableCode, createPartFromFunctionCall, createPartFromFunctionResponse, createPartFromText, createPartFromUri, createPartFromVideoMetadata, createUserContent, toolToMldev$1 as toolToMldev, toolToVertex$1 as toolToVertex };","map":{"version":3,"names":["BaseModule","formatMap","templateString","valueMap","regex","replace","match","key","Object","prototype","hasOwnProperty","call","value","undefined","String","Error","concat","setValueByPath","data","keys","i","length","endsWith","keyName","slice","Array","isArray","from","arrayData","j","entry","d","keyToSet","existingData","assign","getValueByPath","map","error","TypeError","tModel","apiClient","model","isVertexAI","startsWith","indexOf","parts","split","tCachesModel","transformedModel","getProject","getLocation","tPart","origin","text","tParts","item","_isContent","_isFunctionCallPart","_isUserPart","_areUserParts","every","tContent","role","tContentsForEmbed","flatMap","content","_appendAccumulatedPartsAsContent","result","accumulatedParts","push","_handleCurrentPart","currentPart","tContents","processSchema","schema","subSchema","tSchema","tSpeechConfig","speechConfig","voiceConfig","prebuiltVoiceConfig","voiceName","tTool","tool","tTools","resourceName","client","resourcePrefix","splitsAfterPrefix","arguments","shouldAppendPrefix","tCachedContentName","name","tBytes","fromImageBytes","tFileName","fromName","PagedItem","Pager","constructor","request","response","params","pageInternal","paramsInternal","requestInternal","init","nameInternal","idxInternal","requestParams","config","pageInternalSize","_b","_a","initNextPage","page","pageSize","pageLength","getItem","index","Symbol","asyncIterator","next","hasNextPage","nextPage","done","return","Outcome","Language","Type","HarmCategory","HarmBlockMethod","HarmBlockThreshold","Mode","FinishReason","HarmProbability","HarmSeverity","BlockedReason","State","DynamicRetrievalConfigMode","FunctionCallingConfigMode","MediaResolution","SafetyFilterLevel","PersonGeneration","ImagePromptLanguage","FileState","FileSource","MaskReferenceMode","ControlReferenceType","SubjectReferenceType","Modality","FunctionResponse","createPartFromUri","uri","mimeType","fileData","fileUri","createPartFromText","createPartFromFunctionCall","args","functionCall","createPartFromFunctionResponse","id","functionResponse","createPartFromBase64","inlineData","createPartFromVideoMetadata","startOffset","endOffset","videoMetadata","createPartFromCodeExecutionResult","outcome","output","codeExecutionResult","createPartFromExecutableCode","code","language","executableCode","_isPart","obj","_toParts","partOrString","part","createUserContent","createModelContent","GenerateContentResponsePromptFeedback","GenerateContentResponseUsageMetadata","GenerateContentResponse","_d","_c","candidates","console","warn","anyTextPartText","nonTextParts","_h","_g","_f","_e","fieldName","fieldValue","entries","thought","functionCalls","filter","_j","EmbedContentResponse","GenerateImagesResponse","CountTokensResponse","ComputeTokensResponse","DeleteCachedContentResponse","ListCachedContentsResponse","ListFilesResponse","HttpResponse","headers","pair","responseInternal","json","CreateFileResponse","ReplayResponse","LiveClientToolResponse","SessionSendToolResponseParameters","functionResponses","Caches","_this","this","list","PAGED_ITEM_CACHED_CONTENTS","x","listInternal","create","path","queryParams","body","createCachedContentParametersToVertex","JSON","stringify","httpMethod","httpOptions","then","httpResponse","apiResponse","resp","cachedContentFromVertex","createCachedContentParametersToMldev","cachedContentFromMldev","get","getCachedContentParametersToVertex","getCachedContentParametersToMldev","delete","deleteCachedContentParametersToVertex","deleteCachedContentResponseFromVertex","typedResp","deleteCachedContentParametersToMldev","deleteCachedContentResponseFromMldev","update","updateCachedContentParametersToVertex","updateCachedContentParametersToMldev","listCachedContentsParametersToVertex","listCachedContentsResponseFromVertex","listCachedContentsParametersToMldev","listCachedContentsResponseFromMldev","partToMldev$1","partToMldev","fromObject","toObject","fromThought","fromCodeExecutionResult","fromExecutableCode","fromFileData","fromFunctionCall","fromFunctionResponse","fromInlineData","fromText","partToVertex$1","partToVertex","fromVideoMetadata","contentToMldev$1","contentToMldev","fromParts","fromRole","contentToVertex$1","contentToVertex","schemaToVertex$1","schemaToVertex","fromExample","fromPattern","fromMinimum","fromDefault","fromAnyOf","fromMaxLength","fromTitle","fromMinLength","fromMinProperties","fromMaximum","fromMaxProperties","fromDescription","fromEnum","fromFormat","fromItems","fromMaxItems","fromMinItems","fromNullable","fromProperties","fromPropertyOrdering","fromRequired","fromType","functionDeclarationToMldev$1","functionDeclarationToMldev","fromParameters","functionDeclarationToVertex$1","functionDeclarationToVertex","fromResponse","googleSearchToMldev$1","googleSearchToMldev","googleSearchToVertex$1","googleSearchToVertex","dynamicRetrievalConfigToMldev$1","dynamicRetrievalConfigToMldev","fromMode","fromDynamicThreshold","dynamicRetrievalConfigToVertex$1","dynamicRetrievalConfigToVertex","googleSearchRetrievalToMldev$1","googleSearchRetrievalToMldev","fromDynamicRetrievalConfig","googleSearchRetrievalToVertex$1","googleSearchRetrievalToVertex","toolToMldev$1","toolToMldev","fromFunctionDeclarations","fromGoogleSearch","fromGoogleSearchRetrieval","fromCodeExecution","toolToVertex$1","toolToVertex","fromRetrieval","functionCallingConfigToMldev$1","functionCallingConfigToMldev","fromAllowedFunctionNames","functionCallingConfigToVertex$1","functionCallingConfigToVertex","toolConfigToMldev$1","toolConfigToMldev","fromFunctionCallingConfig","toolConfigToVertex$1","toolConfigToVertex","createCachedContentConfigToMldev","parentObject","fromTtl","fromExpireTime","fromDisplayName","fromContents","fromSystemInstruction","fromTools","fromToolConfig","createCachedContentConfigToVertex","fromModel","fromConfig","updateCachedContentConfigToMldev","updateCachedContentConfigToVertex","listCachedContentsConfigToMldev","fromPageSize","fromPageToken","listCachedContentsConfigToVertex","fromCreateTime","fromUpdateTime","fromUsageMetadata","fromNextPageToken","fromCachedContents","isValidResponse","isValidContent","validateHistory","history","extractCuratedHistory","comprehensiveHistory","curatedHistory","userInput","modelOutput","isValid","Chats","modelsModule","Chat","sendPromise","Promise","resolve","sendMessage","inputContent","message","responsePromise","generateContent","contents","getHistory","outputContent","recordHistory","sendMessageStream","streamResponse","generateContentStream","processStreamResponse","curated","streamResponse_1","__asyncValues","streamResponse_1_1","__await","chunk","outputContents","Models","generateContentInternal","generateContentStreamInternal","generateContentParametersToVertex","generateContentResponseFromVertex","generateContentParametersToMldev","generateContentResponseFromMldev","requestStream","apiResponse_1","apiResponse_1_1","apiResponse_2","apiResponse_2_1","embedContent","embedContentParametersToVertex","embedContentResponseFromVertex","embedContentParametersToMldev","embedContentResponseFromMldev","generateImages","generateImagesParametersToVertex","generateImagesResponseFromVertex","generateImagesParametersToMldev","generateImagesResponseFromMldev","countTokens","countTokensParametersToVertex","countTokensResponseFromVertex","countTokensParametersToMldev","countTokensResponseFromMldev","computeTokens","computeTokensParametersToVertex","computeTokensResponseFromVertex","computeTokensParametersToMldev","computeTokensResponseFromMldev","schemaToMldev","safetySettingToMldev","fromCategory","fromThreshold","safetySettingToVertex","fromMethod","prebuiltVoiceConfigToMldev","fromVoiceName","prebuiltVoiceConfigToVertex","voiceConfigToMldev","fromPrebuiltVoiceConfig","voiceConfigToVertex","speechConfigToMldev","fromVoiceConfig","speechConfigToVertex","thinkingConfigToMldev","fromIncludeThoughts","thinkingConfigToVertex","generateContentConfigToMldev","fromTemperature","fromTopP","fromTopK","fromCandidateCount","fromMaxOutputTokens","fromStopSequences","fromResponseLogprobs","fromLogprobs","fromPresencePenalty","fromFrequencyPenalty","fromSeed","fromResponseMimeType","fromResponseSchema","fromSafetySettings","fromCachedContent","fromResponseModalities","fromMediaResolution","fromSpeechConfig","fromThinkingConfig","generateContentConfigToVertex","fromRoutingConfig","fromLabels","fromAudioTimestamp","embedContentConfigToMldev","fromTaskType","fromOutputDimensionality","embedContentConfigToVertex","fromMimeType","fromAutoTruncate","fromModelForEmbedContent","generateImagesConfigToMldev","fromNumberOfImages","fromAspectRatio","fromGuidanceScale","fromSafetyFilterLevel","fromPersonGeneration","fromIncludeSafetyAttributes","fromIncludeRaiReason","fromLanguage","fromOutputMimeType","fromOutputCompressionQuality","generateImagesConfigToVertex","fromOutputGcsUri","fromNegativePrompt","fromAddWatermark","fromEnhancePrompt","fromPrompt","countTokensConfigToMldev","countTokensConfigToVertex","fromGenerationConfig","partFromMldev","partFromVertex","contentFromMldev","contentFromVertex","citationMetadataFromMldev","fromCitations","citationMetadataFromVertex","candidateFromMldev","fromContent","fromCitationMetadata","fromTokenCount","fromAvgLogprobs","fromFinishReason","fromGroundingMetadata","fromIndex","fromLogprobsResult","fromSafetyRatings","candidateFromVertex","fromFinishMessage","fromCandidates","fromModelVersion","fromPromptFeedback","fromResponseId","contentEmbeddingStatisticsFromVertex","fromTruncated","contentEmbeddingFromMldev","fromValues","contentEmbeddingFromVertex","fromStatistics","embedContentMetadataFromMldev","embedContentMetadataFromVertex","fromBillableCharacterCount","fromEmbeddings","fromMetadata","imageFromMldev","imageFromVertex","fromGcsUri","generatedImageFromMldev","fromImage","fromRaiFilteredReason","generatedImageFromVertex","fromEnhancedPrompt","fromGeneratedImages","fromTotalTokens","fromCachedContentTokenCount","fromTokensInfo","FUNCTION_RESPONSE_REQUIRES_ID","liveConnectConfigToMldev","liveConnectConfigToVertex","liveConnectParametersToMldev","liveConnectParametersToVertex","liveServerContentFromMldev","fromModelTurn","fromTurnComplete","fromInterrupted","liveServerContentFromVertex","functionCallFromMldev","fromId","fromArgs","functionCallFromVertex","liveServerToolCallFromMldev","fromFunctionCalls","liveServerToolCallFromVertex","liveServerToolCallCancellationFromMldev","fromIds","liveServerToolCallCancellationFromVertex","liveServerMessageFromMldev","fromSetupComplete","fromServerContent","fromToolCall","fromToolCallCancellation","liveServerMessageFromVertex","handleWebSocketMessage","onmessage","event","serverMessage","Blob","parse","Live","auth","webSocketFactory","connect","websocketBaseUrl","getWebsocketBaseUrl","apiVersion","getApiVersion","url","mapToHeaders","getDefaultHeaders","addAuthHeaders","apiKey","getApiKey","onopenResolve","onopenPromise","callbacks","onopenAwaitedCallback","onopen","websocketCallbacks","onerror","e","onclose","conn","headersToMap","project","location","clientMessage","liveConnectParameters","send","Session","tLiveClientContent","turns","clientContent","turnComplete","tLiveClientRealtimeInput","media","realtimeInput","mediaChunks","tLiveClienttToolResponse","toolResponse","sendClientContent","sendRealtimeInput","sendToolResponse","close","headerMap","forEach","Headers","append","CONTENT_TYPE_HEADER","USER_AGENT_HEADER","GOOGLE_API_CLIENT_HEADER","SDK_VERSION","LIBRARY_LABEL","VERTEX_AI_API_DEFAULT_VERSION","GOOGLE_AI_API_DEFAULT_VERSION","responseLineRE","ClientError","stackTrace","cause","stack","ServerError","ApiClient","opts","clientOptions","vertexai","initHttpOptions","baseUrl","patchHttpOptions","getBaseUrl","getRequestUrl","getRequestUrlInternal","getHeaders","urlElement","join","getBaseResourcePath","urlParts","URL","protocol","toString","setBaseUrl","constructUrl","patchedHttpOptions","searchParams","requestInit","includeExtraHttpOptionsToRequestInit","unaryApiCall","baseHttpOptions","requestHttpOptions","has","set","streamApiCall","timeout","abortController","AbortController","signal","setTimeout","abort","getHeadersInternal","apiCall","method","throwErrorIfNotOK","catch","reader","getReader","decoder","TextDecoder","buffer","read","trim","chunkString","decode","processedChunkString","chunkData","releaseLock","fetch","versionHeaderValue","userAgentExtra","uploadFile","file","fileToUpload","displayName","uploader","fileStat","stat","sizeBytes","size","type","uploadUrl","fetchUploadUrl","upload","ok","status","statusText","errorBody","includes","errorMessage","clientError","serverError","Files","_this2","PAGED_ITEM_FILES","fileFromMldev","listFilesParametersToVertex","listFilesResponseFromVertex","listFilesParametersToMldev","listFilesResponseFromMldev","createInternal","createFileParametersToVertex","createFileResponseFromVertex","createFileParametersToMldev","createFileResponseFromMldev","getFileParametersToVertex","fileFromVertex","getFileParametersToMldev","listFilesConfigToMldev","fileStatusToMldev","fromDetails","fromMessage","fromCode","fileToMldev","fromSizeBytes","fromExpirationTime","fromSha256Hash","fromUri","fromDownloadUri","fromState","fromSource","fromError","fromFile","fileStatusFromMldev","fromFiles","fromHttpHeaders","crossError","MAX_CHUNK_SIZE","CrossUploader","uploadBlob","fileSize","offset","Response","uploadCommand","chunkSize","Math","min","responseJson","BrowserUploader","crossUploader","BrowserWebSocketFactory","BrowserWebSocket","ws","WebSocket","GOOGLE_API_KEY_HEADER","WebAuth","LANGUAGE_LABEL_PREFIX","GoogleGenAI","options","models","live","chats","caches","files"],"sources":["/home/mandubian/workspaces/mandubian/bananhack/details_matter_react/node_modules/@google/genai/src/_common.ts","/home/mandubian/workspaces/mandubian/bananhack/details_matter_react/node_modules/@google/genai/src/_transformers.ts","/home/mandubian/workspaces/mandubian/bananhack/details_matter_react/node_modules/@google/genai/src/pagers.ts","/home/mandubian/workspaces/mandubian/bananhack/details_matter_react/node_modules/@google/genai/src/types.ts","/home/mandubian/workspaces/mandubian/bananhack/details_matter_react/node_modules/@google/genai/src/caches.ts","/home/mandubian/workspaces/mandubian/bananhack/details_matter_react/node_modules/@google/genai/src/chats.ts","/home/mandubian/workspaces/mandubian/bananhack/details_matter_react/node_modules/@google/genai/src/models.ts","/home/mandubian/workspaces/mandubian/bananhack/details_matter_react/node_modules/@google/genai/src/live.ts","/home/mandubian/workspaces/mandubian/bananhack/details_matter_react/node_modules/@google/genai/src/_api_client.ts","/home/mandubian/workspaces/mandubian/bananhack/details_matter_react/node_modules/@google/genai/src/files.ts","/home/mandubian/workspaces/mandubian/bananhack/details_matter_react/node_modules/@google/genai/src/cross/_cross_error.ts","/home/mandubian/workspaces/mandubian/bananhack/details_matter_react/node_modules/@google/genai/src/cross/_cross_uploader.ts","/home/mandubian/workspaces/mandubian/bananhack/details_matter_react/node_modules/@google/genai/src/web/_browser_uploader.ts","/home/mandubian/workspaces/mandubian/bananhack/details_matter_react/node_modules/@google/genai/src/web/_browser_websocket.ts","/home/mandubian/workspaces/mandubian/bananhack/details_matter_react/node_modules/@google/genai/src/web/_web_auth.ts","/home/mandubian/workspaces/mandubian/bananhack/details_matter_react/node_modules/@google/genai/src/web/web_client.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {UploadFileConfig} from './types';\n\nexport class BaseModule {}\n\n/** Parameters for the upload file method. */\nexport interface UploadFileParameters {\n  /** The string path to the file to be uploaded or a Blob object. */\n  file: string | Blob;\n  /** Configuration that contains optional parameters. */\n  config?: UploadFileConfig;\n}\n\nexport function formatMap(\n  templateString: string,\n  valueMap: Record<string, unknown>,\n): string {\n  // Use a regular expression to find all placeholders in the template string\n  const regex = /\\{([^}]+)\\}/g;\n\n  // Replace each placeholder with its corresponding value from the valueMap\n  return templateString.replace(regex, (match, key) => {\n    if (Object.prototype.hasOwnProperty.call(valueMap, key)) {\n      const value = valueMap[key];\n      // Convert the value to a string if it's not a string already\n      return value !== undefined && value !== null ? String(value) : '';\n    } else {\n      // Handle missing keys\n      throw new Error(`Key '${key}' not found in valueMap.`);\n    }\n  });\n}\n\nexport function setValueByPath(\n  data: Record<string, unknown>,\n  keys: string[],\n  value: unknown,\n): void {\n  for (let i = 0; i < keys.length - 1; i++) {\n    const key = keys[i];\n\n    if (key.endsWith('[]')) {\n      const keyName = key.slice(0, -2);\n      if (!(keyName in data)) {\n        if (Array.isArray(value)) {\n          data[keyName] = Array.from({length: value.length}, () => ({}));\n        } else {\n          throw new Error(`Value must be a list given an array path ${key}`);\n        }\n      }\n\n      if (Array.isArray(data[keyName])) {\n        const arrayData = data[keyName] as Array<unknown>;\n\n        if (Array.isArray(value)) {\n          for (let j = 0; j < arrayData.length; j++) {\n            const entry = arrayData[j] as Record<string, unknown>;\n            setValueByPath(entry, keys.slice(i + 1), value[j]);\n          }\n        } else {\n          for (const d of arrayData) {\n            setValueByPath(\n              d as Record<string, unknown>,\n              keys.slice(i + 1),\n              value,\n            );\n          }\n        }\n      }\n      return;\n    } else if (key.endsWith('[0]')) {\n      const keyName = key.slice(0, -3);\n      if (!(keyName in data)) {\n        data[keyName] = [{}];\n      }\n      const arrayData = (data as Record<string, unknown>)[keyName];\n      setValueByPath(\n        (arrayData as Array<Record<string, unknown>>)[0],\n        keys.slice(i + 1),\n        value,\n      );\n      return;\n    }\n\n    if (!data[key] || typeof data[key] !== 'object') {\n      data[key] = {};\n    }\n\n    data = data[key] as Record<string, unknown>;\n  }\n\n  const keyToSet = keys[keys.length - 1];\n  const existingData = data[keyToSet];\n\n  if (existingData !== undefined) {\n    if (\n      !value ||\n      (typeof value === 'object' && Object.keys(value).length === 0)\n    ) {\n      return;\n    }\n\n    if (value === existingData) {\n      return;\n    }\n\n    if (\n      typeof existingData === 'object' &&\n      typeof value === 'object' &&\n      existingData !== null &&\n      value !== null\n    ) {\n      Object.assign(existingData, value);\n    } else {\n      throw new Error(`Cannot set value for an existing key. Key: ${keyToSet}`);\n    }\n  } else {\n    data[keyToSet] = value;\n  }\n}\n\nexport function getValueByPath(data: unknown, keys: string[]): unknown {\n  try {\n    if (keys.length === 1 && keys[0] === '_self') {\n      return data;\n    }\n\n    for (let i = 0; i < keys.length; i++) {\n      if (typeof data !== 'object' || data === null) {\n        return undefined;\n      }\n\n      const key = keys[i];\n      if (key.endsWith('[]')) {\n        const keyName = key.slice(0, -2);\n        if (keyName in data) {\n          const arrayData = (data as Record<string, unknown>)[keyName];\n          if (!Array.isArray(arrayData)) {\n            return undefined;\n          }\n          return arrayData.map((d) => getValueByPath(d, keys.slice(i + 1)));\n        } else {\n          return undefined;\n        }\n      } else {\n        data = (data as Record<string, unknown>)[key];\n      }\n    }\n\n    return data;\n  } catch (error) {\n    if (error instanceof TypeError) {\n      return undefined;\n    }\n    throw error;\n  }\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {ApiClient} from './_api_client';\nimport * as types from './types';\n\nexport function tModel(apiClient: ApiClient, model: string | unknown): string {\n  if (!model || typeof model !== 'string') {\n    throw new Error('model is required and must be a string');\n  }\n\n  if (apiClient.isVertexAI()) {\n    if (\n      model.startsWith('publishers/') ||\n      model.startsWith('projects/') ||\n      model.startsWith('models/')\n    ) {\n      return model;\n    } else if (model.indexOf('/') >= 0) {\n      const parts = model.split('/', 2);\n      return `publishers/${parts[0]}/models/${parts[1]}`;\n    } else {\n      return `publishers/google/models/${model}`;\n    }\n  } else {\n    if (model.startsWith('models/') || model.startsWith('tunedModels/')) {\n      return model;\n    } else {\n      return `models/${model}`;\n    }\n  }\n}\n\nexport function tCachesModel(\n  apiClient: ApiClient,\n  model: string | unknown,\n): string {\n  const transformedModel = tModel(apiClient, model as string);\n  if (!transformedModel) {\n    return '';\n  }\n\n  if (transformedModel.startsWith('publishers/') && apiClient.isVertexAI()) {\n    // vertex caches only support model name start with projects.\n    return `projects/${apiClient.getProject()}/locations/${apiClient.getLocation()}/${transformedModel}`;\n  } else if (transformedModel.startsWith('models/') && apiClient.isVertexAI()) {\n    return `projects/${apiClient.getProject()}/locations/${apiClient.getLocation()}/publishers/google/${transformedModel}`;\n  } else {\n    return transformedModel;\n  }\n}\n\nexport function tPart(\n  apiClient: ApiClient,\n  origin?: types.PartUnion | null,\n): types.Part {\n  if (origin === null || origin === undefined) {\n    throw new Error('PartUnion is required');\n  }\n  if (typeof origin === 'object') {\n    return origin;\n  }\n  if (typeof origin === 'string') {\n    return {text: origin};\n  }\n  throw new Error(`Unsupported part type: ${typeof origin}`);\n}\n\nexport function tParts(\n  apiClient: ApiClient,\n  origin?: types.PartListUnion | null,\n): types.Part[] {\n  if (\n    origin === null ||\n    origin === undefined ||\n    (Array.isArray(origin) && origin.length === 0)\n  ) {\n    throw new Error('PartListUnion is required');\n  }\n  if (Array.isArray(origin)) {\n    return origin.map((item) => tPart(apiClient, item as types.PartUnion)!);\n  }\n  return [tPart(apiClient, origin)!];\n}\n\nfunction _isContent(origin: unknown): boolean {\n  return (\n    origin !== null &&\n    origin !== undefined &&\n    typeof origin === 'object' &&\n    'parts' in origin &&\n    Array.isArray(origin.parts)\n  );\n}\n\nfunction _isFunctionCallPart(origin: unknown): boolean {\n  return (\n    origin !== null &&\n    origin !== undefined &&\n    typeof origin === 'object' &&\n    'functionCall' in origin\n  );\n}\n\nfunction _isUserPart(origin: unknown): boolean {\n  if (origin === null || origin === undefined) {\n    return false;\n  }\n  if (_isFunctionCallPart(origin)) {\n    return false;\n  }\n  return true;\n}\n\nfunction _areUserParts(origin: types.PartListUnion[]): boolean {\n  if (\n    origin === null ||\n    origin === undefined ||\n    (Array.isArray(origin) && origin.length === 0)\n  ) {\n    return false;\n  }\n  return origin.every(_isUserPart);\n}\n\nexport function tContent(\n  apiClient: ApiClient,\n  origin?: types.ContentUnion,\n): types.Content {\n  if (origin === null || origin === undefined) {\n    throw new Error('ContentUnion is required');\n  }\n  if (_isContent(origin)) {\n    // @ts-expect-error: _isContent is a utility function that checks if the origin is a Content.\n    return origin;\n  }\n\n  if (_isUserPart(origin)) {\n    return {\n      role: 'user',\n      parts: tParts(apiClient, origin as types.PartListUnion)!,\n    };\n  } else {\n    return {\n      role: 'model',\n      parts: tParts(apiClient, origin as types.PartListUnion)!,\n    };\n  }\n}\n\nexport function tContentsForEmbed(\n  apiClient: ApiClient,\n  origin: types.ContentListUnion,\n): types.ContentUnion[] {\n  if (!origin) {\n    return [];\n  }\n  if (apiClient.isVertexAI() && Array.isArray(origin)) {\n    return origin.flatMap((item) => {\n      const content = tContent(apiClient, item as types.ContentUnion);\n      if (\n        content.parts &&\n        content.parts.length > 0 &&\n        content.parts[0].text !== undefined\n      ) {\n        return [content.parts[0].text];\n      }\n      return [];\n    });\n  } else if (apiClient.isVertexAI()) {\n    const content = tContent(apiClient, origin as types.ContentUnion);\n    if (\n      content.parts &&\n      content.parts.length > 0 &&\n      content.parts[0].text !== undefined\n    ) {\n      return [content.parts[0].text];\n    }\n    return [];\n  }\n  if (Array.isArray(origin)) {\n    return origin.map(\n      (item) => tContent(apiClient, item as types.ContentUnion)!,\n    );\n  }\n  return [tContent(apiClient, origin as types.ContentUnion)!];\n}\n\nfunction _appendAccumulatedPartsAsContent(\n  apiClient: ApiClient,\n  result: types.Content[],\n  accumulatedParts: types.PartUnion[],\n) {\n  if (accumulatedParts.length === 0) {\n    return;\n  }\n  if (_areUserParts(accumulatedParts)) {\n    result.push({\n      role: 'user',\n      parts: tParts(apiClient, accumulatedParts),\n    });\n  } else {\n    result.push({\n      role: 'model',\n      parts: tParts(apiClient, accumulatedParts),\n    });\n  }\n  accumulatedParts.length = 0; // clear the array inplace\n}\n\nfunction _handleCurrentPart(\n  apiClient: ApiClient,\n  result: types.Content[],\n  accumulatedParts: types.PartUnion[],\n  currentPart: types.PartUnion,\n) {\n  if (_isUserPart(currentPart) === _areUserParts(accumulatedParts)) {\n    accumulatedParts.push(currentPart);\n  } else {\n    _appendAccumulatedPartsAsContent(apiClient, result, accumulatedParts);\n    accumulatedParts.length = 0;\n    accumulatedParts.push(currentPart);\n  }\n}\n\nexport function tContents(\n  apiClient: ApiClient,\n  origin?: types.ContentListUnion,\n): types.Content[] {\n  if (\n    origin === null ||\n    origin === undefined ||\n    (Array.isArray(origin) && origin.length === 0)\n  ) {\n    throw new Error('contents are required');\n  }\n  if (!Array.isArray(origin)) {\n    return [tContent(apiClient, origin)];\n  }\n\n  const result: types.Content[] = [];\n  const accumulatedParts: types.PartUnion[] = [];\n\n  for (const content of origin) {\n    if (_isContent(content)) {\n      _appendAccumulatedPartsAsContent(apiClient, result, accumulatedParts);\n      // @ts-expect-error: content is a Content here\n      result.push(content);\n    } else if (\n      typeof content === 'string' ||\n      (typeof content === 'object' && !Array.isArray(content))\n    ) {\n      // @ts-expect-error: content is a part here\n      _handleCurrentPart(apiClient, result, accumulatedParts, content);\n    } else if (Array.isArray(content)) {\n      // if there're consecutive user parts before the list,\n      // convert to UserContent and append to result\n      _appendAccumulatedPartsAsContent(apiClient, result, accumulatedParts);\n      result.push({\n        role: 'user',\n        parts: tParts(apiClient, content),\n      });\n    } else {\n      throw new Error(`Unsupported content type: ${typeof content}`);\n    }\n  }\n  _appendAccumulatedPartsAsContent(apiClient, result, accumulatedParts);\n\n  return result;\n}\n\nexport function processSchema(apiClient: ApiClient, schema: types.Schema) {\n  if (!apiClient.isVertexAI()) {\n    if ('title' in schema) {\n      delete schema['title'];\n    }\n\n    if ('default' in schema) {\n      throw new Error(\n        'Default value is not supported in the response schema for the Gemini API.',\n      );\n    }\n  }\n\n  if ('anyOf' in schema) {\n    if (!apiClient.isVertexAI()) {\n      throw new Error(\n        'AnyOf is not supported in the response schema for the Gemini API.',\n      );\n    }\n    if (schema['anyOf'] !== undefined) {\n      for (const subSchema of schema['anyOf']) {\n        processSchema(apiClient, subSchema);\n      }\n    }\n  }\n}\n\nexport function tSchema(\n  apiClient: ApiClient,\n  schema: types.Schema,\n): types.Schema {\n  processSchema(apiClient, schema);\n  return schema;\n}\n\nexport function tSpeechConfig(\n  apiClient: ApiClient,\n  speechConfig: types.SpeechConfigUnion,\n): types.SpeechConfig {\n  if (typeof speechConfig === 'object' && 'voiceConfig' in speechConfig) {\n    return speechConfig;\n  } else if (typeof speechConfig === 'string') {\n    return {\n      voiceConfig: {\n        prebuiltVoiceConfig: {\n          voiceName: speechConfig,\n        },\n      },\n    };\n  } else {\n    throw new Error(`Unsupported speechConfig type: ${typeof speechConfig}`);\n  }\n}\n\nexport function tTool(apiClient: ApiClient, tool: types.Tool): types.Tool {\n  return tool;\n}\n\nexport function tTools(\n  apiClient: ApiClient,\n  tool: types.Tool[] | unknown,\n): types.Tool[] {\n  if (!Array.isArray(tool)) {\n    throw new Error('tool is required and must be an array of Tools');\n  }\n  return tool;\n}\n\n/**\n * Prepends resource name with project, location, resource_prefix if needed.\n *\n * @param client The API client.\n * @param resourceName The resource name.\n * @param resourcePrefix The resource prefix.\n * @param splitsAfterPrefix The number of splits after the prefix.\n * @returns The completed resource name.\n *\n * Examples:\n *\n * ```\n * resource_name = '123'\n * resource_prefix = 'cachedContents'\n * splits_after_prefix = 1\n * client.vertexai = True\n * client.project = 'bar'\n * client.location = 'us-west1'\n * _resource_name(client, resource_name, resource_prefix, splits_after_prefix)\n * returns: 'projects/bar/locations/us-west1/cachedContents/123'\n * ```\n *\n * ```\n * resource_name = 'projects/foo/locations/us-central1/cachedContents/123'\n * resource_prefix = 'cachedContents'\n * splits_after_prefix = 1\n * client.vertexai = True\n * client.project = 'bar'\n * client.location = 'us-west1'\n * _resource_name(client, resource_name, resource_prefix, splits_after_prefix)\n * returns: 'projects/foo/locations/us-central1/cachedContents/123'\n * ```\n *\n * ```\n * resource_name = '123'\n * resource_prefix = 'cachedContents'\n * splits_after_prefix = 1\n * client.vertexai = False\n * _resource_name(client, resource_name, resource_prefix, splits_after_prefix)\n * returns 'cachedContents/123'\n * ```\n *\n * ```\n * resource_name = 'some/wrong/cachedContents/resource/name/123'\n * resource_prefix = 'cachedContents'\n * splits_after_prefix = 1\n * client.vertexai = False\n * # client.vertexai = True\n * _resource_name(client, resource_name, resource_prefix, splits_after_prefix)\n * -> 'some/wrong/resource/name/123'\n * ```\n */\nfunction resourceName(\n  client: ApiClient,\n  resourceName: string,\n  resourcePrefix: string,\n  splitsAfterPrefix: number = 1,\n): string {\n  const shouldAppendPrefix =\n    !resourceName.startsWith(`${resourcePrefix}/`) &&\n    resourceName.split('/').length === splitsAfterPrefix;\n  if (client.isVertexAI()) {\n    if (resourceName.startsWith('projects/')) {\n      return resourceName;\n    } else if (resourceName.startsWith('locations/')) {\n      return `projects/${client.getProject()}/${resourceName}`;\n    } else if (resourceName.startsWith(`${resourcePrefix}/`)) {\n      return `projects/${client.getProject()}/locations/${client.getLocation()}/${resourceName}`;\n    } else if (shouldAppendPrefix) {\n      return `projects/${client.getProject()}/locations/${client.getLocation()}/${resourcePrefix}/${resourceName}`;\n    } else {\n      return resourceName;\n    }\n  }\n  if (shouldAppendPrefix) {\n    return `${resourcePrefix}/${resourceName}`;\n  }\n  return resourceName;\n}\n\nexport function tCachedContentName(\n  apiClient: ApiClient,\n  name: string | unknown,\n): string {\n  if (typeof name !== 'string') {\n    throw new Error('name must be a string');\n  }\n  return resourceName(apiClient, name, 'cachedContents');\n}\n\nexport function tTuningJobStatus(\n  apiClient: ApiClient,\n  status: string | unknown,\n): string {\n  switch (status) {\n    case 'STATE_UNSPECIFIED':\n      return 'JOB_STATE_UNSPECIFIED';\n    case 'CREATING':\n      return 'JOB_STATE_RUNNING';\n    case 'ACTIVE':\n      return 'JOB_STATE_SUCCEEDED';\n    case 'FAILED':\n      return 'JOB_STATE_FAILED';\n    default:\n      return status as string;\n  }\n}\n\nexport function tBytes(\n  apiClient: ApiClient,\n  fromImageBytes: string | unknown,\n): string {\n  if (typeof fromImageBytes !== 'string') {\n    throw new Error('fromImageBytes must be a string');\n  }\n  // TODO(b/389133914): Remove dummy bytes converter.\n  return fromImageBytes;\n}\nexport function tFileName(\n  apiClient: ApiClient,\n  fromName: string | unknown,\n): string {\n  if (typeof fromName !== 'string') {\n    throw new Error('fromName must be a string');\n  }\n  // Remove the files/ prefx for MLdev urls to get the actual name of the file.\n  if (fromName.startsWith('files/')) {\n    return fromName.split('files/')[1];\n  }\n  return fromName;\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Pagers for the GenAI List APIs.\n */\n\nexport enum PagedItem {\n  PAGED_ITEM_BATCH_JOBS = 'batchJobs',\n  PAGED_ITEM_MODELS = 'models',\n  PAGED_ITEM_TUNING_JOBS = 'tuningJobs',\n  PAGED_ITEM_FILES = 'files',\n  PAGED_ITEM_CACHED_CONTENTS = 'cachedContents',\n}\n\ninterface PagedItemConfig {\n  config?: {\n    pageToken?: string;\n    pageSize?: number;\n  };\n}\n\ninterface PagedItemResponse<T> {\n  nextPageToken?: string;\n  batchJobs?: T[];\n  models?: T[];\n  tuningJobs?: T[];\n  files?: T[];\n  cachedContents?: T[];\n}\n\n/**\n * Pager class for iterating through paginated results.\n */\nexport class Pager<T> implements AsyncIterable<T> {\n  private nameInternal!: PagedItem;\n  private pageInternal: T[] = [];\n  private paramsInternal: PagedItemConfig = {};\n  private pageInternalSize!: number;\n  protected requestInternal!: (\n    params: PagedItemConfig,\n  ) => Promise<PagedItemResponse<T>>;\n  protected idxInternal!: number;\n\n  constructor(\n    name: PagedItem,\n    request: (params: PagedItemConfig) => Promise<PagedItemResponse<T>>,\n    response: PagedItemResponse<T>,\n    params: PagedItemConfig,\n  ) {\n    this.requestInternal = request;\n    this.init(name, response, params);\n  }\n\n  private init(\n    name: PagedItem,\n    response: PagedItemResponse<T>,\n    params: PagedItemConfig,\n  ) {\n    this.nameInternal = name;\n    this.pageInternal = response[this.nameInternal] || [];\n    this.idxInternal = 0;\n    let requestParams: PagedItemConfig = {config: {}};\n    if (!params) {\n      requestParams = {config: {}};\n    } else if (typeof params === 'object') {\n      requestParams = {...params};\n    } else {\n      requestParams = params;\n    }\n    if (requestParams['config']) {\n      requestParams['config']['pageToken'] = response['nextPageToken'];\n    }\n    this.paramsInternal = requestParams;\n    this.pageInternalSize =\n      requestParams['config']?.['pageSize'] ?? this.pageInternal.length;\n  }\n\n  private initNextPage(response: PagedItemResponse<T>): void {\n    this.init(this.nameInternal, response, this.paramsInternal);\n  }\n\n  /**\n   * Returns the current page, which is a list of items.\n   *\n   * @remarks\n   * The first page is retrieved when the pager is created. The returned list of\n   * items could be a subset of the entire list.\n   */\n  get page(): T[] {\n    return this.pageInternal;\n  }\n\n  /**\n   * Returns the type of paged item (for example, ``batch_jobs``).\n   */\n  get name(): PagedItem {\n    return this.nameInternal;\n  }\n\n  /**\n   * Returns the length of the page fetched each time by this pager.\n   *\n   * @remarks\n   * The number of items in the page is less than or equal to the page length.\n   */\n  get pageSize(): number {\n    return this.pageInternalSize;\n  }\n\n  /**\n   * Returns the parameters when making the API request for the next page.\n   *\n   * @remarks\n   * Parameters contain a set of optional configs that can be\n   * used to customize the API request. For example, the `pageToken` parameter\n   * contains the token to request the next page.\n   */\n  get params(): PagedItemConfig {\n    return this.paramsInternal;\n  }\n\n  /**\n   * Returns the total number of items in the current page.\n   */\n  get pageLength(): number {\n    return this.pageInternal.length;\n  }\n\n  /**\n   * Returns the item at the given index.\n   */\n  getItem(index: number): T {\n    return this.pageInternal[index];\n  }\n\n  /**\n   * Returns an async iterator that support iterating through all items\n   * retrieved from the API.\n   *\n   * @remarks\n   * The iterator will automatically fetch the next page if there are more items\n   * to fetch from the API.\n   *\n   * @example\n   *\n   * ```ts\n   * const pager = await ai.files.list({config: {pageSize: 10}});\n   * for await (const file of pager) {\n   *   console.log(file.name);\n   * }\n   * ```\n   */\n  [Symbol.asyncIterator](): AsyncIterator<T> {\n    return {\n      next: async () => {\n        if (this.idxInternal >= this.pageLength) {\n          if (this.hasNextPage()) {\n            await this.nextPage();\n          } else {\n            return {value: undefined, done: true};\n          }\n        }\n        const item = this.getItem(this.idxInternal);\n        this.idxInternal += 1;\n        return {value: item, done: false};\n      },\n      return: async () => {\n        return {value: undefined, done: true};\n      },\n    };\n  }\n\n  /**\n   * Fetches the next page of items. This makes a new API request.\n   *\n   * @throws {Error} If there are no more pages to fetch.\n   *\n   * @example\n   *\n   * ```ts\n   * const pager = await ai.files.list({config: {pageSize: 10}});\n   * let page = pager.page;\n   * while (true) {\n   *   for (const file of page) {\n   *     console.log(file.name);\n   *   }\n   *   if (!pager.hasNextPage()) {\n   *     break;\n   *   }\n   *   page = await pager.nextPage();\n   * }\n   * ```\n   */\n  async nextPage(): Promise<T[]> {\n    if (!this.hasNextPage()) {\n      throw new Error('No more pages to fetch.');\n    }\n    const response = await this.requestInternal(this.params);\n    this.initNextPage(response);\n    return this.page;\n  }\n\n  /**\n   * Returns true if there are more pages to fetch from the API.\n   */\n  hasNextPage(): boolean {\n    if (this.params['config']?.['pageToken'] !== undefined) {\n      return true;\n    }\n    return false;\n  }\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Code generated by the Google Gen AI SDK generator DO NOT EDIT.\n\nexport enum Outcome {\n  OUTCOME_UNSPECIFIED = 'OUTCOME_UNSPECIFIED',\n  OUTCOME_OK = 'OUTCOME_OK',\n  OUTCOME_FAILED = 'OUTCOME_FAILED',\n  OUTCOME_DEADLINE_EXCEEDED = 'OUTCOME_DEADLINE_EXCEEDED',\n}\n\nexport enum Language {\n  LANGUAGE_UNSPECIFIED = 'LANGUAGE_UNSPECIFIED',\n  PYTHON = 'PYTHON',\n}\n\nexport enum Type {\n  TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED',\n  STRING = 'STRING',\n  NUMBER = 'NUMBER',\n  INTEGER = 'INTEGER',\n  BOOLEAN = 'BOOLEAN',\n  ARRAY = 'ARRAY',\n  OBJECT = 'OBJECT',\n}\n\nexport enum HarmCategory {\n  HARM_CATEGORY_UNSPECIFIED = 'HARM_CATEGORY_UNSPECIFIED',\n  HARM_CATEGORY_HATE_SPEECH = 'HARM_CATEGORY_HATE_SPEECH',\n  HARM_CATEGORY_DANGEROUS_CONTENT = 'HARM_CATEGORY_DANGEROUS_CONTENT',\n  HARM_CATEGORY_HARASSMENT = 'HARM_CATEGORY_HARASSMENT',\n  HARM_CATEGORY_SEXUALLY_EXPLICIT = 'HARM_CATEGORY_SEXUALLY_EXPLICIT',\n  HARM_CATEGORY_CIVIC_INTEGRITY = 'HARM_CATEGORY_CIVIC_INTEGRITY',\n}\n\nexport enum HarmBlockMethod {\n  HARM_BLOCK_METHOD_UNSPECIFIED = 'HARM_BLOCK_METHOD_UNSPECIFIED',\n  SEVERITY = 'SEVERITY',\n  PROBABILITY = 'PROBABILITY',\n}\n\nexport enum HarmBlockThreshold {\n  HARM_BLOCK_THRESHOLD_UNSPECIFIED = 'HARM_BLOCK_THRESHOLD_UNSPECIFIED',\n  BLOCK_LOW_AND_ABOVE = 'BLOCK_LOW_AND_ABOVE',\n  BLOCK_MEDIUM_AND_ABOVE = 'BLOCK_MEDIUM_AND_ABOVE',\n  BLOCK_ONLY_HIGH = 'BLOCK_ONLY_HIGH',\n  BLOCK_NONE = 'BLOCK_NONE',\n  OFF = 'OFF',\n}\n\nexport enum Mode {\n  MODE_UNSPECIFIED = 'MODE_UNSPECIFIED',\n  MODE_DYNAMIC = 'MODE_DYNAMIC',\n}\n\nexport enum FinishReason {\n  FINISH_REASON_UNSPECIFIED = 'FINISH_REASON_UNSPECIFIED',\n  STOP = 'STOP',\n  MAX_TOKENS = 'MAX_TOKENS',\n  SAFETY = 'SAFETY',\n  RECITATION = 'RECITATION',\n  OTHER = 'OTHER',\n  BLOCKLIST = 'BLOCKLIST',\n  PROHIBITED_CONTENT = 'PROHIBITED_CONTENT',\n  SPII = 'SPII',\n  MALFORMED_FUNCTION_CALL = 'MALFORMED_FUNCTION_CALL',\n}\n\nexport enum HarmProbability {\n  HARM_PROBABILITY_UNSPECIFIED = 'HARM_PROBABILITY_UNSPECIFIED',\n  NEGLIGIBLE = 'NEGLIGIBLE',\n  LOW = 'LOW',\n  MEDIUM = 'MEDIUM',\n  HIGH = 'HIGH',\n}\n\nexport enum HarmSeverity {\n  HARM_SEVERITY_UNSPECIFIED = 'HARM_SEVERITY_UNSPECIFIED',\n  HARM_SEVERITY_NEGLIGIBLE = 'HARM_SEVERITY_NEGLIGIBLE',\n  HARM_SEVERITY_LOW = 'HARM_SEVERITY_LOW',\n  HARM_SEVERITY_MEDIUM = 'HARM_SEVERITY_MEDIUM',\n  HARM_SEVERITY_HIGH = 'HARM_SEVERITY_HIGH',\n}\n\nexport enum BlockedReason {\n  BLOCKED_REASON_UNSPECIFIED = 'BLOCKED_REASON_UNSPECIFIED',\n  SAFETY = 'SAFETY',\n  OTHER = 'OTHER',\n  BLOCKLIST = 'BLOCKLIST',\n  PROHIBITED_CONTENT = 'PROHIBITED_CONTENT',\n}\n\nexport enum State {\n  STATE_UNSPECIFIED = 'STATE_UNSPECIFIED',\n  ACTIVE = 'ACTIVE',\n  ERROR = 'ERROR',\n}\n\nexport enum DynamicRetrievalConfigMode {\n  MODE_UNSPECIFIED = 'MODE_UNSPECIFIED',\n  MODE_DYNAMIC = 'MODE_DYNAMIC',\n}\n\nexport enum FunctionCallingConfigMode {\n  MODE_UNSPECIFIED = 'MODE_UNSPECIFIED',\n  AUTO = 'AUTO',\n  ANY = 'ANY',\n  NONE = 'NONE',\n}\n\nexport enum MediaResolution {\n  MEDIA_RESOLUTION_UNSPECIFIED = 'MEDIA_RESOLUTION_UNSPECIFIED',\n  MEDIA_RESOLUTION_LOW = 'MEDIA_RESOLUTION_LOW',\n  MEDIA_RESOLUTION_MEDIUM = 'MEDIA_RESOLUTION_MEDIUM',\n  MEDIA_RESOLUTION_HIGH = 'MEDIA_RESOLUTION_HIGH',\n}\n\nexport enum SafetyFilterLevel {\n  BLOCK_LOW_AND_ABOVE = 'BLOCK_LOW_AND_ABOVE',\n  BLOCK_MEDIUM_AND_ABOVE = 'BLOCK_MEDIUM_AND_ABOVE',\n  BLOCK_ONLY_HIGH = 'BLOCK_ONLY_HIGH',\n  BLOCK_NONE = 'BLOCK_NONE',\n}\n\nexport enum PersonGeneration {\n  DONT_ALLOW = 'DONT_ALLOW',\n  ALLOW_ADULT = 'ALLOW_ADULT',\n  ALLOW_ALL = 'ALLOW_ALL',\n}\n\nexport enum ImagePromptLanguage {\n  auto = 'auto',\n  en = 'en',\n  ja = 'ja',\n  ko = 'ko',\n  hi = 'hi',\n}\n\nexport enum FileState {\n  STATE_UNSPECIFIED = 'STATE_UNSPECIFIED',\n  PROCESSING = 'PROCESSING',\n  ACTIVE = 'ACTIVE',\n  FAILED = 'FAILED',\n}\n\nexport enum FileSource {\n  SOURCE_UNSPECIFIED = 'SOURCE_UNSPECIFIED',\n  UPLOADED = 'UPLOADED',\n  GENERATED = 'GENERATED',\n}\n\nexport enum MaskReferenceMode {\n  MASK_MODE_DEFAULT = 'MASK_MODE_DEFAULT',\n  MASK_MODE_USER_PROVIDED = 'MASK_MODE_USER_PROVIDED',\n  MASK_MODE_BACKGROUND = 'MASK_MODE_BACKGROUND',\n  MASK_MODE_FOREGROUND = 'MASK_MODE_FOREGROUND',\n  MASK_MODE_SEMANTIC = 'MASK_MODE_SEMANTIC',\n}\n\nexport enum ControlReferenceType {\n  CONTROL_TYPE_DEFAULT = 'CONTROL_TYPE_DEFAULT',\n  CONTROL_TYPE_CANNY = 'CONTROL_TYPE_CANNY',\n  CONTROL_TYPE_SCRIBBLE = 'CONTROL_TYPE_SCRIBBLE',\n  CONTROL_TYPE_FACE_MESH = 'CONTROL_TYPE_FACE_MESH',\n}\n\nexport enum SubjectReferenceType {\n  SUBJECT_TYPE_DEFAULT = 'SUBJECT_TYPE_DEFAULT',\n  SUBJECT_TYPE_PERSON = 'SUBJECT_TYPE_PERSON',\n  SUBJECT_TYPE_ANIMAL = 'SUBJECT_TYPE_ANIMAL',\n  SUBJECT_TYPE_PRODUCT = 'SUBJECT_TYPE_PRODUCT',\n}\n\nexport enum Modality {\n  MODALITY_UNSPECIFIED = 'MODALITY_UNSPECIFIED',\n  TEXT = 'TEXT',\n  IMAGE = 'IMAGE',\n  AUDIO = 'AUDIO',\n}\n\n/** Metadata describes the input video content. */\nexport interface VideoMetadata {\n  /** Optional. The end offset of the video. */\n  endOffset?: string;\n  /** Optional. The start offset of the video. */\n  startOffset?: string;\n}\n\n/** Result of executing the [ExecutableCode]. Always follows a `part` containing the [ExecutableCode]. */\nexport interface CodeExecutionResult {\n  /** Required. Outcome of the code execution. */\n  outcome?: Outcome;\n  /** Optional. Contains stdout when code execution is successful, stderr or other description otherwise. */\n  output?: string;\n}\n\n/** Code generated by the model that is meant to be executed, and the result returned to the model. Generated when using the [FunctionDeclaration] tool and [FunctionCallingConfig] mode is set to [Mode.CODE]. */\nexport interface ExecutableCode {\n  /** Required. The code to be executed. */\n  code?: string;\n  /** Required. Programming language of the `code`. */\n  language?: Language;\n}\n\n/** URI based data. */\nexport interface FileData {\n  /** Required. URI. */\n  fileUri?: string;\n  /** Required. The IANA standard MIME type of the source data. */\n  mimeType?: string;\n}\n\n/** A function call. */\nexport interface FunctionCall {\n  /** The unique id of the function call. If populated, the client to execute the\n   `function_call` and return the response with the matching `id`. */\n  id?: string;\n  /** Optional. Required. The function parameters and values in JSON object format. See [FunctionDeclaration.parameters] for parameter details. */\n  args?: Record<string, unknown>;\n  /** Required. The name of the function to call. Matches [FunctionDeclaration.name]. */\n  name?: string;\n}\n\n/** A function response. */\nexport class FunctionResponse {\n  /** The id of the function call this response is for. Populated by the client\n   to match the corresponding function call `id`. */\n  id?: string;\n  /** Required. The name of the function to call. Matches [FunctionDeclaration.name] and [FunctionCall.name]. */\n  name?: string;\n  /** Required. The function response in JSON object format. Use \"output\" key to specify function output and \"error\" key to specify error details (if any). If \"output\" and \"error\" keys are not specified, then whole \"response\" is treated as function output. */\n  response?: Record<string, unknown>;\n}\n\n/** Content blob. */\nexport interface Blob {\n  /** Required. Raw bytes. */\n  data?: string;\n  /** Required. The IANA standard MIME type of the source data. */\n  mimeType?: string;\n}\n\n/** A datatype containing media content.\n\n  Exactly one field within a Part should be set, representing the specific type\n  of content being conveyed. Using multiple fields within the same `Part`\n  instance is considered invalid.\n   */\nexport interface Part {\n  /** Metadata for a given video. */\n  videoMetadata?: VideoMetadata;\n  /** Indicates if the part is thought from the model. */\n  thought?: boolean;\n  /** Optional. Result of executing the [ExecutableCode]. */\n  codeExecutionResult?: CodeExecutionResult;\n  /** Optional. Code generated by the model that is meant to be executed. */\n  executableCode?: ExecutableCode;\n  /** Optional. URI based data. */\n  fileData?: FileData;\n  /** Optional. A predicted [FunctionCall] returned from the model that contains a string representing the [FunctionDeclaration.name] with the parameters and their values. */\n  functionCall?: FunctionCall;\n  /** Optional. The result output of a [FunctionCall] that contains a string representing the [FunctionDeclaration.name] and a structured JSON object containing any output from the function call. It is used as context to the model. */\n  functionResponse?: FunctionResponse;\n  /** Optional. Inlined bytes data. */\n  inlineData?: Blob;\n  /** Optional. Text part (can be code). */\n  text?: string;\n}\n/**\n * Creates a `Part` object from a `URI` string.\n */\nexport function createPartFromUri(uri: string, mimeType: string): Part {\n  return {\n    fileData: {\n      fileUri: uri,\n      mimeType: mimeType,\n    },\n  };\n}\n/**\n * Creates a `Part` object from a `text` string.\n */\nexport function createPartFromText(text: string): Part {\n  return {\n    text: text,\n  };\n}\n/**\n * Creates a `Part` object from a `FunctionCall` object.\n */\nexport function createPartFromFunctionCall(\n  name: string,\n  args: Record<string, unknown>,\n): Part {\n  return {\n    functionCall: {\n      name: name,\n      args: args,\n    },\n  };\n}\n/**\n * Creates a `Part` object from a `FunctionResponse` object.\n */\nexport function createPartFromFunctionResponse(\n  id: string,\n  name: string,\n  response: Record<string, unknown>,\n): Part {\n  return {\n    functionResponse: {\n      id: id,\n      name: name,\n      response: response,\n    },\n  };\n}\n/**\n * Creates a `Part` object from a `base64` `string`.\n */\nexport function createPartFromBase64(data: string, mimeType: string): Part {\n  return {\n    inlineData: {\n      data: data,\n      mimeType: mimeType,\n    },\n  };\n}\n/**\n * Creates a `Part` object from the `startOffset` and `endOffset` of a `VideoMetadata` object.\n */\nexport function createPartFromVideoMetadata(\n  startOffset: string,\n  endOffset: string,\n): Part {\n  return {\n    videoMetadata: {\n      startOffset: startOffset,\n      endOffset: endOffset,\n    },\n  };\n}\n/**\n * Creates a `Part` object from the `outcome` and `output` of a `CodeExecutionResult` object.\n */\nexport function createPartFromCodeExecutionResult(\n  outcome: Outcome,\n  output: string,\n): Part {\n  return {\n    codeExecutionResult: {\n      outcome: outcome,\n      output: output,\n    },\n  };\n}\n/**\n * Creates a `Part` object from the `code` and `language` of an `ExecutableCode` object.\n */\nexport function createPartFromExecutableCode(\n  code: string,\n  language: Language,\n): Part {\n  return {\n    executableCode: {\n      code: code,\n      language: language,\n    },\n  };\n}\n\n/** Contains the multi-part content of a message. */\nexport interface Content {\n  /** List of parts that constitute a single message. Each part may have\n      a different IANA MIME type. */\n  parts?: Part[];\n  /** Optional. The producer of the content. Must be either 'user' or\n      'model'. Useful to set for multi-turn conversations, otherwise can be\n      left blank or unset. If role is not specified, SDK will determine the role. */\n  role?: string;\n}\nfunction _isPart(obj: unknown): obj is Part {\n  if (typeof obj === 'object' && obj !== null) {\n    return (\n      'fileData' in obj ||\n      'text' in obj ||\n      'functionCall' in obj ||\n      'functionResponse' in obj ||\n      'inlineData' in obj ||\n      'videoMetadata' in obj ||\n      'codeExecutionResult' in obj ||\n      'executableCode' in obj\n    );\n  }\n  return false;\n}\nfunction _toParts(partOrString: PartListUnion | string): Part[] {\n  const parts: Part[] = [];\n  if (typeof partOrString === 'string') {\n    parts.push(createPartFromText(partOrString));\n  } else if (_isPart(partOrString)) {\n    parts.push(partOrString);\n  } else if (Array.isArray(partOrString)) {\n    if (partOrString.length === 0) {\n      throw new Error('partOrString cannot be an empty array');\n    }\n    for (const part of partOrString) {\n      if (typeof part === 'string') {\n        parts.push(createPartFromText(part));\n      } else if (_isPart(part)) {\n        parts.push(part);\n      } else {\n        throw new Error('element in PartUnion must be a Part object or string');\n      }\n    }\n  } else {\n    throw new Error('partOrString must be a Part object, string, or array');\n  }\n  return parts;\n}\n/**\n * Creates a `Content` object with a user role from a `PartListUnion` object or `string`.\n */\nexport function createUserContent(\n  partOrString: PartListUnion | string,\n): Content {\n  return {\n    role: 'user',\n    parts: _toParts(partOrString),\n  };\n}\n\n/**\n * Creates a `Content` object with a model role from a `PartListUnion` object or `string`.\n */\nexport function createModelContent(\n  partOrString: PartListUnion | string,\n): Content {\n  return {\n    role: 'model',\n    parts: _toParts(partOrString),\n  };\n}\n/** HTTP options to be used in each of the requests. */\nexport interface HttpOptions {\n  /** The base URL for the AI platform service endpoint. */\n  baseUrl?: string;\n  /** Specifies the version of the API to use. */\n  apiVersion?: string;\n  /** Additional HTTP headers to be sent with the request. */\n  headers?: Record<string, string>;\n  /** Timeout for the request in milliseconds. */\n  timeout?: number;\n}\n\n/** Schema that defines the format of input and output data.\n\n  Represents a select subset of an OpenAPI 3.0 schema object.\n   */\nexport interface Schema {\n  /** Optional. Example of the object. Will only populated when the object is the root. */\n  example?: unknown;\n  /** Optional. Pattern of the Type.STRING to restrict a string to a regular expression. */\n  pattern?: string;\n  /** Optional. SCHEMA FIELDS FOR TYPE INTEGER and NUMBER Minimum value of the Type.INTEGER and Type.NUMBER */\n  minimum?: number;\n  /** Optional. Default value of the data. */\n  default?: unknown;\n  /** Optional. The value should be validated against any (one or more) of the subschemas in the list. */\n  anyOf?: Schema[];\n  /** Optional. Maximum length of the Type.STRING */\n  maxLength?: string;\n  /** Optional. The title of the Schema. */\n  title?: string;\n  /** Optional. SCHEMA FIELDS FOR TYPE STRING Minimum length of the Type.STRING */\n  minLength?: string;\n  /** Optional. Minimum number of the properties for Type.OBJECT. */\n  minProperties?: string;\n  /** Optional. Maximum value of the Type.INTEGER and Type.NUMBER */\n  maximum?: number;\n  /** Optional. Maximum number of the properties for Type.OBJECT. */\n  maxProperties?: string;\n  /** Optional. The description of the data. */\n  description?: string;\n  /** Optional. Possible values of the element of primitive type with enum format. Examples: 1. We can define direction as : {type:STRING, format:enum, enum:[\"EAST\", NORTH\", \"SOUTH\", \"WEST\"]} 2. We can define apartment number as : {type:INTEGER, format:enum, enum:[\"101\", \"201\", \"301\"]} */\n  enum?: string[];\n  /** Optional. The format of the data. Supported formats: for NUMBER type: \"float\", \"double\" for INTEGER type: \"int32\", \"int64\" for STRING type: \"email\", \"byte\", etc */\n  format?: string;\n  /** Optional. SCHEMA FIELDS FOR TYPE ARRAY Schema of the elements of Type.ARRAY. */\n  items?: Schema;\n  /** Optional. Maximum number of the elements for Type.ARRAY. */\n  maxItems?: string;\n  /** Optional. Minimum number of the elements for Type.ARRAY. */\n  minItems?: string;\n  /** Optional. Indicates if the value may be null. */\n  nullable?: boolean;\n  /** Optional. SCHEMA FIELDS FOR TYPE OBJECT Properties of Type.OBJECT. */\n  properties?: Record<string, Schema>;\n  /** Optional. The order of the properties. Not a standard field in open api spec. Only used to support the order of the properties. */\n  propertyOrdering?: string[];\n  /** Optional. Required properties of Type.OBJECT. */\n  required?: string[];\n  /** Optional. The type of the data. */\n  type?: Type;\n}\n\n/** Safety settings. */\nexport interface SafetySetting {\n  /** Determines if the harm block method uses probability or probability\n      and severity scores. */\n  method?: HarmBlockMethod;\n  /** Required. Harm category. */\n  category?: HarmCategory;\n  /** Required. The harm block threshold. */\n  threshold?: HarmBlockThreshold;\n}\n\n/** Defines a function that the model can generate JSON inputs for.\n\n  The inputs are based on `OpenAPI 3.0 specifications\n  <https://spec.openapis.org/oas/v3.0.3>`_.\n   */\nexport interface FunctionDeclaration {\n  /** Describes the output from the function in the OpenAPI JSON Schema\n      Object format. */\n  response?: Schema;\n  /** Optional. Description and purpose of the function. Model uses it to decide how and whether to call the function. */\n  description?: string;\n  /** Required. The name of the function to call. Must start with a letter or an underscore. Must be a-z, A-Z, 0-9, or contain underscores, dots and dashes, with a maximum length of 64. */\n  name?: string;\n  /** Optional. Describes the parameters to this function in JSON Schema Object format. Reflects the Open API 3.03 Parameter Object. string Key: the name of the parameter. Parameter names are case sensitive. Schema Value: the Schema defining the type used for the parameter. For function with no parameters, this can be left unset. Parameter names must start with a letter or an underscore and must only contain chars a-z, A-Z, 0-9, or underscores with a maximum length of 64. Example with 1 required and 1 optional parameter: type: OBJECT properties: param1: type: STRING param2: type: INTEGER required: - param1 */\n  parameters?: Schema;\n}\n\n/** Tool to support Google Search in Model. Powered by Google. */\nexport interface GoogleSearch {}\n\n/** Describes the options to customize dynamic retrieval. */\nexport interface DynamicRetrievalConfig {\n  /** The mode of the predictor to be used in dynamic retrieval. */\n  mode?: DynamicRetrievalConfigMode;\n  /** Optional. The threshold to be used in dynamic retrieval. If not set, a system default value is used. */\n  dynamicThreshold?: number;\n}\n\n/** Tool to retrieve public web data for grounding, powered by Google. */\nexport interface GoogleSearchRetrieval {\n  /** Specifies the dynamic retrieval configuration for the given source. */\n  dynamicRetrievalConfig?: DynamicRetrievalConfig;\n}\n\n/** Retrieve from Vertex AI Search datastore for grounding. See https://cloud.google.com/products/agent-builder */\nexport interface VertexAISearch {\n  /** Required. Fully-qualified Vertex AI Search data store resource ID. Format: `projects/{project}/locations/{location}/collections/{collection}/dataStores/{dataStore}` */\n  datastore?: string;\n}\n\n/** The definition of the Rag resource. */\nexport interface VertexRagStoreRagResource {\n  /** Optional. RagCorpora resource name. Format: `projects/{project}/locations/{location}/ragCorpora/{rag_corpus}` */\n  ragCorpus?: string;\n  /** Optional. rag_file_id. The files should be in the same rag_corpus set in rag_corpus field. */\n  ragFileIds?: string[];\n}\n\n/** Retrieve from Vertex RAG Store for grounding. */\nexport interface VertexRagStore {\n  /** Optional. Deprecated. Please use rag_resources instead. */\n  ragCorpora?: string[];\n  /** Optional. The representation of the rag source. It can be used to specify corpus only or ragfiles. Currently only support one corpus or multiple files from one corpus. In the future we may open up multiple corpora support. */\n  ragResources?: VertexRagStoreRagResource[];\n  /** Optional. Number of top k results to return from the selected corpora. */\n  similarityTopK?: number;\n  /** Optional. Only return results with vector distance smaller than the threshold. */\n  vectorDistanceThreshold?: number;\n}\n\n/** Defines a retrieval tool that model can call to access external knowledge. */\nexport interface Retrieval {\n  /** Optional. Deprecated. This option is no longer supported. */\n  disableAttribution?: boolean;\n  /** Set to use data source powered by Vertex AI Search. */\n  vertexAiSearch?: VertexAISearch;\n  /** Set to use data source powered by Vertex RAG store. User data is uploaded via the VertexRagDataService. */\n  vertexRagStore?: VertexRagStore;\n}\n\n/** Tool that executes code generated by the model, and automatically returns the result to the model. See also [ExecutableCode]and [CodeExecutionResult] which are input and output to this tool. */\nexport interface ToolCodeExecution {}\n\n/** Tool details of a tool that the model may use to generate a response. */\nexport interface Tool {\n  /** List of function declarations that the tool supports. */\n  functionDeclarations?: FunctionDeclaration[];\n  /** Optional. Retrieval tool type. System will always execute the provided retrieval tool(s) to get external knowledge to answer the prompt. Retrieval results are presented to the model for generation. */\n  retrieval?: Retrieval;\n  /** Optional. Google Search tool type. Specialized retrieval tool\n      that is powered by Google Search. */\n  googleSearch?: GoogleSearch;\n  /** Optional. GoogleSearchRetrieval tool type. Specialized retrieval tool that is powered by Google search. */\n  googleSearchRetrieval?: GoogleSearchRetrieval;\n  /** Optional. CodeExecution tool type. Enables the model to execute code as part of generation. This field is only used by the Gemini Developer API services. */\n  codeExecution?: ToolCodeExecution;\n}\n\n/** Function calling config. */\nexport interface FunctionCallingConfig {\n  /** Optional. Function calling mode. */\n  mode?: FunctionCallingConfigMode;\n  /** Optional. Function names to call. Only set when the Mode is ANY. Function names should match [FunctionDeclaration.name]. With mode set to ANY, model will predict a function call from the set of function names provided. */\n  allowedFunctionNames?: string[];\n}\n\n/** Tool config.\n\n  This config is shared for all tools provided in the request.\n   */\nexport interface ToolConfig {\n  /** Optional. Function calling config. */\n  functionCallingConfig?: FunctionCallingConfig;\n}\n\n/** The configuration for the prebuilt speaker to use. */\nexport interface PrebuiltVoiceConfig {\n  /** The name of the prebuilt voice to use.\n   */\n  voiceName?: string;\n}\n\n/** The configuration for the voice to use. */\nexport interface VoiceConfig {\n  /** The configuration for the speaker to use.\n   */\n  prebuiltVoiceConfig?: PrebuiltVoiceConfig;\n}\n\n/** The speech generation configuration. */\nexport interface SpeechConfig {\n  /** The configuration for the speaker to use.\n   */\n  voiceConfig?: VoiceConfig;\n}\n\n/** The thinking features configuration. */\nexport interface ThinkingConfig {\n  /** Indicates whether to include thoughts in the response. If true, thoughts are returned only if the model supports thought and thoughts are available.\n   */\n  includeThoughts?: boolean;\n}\n\n/** When automated routing is specified, the routing will be determined by the pretrained routing model and customer provided model routing preference. */\nexport interface GenerationConfigRoutingConfigAutoRoutingMode {\n  /** The model routing preference. */\n  modelRoutingPreference?:\n    | 'UNKNOWN'\n    | 'PRIORITIZE_QUALITY'\n    | 'BALANCED'\n    | 'PRIORITIZE_COST';\n}\n\n/** When manual routing is set, the specified model will be used directly. */\nexport interface GenerationConfigRoutingConfigManualRoutingMode {\n  /** The model name to use. Only the public LLM models are accepted. e.g. 'gemini-1.5-pro-001'. */\n  modelName?: string;\n}\n\n/** The configuration for routing the request to a specific model. */\nexport interface GenerationConfigRoutingConfig {\n  /** Automated routing. */\n  autoMode?: GenerationConfigRoutingConfigAutoRoutingMode;\n  /** Manual routing. */\n  manualMode?: GenerationConfigRoutingConfigManualRoutingMode;\n}\n\n/** Optional model configuration parameters.\n\n  For more information, see `Content generation parameters\n  <https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/content-generation-parameters>`_.\n   */\nexport interface GenerateContentConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** Instructions for the model to steer it toward better performance.\n      For example, \"Answer as concisely as possible\" or \"Don't use technical\n      terms in your response\".\n       */\n  systemInstruction?: ContentUnion;\n  /** Value that controls the degree of randomness in token selection.\n      Lower temperatures are good for prompts that require a less open-ended or\n      creative response, while higher temperatures can lead to more diverse or\n      creative results.\n       */\n  temperature?: number;\n  /** Tokens are selected from the most to least probable until the sum\n      of their probabilities equals this value. Use a lower value for less\n      random responses and a higher value for more random responses.\n       */\n  topP?: number;\n  /** For each token selection step, the ``top_k`` tokens with the\n      highest probabilities are sampled. Then tokens are further filtered based\n      on ``top_p`` with the final token selected using temperature sampling. Use\n      a lower number for less random responses and a higher number for more\n      random responses.\n       */\n  topK?: number;\n  /** Number of response variations to return.\n   */\n  candidateCount?: number;\n  /** Maximum number of tokens that can be generated in the response.\n   */\n  maxOutputTokens?: number;\n  /** List of strings that tells the model to stop generating text if one\n      of the strings is encountered in the response.\n       */\n  stopSequences?: string[];\n  /** Whether to return the log probabilities of the tokens that were\n      chosen by the model at each step.\n       */\n  responseLogprobs?: boolean;\n  /** Number of top candidate tokens to return the log probabilities for\n      at each generation step.\n       */\n  logprobs?: number;\n  /** Positive values penalize tokens that already appear in the\n      generated text, increasing the probability of generating more diverse\n      content.\n       */\n  presencePenalty?: number;\n  /** Positive values penalize tokens that repeatedly appear in the\n      generated text, increasing the probability of generating more diverse\n      content.\n       */\n  frequencyPenalty?: number;\n  /** When ``seed`` is fixed to a specific number, the model makes a best\n      effort to provide the same response for repeated requests. By default, a\n      random number is used.\n       */\n  seed?: number;\n  /** Output response media type of the generated candidate text.\n   */\n  responseMimeType?: string;\n  /** Schema that the generated candidate text must adhere to.\n   */\n  responseSchema?: SchemaUnion;\n  /** Configuration for model router requests.\n   */\n  routingConfig?: GenerationConfigRoutingConfig;\n  /** Safety settings in the request to block unsafe content in the\n      response.\n       */\n  safetySettings?: SafetySetting[];\n  /** Code that enables the system to interact with external systems to\n      perform an action outside of the knowledge and scope of the model.\n       */\n  tools?: ToolListUnion;\n  /** Associates model output to a specific function call.\n   */\n  toolConfig?: ToolConfig;\n  /** Labels with user-defined metadata to break down billed charges. */\n  labels?: Record<string, string>;\n  /** Resource name of a context cache that can be used in subsequent\n      requests.\n       */\n  cachedContent?: string;\n  /** The requested modalities of the response. Represents the set of\n      modalities that the model can return.\n       */\n  responseModalities?: string[];\n  /** If specified, the media resolution specified will be used.\n   */\n  mediaResolution?: MediaResolution;\n  /** The speech generation configuration.\n   */\n  speechConfig?: SpeechConfigUnion;\n  /** If enabled, audio timestamp will be included in the request to the\n       model.\n       */\n  audioTimestamp?: boolean;\n  /** The thinking features configuration.\n   */\n  thinkingConfig?: ThinkingConfig;\n}\n\n/** Config for models.generate_content parameters. */\nexport interface GenerateContentParameters {\n  /** ID of the model to use. For a list of models, see `Google models\n    <https://cloud.google.com/vertex-ai/generative-ai/docs/learn/models>`_. */\n  model: string;\n  /** Content of the request.\n   */\n  contents: ContentListUnion;\n  /** Configuration that contains optional model parameters.\n   */\n  config?: GenerateContentConfig;\n}\n\n/** Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp */\nexport interface GoogleTypeDate {\n  /** Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant. */\n  day?: number;\n  /** Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day. */\n  month?: number;\n  /** Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year. */\n  year?: number;\n}\n\n/** Source attributions for content. */\nexport interface Citation {\n  /** Output only. End index into the content. */\n  endIndex?: number;\n  /** Output only. License of the attribution. */\n  license?: string;\n  /** Output only. Publication date of the attribution. */\n  publicationDate?: GoogleTypeDate;\n  /** Output only. Start index into the content. */\n  startIndex?: number;\n  /** Output only. Title of the attribution. */\n  title?: string;\n  /** Output only. Url reference of the attribution. */\n  uri?: string;\n}\n\n/** Citation information when the model quotes another source. */\nexport interface CitationMetadata {\n  /** Contains citation information when the model directly quotes, at\n      length, from another source. Can include traditional websites and code\n      repositories.\n       */\n  citations?: Citation[];\n}\n\n/** Chunk from context retrieved by the retrieval tools. */\nexport interface GroundingChunkRetrievedContext {\n  /** Text of the attribution. */\n  text?: string;\n  /** Title of the attribution. */\n  title?: string;\n  /** URI reference of the attribution. */\n  uri?: string;\n}\n\n/** Chunk from the web. */\nexport interface GroundingChunkWeb {\n  /** Title of the chunk. */\n  title?: string;\n  /** URI reference of the chunk. */\n  uri?: string;\n}\n\n/** Grounding chunk. */\nexport interface GroundingChunk {\n  /** Grounding chunk from context retrieved by the retrieval tools. */\n  retrievedContext?: GroundingChunkRetrievedContext;\n  /** Grounding chunk from the web. */\n  web?: GroundingChunkWeb;\n}\n\n/** Segment of the content. */\nexport interface Segment {\n  /** Output only. End index in the given Part, measured in bytes. Offset from the start of the Part, exclusive, starting at zero. */\n  endIndex?: number;\n  /** Output only. The index of a Part object within its parent Content object. */\n  partIndex?: number;\n  /** Output only. Start index in the given Part, measured in bytes. Offset from the start of the Part, inclusive, starting at zero. */\n  startIndex?: number;\n  /** Output only. The text corresponding to the segment from the response. */\n  text?: string;\n}\n\n/** Grounding support. */\nexport interface GroundingSupport {\n  /** Confidence score of the support references. Ranges from 0 to 1. 1 is the most confident. This list must have the same size as the grounding_chunk_indices. */\n  confidenceScores?: number[];\n  /** A list of indices (into 'grounding_chunk') specifying the citations associated with the claim. For instance [1,3,4] means that grounding_chunk[1], grounding_chunk[3], grounding_chunk[4] are the retrieved content attributed to the claim. */\n  groundingChunkIndices?: number[];\n  /** Segment of the content this support belongs to. */\n  segment?: Segment;\n}\n\n/** Metadata related to retrieval in the grounding flow. */\nexport interface RetrievalMetadata {\n  /** Optional. Score indicating how likely information from Google Search could help answer the prompt. The score is in the range `[0, 1]`, where 0 is the least likely and 1 is the most likely. This score is only populated when Google Search grounding and dynamic retrieval is enabled. It will be compared to the threshold to determine whether to trigger Google Search. */\n  googleSearchDynamicRetrievalScore?: number;\n}\n\n/** Google search entry point. */\nexport interface SearchEntryPoint {\n  /** Optional. Web content snippet that can be embedded in a web page or an app webview. */\n  renderedContent?: string;\n  /** Optional. Base64 encoded JSON representing array of tuple. */\n  sdkBlob?: string;\n}\n\n/** Metadata returned to client when grounding is enabled. */\nexport interface GroundingMetadata {\n  /** List of supporting references retrieved from specified grounding source. */\n  groundingChunks?: GroundingChunk[];\n  /** Optional. List of grounding support. */\n  groundingSupports?: GroundingSupport[];\n  /** Optional. Output only. Retrieval metadata. */\n  retrievalMetadata?: RetrievalMetadata;\n  /** Optional. Queries executed by the retrieval tools. */\n  retrievalQueries?: string[];\n  /** Optional. Google search entry for the following-up web searches. */\n  searchEntryPoint?: SearchEntryPoint;\n  /** Optional. Web search queries for the following-up web search. */\n  webSearchQueries?: string[];\n}\n\n/** Candidate for the logprobs token and score. */\nexport interface LogprobsResultCandidate {\n  /** The candidate's log probability. */\n  logProbability?: number;\n  /** The candidate's token string value. */\n  token?: string;\n  /** The candidate's token id value. */\n  tokenId?: number;\n}\n\n/** Candidates with top log probabilities at each decoding step. */\nexport interface LogprobsResultTopCandidates {\n  /** Sorted by log probability in descending order. */\n  candidates?: LogprobsResultCandidate[];\n}\n\n/** Logprobs Result */\nexport interface LogprobsResult {\n  /** Length = total number of decoding steps. The chosen candidates may or may not be in top_candidates. */\n  chosenCandidates?: LogprobsResultCandidate[];\n  /** Length = total number of decoding steps. */\n  topCandidates?: LogprobsResultTopCandidates[];\n}\n\n/** Safety rating corresponding to the generated content. */\nexport interface SafetyRating {\n  /** Output only. Indicates whether the content was filtered out because of this rating. */\n  blocked?: boolean;\n  /** Output only. Harm category. */\n  category?: HarmCategory;\n  /** Output only. Harm probability levels in the content. */\n  probability?: HarmProbability;\n  /** Output only. Harm probability score. */\n  probabilityScore?: number;\n  /** Output only. Harm severity levels in the content. */\n  severity?: HarmSeverity;\n  /** Output only. Harm severity score. */\n  severityScore?: number;\n}\n\n/** A response candidate generated from the model. */\nexport interface Candidate {\n  /** Contains the multi-part content of the response.\n   */\n  content?: Content;\n  /** Source attribution of the generated content.\n   */\n  citationMetadata?: CitationMetadata;\n  /** Describes the reason the model stopped generating tokens.\n   */\n  finishMessage?: string;\n  /** Number of tokens for this candidate.\n   */\n  tokenCount?: number;\n  /** Output only. Average log probability score of the candidate. */\n  avgLogprobs?: number;\n  /** Output only. The reason why the model stopped generating tokens. If empty, the model has not stopped generating the tokens. */\n  finishReason?: FinishReason;\n  /** Output only. Metadata specifies sources used to ground generated content. */\n  groundingMetadata?: GroundingMetadata;\n  /** Output only. Index of the candidate. */\n  index?: number;\n  /** Output only. Log-likelihood scores for the response tokens and top tokens */\n  logprobsResult?: LogprobsResult;\n  /** Output only. List of ratings for the safety of a response candidate. There is at most one rating per category. */\n  safetyRatings?: SafetyRating[];\n}\n\n/** Content filter results for a prompt sent in the request. */\nexport class GenerateContentResponsePromptFeedback {\n  /** Output only. Blocked reason. */\n  blockReason?: BlockedReason;\n  /** Output only. A readable block reason message. */\n  blockReasonMessage?: string;\n  /** Output only. Safety ratings. */\n  safetyRatings?: SafetyRating[];\n}\n\n/** Usage metadata about response(s). */\nexport class GenerateContentResponseUsageMetadata {\n  /** Output only. Number of tokens in the cached part in the input (the cached content). */\n  cachedContentTokenCount?: number;\n  /** Number of tokens in the response(s). */\n  candidatesTokenCount?: number;\n  /** Number of tokens in the request. When `cached_content` is set, this is still the total effective prompt size meaning this includes the number of tokens in the cached content. */\n  promptTokenCount?: number;\n  /** Total token count for prompt and response candidates. */\n  totalTokenCount?: number;\n}\n\n/** Response message for PredictionService.GenerateContent. */\nexport class GenerateContentResponse {\n  /** Response variations returned by the model.\n   */\n  candidates?: Candidate[];\n  /** Timestamp when the request is made to the server.\n   */\n  createTime?: string;\n  /** Identifier for each response.\n   */\n  responseId?: string;\n  /** Output only. The model version used to generate the response. */\n  modelVersion?: string;\n  /** Output only. Content filter results for a prompt sent in the request. Note: Sent only in the first stream chunk. Only happens when no candidates were generated due to content violations. */\n  promptFeedback?: GenerateContentResponsePromptFeedback;\n  /** Usage metadata about the response(s). */\n  usageMetadata?: GenerateContentResponseUsageMetadata;\n  /**\n   * Returns the concatenation of all text parts from the first candidate in the response.\n   *\n   * @remarks\n   * If there are multiple candidates in the response, the text from the first\n   * one will be returned.\n   * If there are non-text parts in the response, the concatenation of all text\n   * parts will be returned, and a warning will be logged.\n   * If there are thought parts in the response, the concatenation of all text\n   * parts excluding the thought parts will be returned.\n   *\n   * @example\n   * ```ts\n   * const response = await ai.models.generateContent({\n   *   model: 'gemini-2.0-flash',\n   *   contents:\n   *     'Why is the sky blue?',\n   * });\n   *\n   * console.debug(response.text);\n   * ```\n   */\n  get text(): string | undefined {\n    if (this.candidates?.[0]?.content?.parts?.length === 0) {\n      return undefined;\n    }\n    if (this.candidates && this.candidates.length > 1) {\n      console.warn(\n        'there are multiple candidates in the response, returning text from the first one.',\n      );\n    }\n    let text = '';\n    let anyTextPartText = false;\n    const nonTextParts = [];\n    for (const part of this.candidates?.[0]?.content?.parts ?? []) {\n      for (const [fieldName, fieldValue] of Object.entries(part)) {\n        if (\n          fieldName !== 'text' &&\n          fieldName !== 'thought' &&\n          (fieldValue !== null || fieldValue !== undefined)\n        ) {\n          nonTextParts.push(fieldName);\n        }\n      }\n      if (typeof part.text === 'string') {\n        if (typeof part.thought === 'boolean' && part.thought) {\n          continue;\n        }\n        anyTextPartText = true;\n        text += part.text;\n      }\n    }\n    if (nonTextParts.length > 0) {\n      console.warn(\n        `there are non-text parts ${nonTextParts} in the response, returning concatenation of all text parts. Please refer to the non text parts for a full response from model.`,\n      );\n    }\n    // part.text === '' is different from part.text is null\n    return anyTextPartText ? text : undefined;\n  }\n\n  /**\n   * Returns the function calls from the first candidate in the response.\n   *\n   * @remarks\n   * If there are multiple candidates in the response, the function calls from\n   * the first one will be returned.\n   * If there are no function calls in the response, undefined will be returned.\n   *\n   * @example\n   * ```ts\n   * const controlLightFunctionDeclaration: FunctionDeclaration = {\n   *   name: 'controlLight',\n   *   parameters: {\n   *   type: Type.OBJECT,\n   *   description: 'Set the brightness and color temperature of a room light.',\n   *   properties: {\n   *     brightness: {\n   *       type: Type.NUMBER,\n   *       description:\n   *         'Light level from 0 to 100. Zero is off and 100 is full brightness.',\n   *     },\n   *     colorTemperature: {\n   *       type: Type.STRING,\n   *       description:\n   *         'Color temperature of the light fixture which can be `daylight`, `cool` or `warm`.',\n   *     },\n   *   },\n   *   required: ['brightness', 'colorTemperature'],\n   *  };\n   *  const response = await ai.models.generateContent({\n   *     model: 'gemini-2.0-flash',\n   *     contents: 'Dim the lights so the room feels cozy and warm.',\n   *     config: {\n   *       tools: [{functionDeclarations: [controlLightFunctionDeclaration]}],\n   *       toolConfig: {\n   *         functionCallingConfig: {\n   *           mode: FunctionCallingConfigMode.ANY,\n   *           allowedFunctionNames: ['controlLight'],\n   *         },\n   *       },\n   *     },\n   *   });\n   *  console.debug(JSON.stringify(response.functionCalls));\n   * ```\n   */\n  get functionCalls(): FunctionCall[] | undefined {\n    if (this.candidates?.[0]?.content?.parts?.length === 0) {\n      return undefined;\n    }\n    if (this.candidates && this.candidates.length > 1) {\n      console.warn(\n        'there are multiple candidates in the response, returning function calls from the first one.',\n      );\n    }\n    const functionCalls = this.candidates?.[0]?.content?.parts\n      ?.filter((part) => part.functionCall)\n      .map((part) => part.functionCall)\n      .filter(\n        (functionCall): functionCall is FunctionCall =>\n          functionCall !== undefined,\n      );\n    if (functionCalls?.length === 0) {\n      return undefined;\n    }\n    return functionCalls;\n  }\n  /**\n   * Returns the first executable code from the first candidate in the response.\n   *\n   * @remarks\n   * If there are multiple candidates in the response, the executable code from\n   * the first one will be returned.\n   * If there are no executable code in the response, undefined will be\n   * returned.\n   *\n   * @example\n   * ```ts\n   * const response = await ai.models.generateContent({\n   *   model: 'gemini-2.0-flash',\n   *   contents:\n   *     'What is the sum of the first 50 prime numbers? Generate and run code for the calculation, and make sure you get all 50.'\n   *   config: {\n   *     tools: [{codeExecution: {}}],\n   *   },\n   * });\n   *\n   * console.debug(response.executableCode);\n   * ```\n   */\n  get executableCode(): string | undefined {\n    if (this.candidates?.[0]?.content?.parts?.length === 0) {\n      return undefined;\n    }\n    if (this.candidates && this.candidates.length > 1) {\n      console.warn(\n        'there are multiple candidates in the response, returning executable code from the first one.',\n      );\n    }\n    const executableCode = this.candidates?.[0]?.content?.parts\n      ?.filter((part) => part.executableCode)\n      .map((part) => part.executableCode)\n      .filter(\n        (executableCode): executableCode is ExecutableCode =>\n          executableCode !== undefined,\n      );\n    if (executableCode?.length === 0) {\n      return undefined;\n    }\n\n    return executableCode?.[0]?.code;\n  }\n  /**\n   * Returns the first code execution result from the first candidate in the response.\n   *\n   * @remarks\n   * If there are multiple candidates in the response, the code execution result from\n   * the first one will be returned.\n   * If there are no code execution result in the response, undefined will be returned.\n   *\n   * @example\n   * ```ts\n   * const response = await ai.models.generateContent({\n   *   model: 'gemini-2.0-flash',\n   *   contents:\n   *     'What is the sum of the first 50 prime numbers? Generate and run code for the calculation, and make sure you get all 50.'\n   *   config: {\n   *     tools: [{codeExecution: {}}],\n   *   },\n   * });\n   *\n   * console.debug(response.codeExecutionResult);\n   * ```\n   */\n  get codeExecutionResult(): string | undefined {\n    if (this.candidates?.[0]?.content?.parts?.length === 0) {\n      return undefined;\n    }\n    if (this.candidates && this.candidates.length > 1) {\n      console.warn(\n        'there are multiple candidates in the response, returning code execution result from the first one.',\n      );\n    }\n    const codeExecutionResult = this.candidates?.[0]?.content?.parts\n      ?.filter((part) => part.codeExecutionResult)\n      .map((part) => part.codeExecutionResult)\n      .filter(\n        (codeExecutionResult): codeExecutionResult is CodeExecutionResult =>\n          codeExecutionResult !== undefined,\n      );\n    if (codeExecutionResult?.length === 0) {\n      return undefined;\n    }\n    return codeExecutionResult?.[0]?.output;\n  }\n}\n\nexport /** Optional parameters for the embed_content method. */\ninterface EmbedContentConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** Type of task for which the embedding will be used.\n   */\n  taskType?: string;\n  /** Title for the text. Only applicable when TaskType is\n      `RETRIEVAL_DOCUMENT`.\n       */\n  title?: string;\n  /** Reduced dimension for the output embedding. If set,\n      excessive values in the output embedding are truncated from the end.\n      Supported by newer models since 2024 only. You cannot set this value if\n      using the earlier model (`models/embedding-001`).\n       */\n  outputDimensionality?: number;\n  /** Vertex API only. The MIME type of the input.\n   */\n  mimeType?: string;\n  /** Vertex API only. Whether to silently truncate inputs longer than\n      the max sequence length. If this option is set to false, oversized inputs\n      will lead to an INVALID_ARGUMENT error, similar to other text APIs.\n       */\n  autoTruncate?: boolean;\n}\n\n/** Parameters for the embed_content method. */\nexport interface EmbedContentParameters {\n  /** ID of the model to use. For a list of models, see `Google models\n    <https://cloud.google.com/vertex-ai/generative-ai/docs/learn/models>`_. */\n  model: string;\n  /** The content to embed. Only the `parts.text` fields will be counted.\n   */\n  contents: ContentListUnion;\n  /** Configuration that contains optional parameters.\n   */\n  config?: EmbedContentConfig;\n}\n\n/** Statistics of the input text associated with the result of content embedding. */\nexport interface ContentEmbeddingStatistics {\n  /** Vertex API only. If the input text was truncated due to having\n      a length longer than the allowed maximum input.\n       */\n  truncated?: boolean;\n  /** Vertex API only. Number of tokens of the input text.\n   */\n  tokenCount?: number;\n}\n\n/** The embedding generated from an input content. */\nexport interface ContentEmbedding {\n  /** A list of floats representing an embedding.\n   */\n  values?: number[];\n  /** Vertex API only. Statistics of the input text associated with this\n      embedding.\n       */\n  statistics?: ContentEmbeddingStatistics;\n}\n\n/** Request-level metadata for the Vertex Embed Content API. */\nexport interface EmbedContentMetadata {\n  /** Vertex API only. The total number of billable characters included\n      in the request.\n       */\n  billableCharacterCount?: number;\n}\n\n/** Response for the embed_content method. */\nexport class EmbedContentResponse {\n  /** The embeddings for each request, in the same order as provided in\n      the batch request.\n       */\n  embeddings?: ContentEmbedding[];\n  /** Vertex API only. Metadata about the request.\n   */\n  metadata?: EmbedContentMetadata;\n}\n\n/** The config for generating an images. */\nexport interface GenerateImagesConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** Cloud Storage URI used to store the generated images.\n   */\n  outputGcsUri?: string;\n  /** Description of what to discourage in the generated images.\n   */\n  negativePrompt?: string;\n  /** Number of images to generate.\n   */\n  numberOfImages?: number;\n  /** Aspect ratio of the generated images.\n   */\n  aspectRatio?: string;\n  /** Controls how much the model adheres to the text prompt. Large\n      values increase output and prompt alignment, but may compromise image\n      quality.\n       */\n  guidanceScale?: number;\n  /** Random seed for image generation. This is not available when\n      ``add_watermark`` is set to true.\n       */\n  seed?: number;\n  /** Filter level for safety filtering.\n   */\n  safetyFilterLevel?: SafetyFilterLevel;\n  /** Allows generation of people by the model.\n   */\n  personGeneration?: PersonGeneration;\n  /** Whether to report the safety scores of each image in the response.\n   */\n  includeSafetyAttributes?: boolean;\n  /** Whether to include the Responsible AI filter reason if the image\n      is filtered out of the response.\n       */\n  includeRaiReason?: boolean;\n  /** Language of the text in the prompt.\n   */\n  language?: ImagePromptLanguage;\n  /** MIME type of the generated image.\n   */\n  outputMimeType?: string;\n  /** Compression quality of the generated image (for ``image/jpeg``\n      only).\n       */\n  outputCompressionQuality?: number;\n  /** Whether to add a watermark to the generated images.\n   */\n  addWatermark?: boolean;\n  /** Whether to use the prompt rewriting logic.\n   */\n  enhancePrompt?: boolean;\n}\n\n/** The parameters for generating images. */\nexport interface GenerateImagesParameters {\n  /** ID of the model to use. For a list of models, see `Google models\n    <https://cloud.google.com/vertex-ai/generative-ai/docs/learn/models>`_. */\n  model: string;\n  /** Text prompt that typically describes the images to output.\n   */\n  prompt: string;\n  /** Configuration for generating images.\n   */\n  config?: GenerateImagesConfig;\n}\n\n/** An image. */\nexport interface Image {\n  /** The Cloud Storage URI of the image. ``Image`` can contain a value\n      for this field or the ``image_bytes`` field but not both.\n       */\n  gcsUri?: string;\n  /** The image bytes data. ``Image`` can contain a value for this field\n      or the ``gcs_uri`` field but not both.\n       */\n  imageBytes?: string;\n  /** The MIME type of the image. */\n  mimeType?: string;\n}\n\n/** An output image. */\nexport interface GeneratedImage {\n  /** The output image data.\n   */\n  image?: Image;\n  /** Responsible AI filter reason if the image is filtered out of the\n      response.\n       */\n  raiFilteredReason?: string;\n  /** The rewritten prompt used for the image generation if the prompt\n      enhancer is enabled.\n       */\n  enhancedPrompt?: string;\n}\n\n/** The output images response. */\nexport class GenerateImagesResponse {\n  /** List of generated images.\n   */\n  generatedImages?: GeneratedImage[];\n}\n\n/** Generation config. */\nexport interface GenerationConfig {\n  /** Optional. If enabled, audio timestamp will be included in the request to the model. */\n  audioTimestamp?: boolean;\n  /** Optional. Number of candidates to generate. */\n  candidateCount?: number;\n  /** Optional. Frequency penalties. */\n  frequencyPenalty?: number;\n  /** Optional. Logit probabilities. */\n  logprobs?: number;\n  /** Optional. The maximum number of output tokens to generate per message. */\n  maxOutputTokens?: number;\n  /** Optional. Positive penalties. */\n  presencePenalty?: number;\n  /** Optional. If true, export the logprobs results in response. */\n  responseLogprobs?: boolean;\n  /** Optional. Output response mimetype of the generated candidate text. Supported mimetype: - `text/plain`: (default) Text output. - `application/json`: JSON response in the candidates. The model needs to be prompted to output the appropriate response type, otherwise the behavior is undefined. This is a preview feature. */\n  responseMimeType?: string;\n  /** Optional. The `Schema` object allows the definition of input and output data types. These types can be objects, but also primitives and arrays. Represents a select subset of an [OpenAPI 3.0 schema object](https://spec.openapis.org/oas/v3.0.3#schema). If set, a compatible response_mime_type must also be set. Compatible mimetypes: `application/json`: Schema for JSON response. */\n  responseSchema?: Schema;\n  /** Optional. Routing configuration. */\n  routingConfig?: GenerationConfigRoutingConfig;\n  /** Optional. Seed. */\n  seed?: number;\n  /** Optional. Stop sequences. */\n  stopSequences?: string[];\n  /** Optional. Controls the randomness of predictions. */\n  temperature?: number;\n  /** Optional. If specified, top-k sampling will be used. */\n  topK?: number;\n  /** Optional. If specified, nucleus sampling will be used. */\n  topP?: number;\n}\n\n/** Config for the count_tokens method. */\nexport interface CountTokensConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** Instructions for the model to steer it toward better performance.\n   */\n  systemInstruction?: ContentUnion;\n  /** Code that enables the system to interact with external systems to\n      perform an action outside of the knowledge and scope of the model.\n       */\n  tools?: Tool[];\n  /** Configuration that the model uses to generate the response. Not\n      supported by the Gemini Developer API.\n       */\n  generationConfig?: GenerationConfig;\n}\n\n/** Parameters for counting tokens. */\nexport interface CountTokensParameters {\n  /** ID of the model to use. For a list of models, see `Google models\n    <https://cloud.google.com/vertex-ai/generative-ai/docs/learn/models>`_. */\n  model: string;\n  /** Input content. */\n  contents: ContentListUnion;\n  /** Configuration for counting tokens. */\n  config?: CountTokensConfig;\n}\n\n/** Response for counting tokens. */\nexport class CountTokensResponse {\n  /** Total number of tokens. */\n  totalTokens?: number;\n  /** Number of tokens in the cached part of the prompt (the cached content). */\n  cachedContentTokenCount?: number;\n}\n\n/** Optional parameters for computing tokens. */\nexport interface ComputeTokensConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n}\n\n/** Parameters for computing tokens. */\nexport interface ComputeTokensParameters {\n  /** ID of the model to use. For a list of models, see `Google models\n    <https://cloud.google.com/vertex-ai/generative-ai/docs/learn/models>`_. */\n  model: string;\n  /** Input content. */\n  contents: ContentListUnion;\n  /** Optional parameters for the request.\n   */\n  config?: ComputeTokensConfig;\n}\n\n/** Tokens info with a list of tokens and the corresponding list of token ids. */\nexport interface TokensInfo {\n  /** Optional. Optional fields for the role from the corresponding Content. */\n  role?: string;\n  /** A list of token ids from the input. */\n  tokenIds?: string[];\n  /** A list of tokens from the input. */\n  tokens?: string[];\n}\n\n/** Response for computing tokens. */\nexport class ComputeTokensResponse {\n  /** Lists of tokens info from the input. A ComputeTokensRequest could have multiple instances with a prompt in each instance. We also need to return lists of tokens info for the request with multiple instances. */\n  tokensInfo?: TokensInfo[];\n}\n\n/** Optional configuration for cached content creation. */\nexport interface CreateCachedContentConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** The TTL for this resource. The expiration time is computed: now + TTL. */\n  ttl?: string;\n  /** Timestamp of when this resource is considered expired. */\n  expireTime?: string;\n  /** The user-generated meaningful display name of the cached content.\n   */\n  displayName?: string;\n  /** The content to cache.\n   */\n  contents?: ContentListUnion;\n  /** Developer set system instruction.\n   */\n  systemInstruction?: ContentUnion;\n  /** A list of `Tools` the model may use to generate the next response.\n   */\n  tools?: Tool[];\n  /** Configuration for the tools to use. This config is shared for all tools.\n   */\n  toolConfig?: ToolConfig;\n}\n\n/** Parameters for caches.create method. */\nexport interface CreateCachedContentParameters {\n  /** ID of the model to use. Example: gemini-1.5-flash */\n  model: string;\n  /** Configuration that contains optional parameters.\n   */\n  config?: CreateCachedContentConfig;\n}\n\n/** Metadata on the usage of the cached content. */\nexport interface CachedContentUsageMetadata {\n  /** Duration of audio in seconds. */\n  audioDurationSeconds?: number;\n  /** Number of images. */\n  imageCount?: number;\n  /** Number of text characters. */\n  textCount?: number;\n  /** Total number of tokens that the cached content consumes. */\n  totalTokenCount?: number;\n  /** Duration of video in seconds. */\n  videoDurationSeconds?: number;\n}\n\n/** A resource used in LLM queries for users to explicitly specify what to cache. */\nexport interface CachedContent {\n  /** The server-generated resource name of the cached content. */\n  name?: string;\n  /** The user-generated meaningful display name of the cached content. */\n  displayName?: string;\n  /** The name of the publisher model to use for cached content. */\n  model?: string;\n  /** Creation time of the cache entry. */\n  createTime?: string;\n  /** When the cache entry was last updated in UTC time. */\n  updateTime?: string;\n  /** Expiration time of the cached content. */\n  expireTime?: string;\n  /** Metadata on the usage of the cached content. */\n  usageMetadata?: CachedContentUsageMetadata;\n}\n\n/** Optional parameters for caches.get method. */\nexport interface GetCachedContentConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n}\n\n/** Parameters for caches.get method. */\nexport interface GetCachedContentParameters {\n  /** The server-generated resource name of the cached content.\n   */\n  name: string;\n  /** Optional parameters for the request.\n   */\n  config?: GetCachedContentConfig;\n}\n\n/** Optional parameters for caches.delete method. */\nexport interface DeleteCachedContentConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n}\n\n/** Parameters for caches.delete method. */\nexport interface DeleteCachedContentParameters {\n  /** The server-generated resource name of the cached content.\n   */\n  name: string;\n  /** Optional parameters for the request.\n   */\n  config?: DeleteCachedContentConfig;\n}\n\n/** Empty response for caches.delete method. */\nexport class DeleteCachedContentResponse {}\n\n/** Optional parameters for caches.update method. */\nexport interface UpdateCachedContentConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** The TTL for this resource. The expiration time is computed: now + TTL. */\n  ttl?: string;\n  /** Timestamp of when this resource is considered expired. */\n  expireTime?: string;\n}\n\nexport interface UpdateCachedContentParameters {\n  /** The server-generated resource name of the cached content.\n   */\n  name: string;\n  /** Configuration that contains optional parameters.\n   */\n  config?: UpdateCachedContentConfig;\n}\n\n/** Config for caches.list method. */\nexport interface ListCachedContentsConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  pageSize?: number;\n  pageToken?: string;\n}\n\n/** Parameters for caches.list method. */\nexport interface ListCachedContentsParameters {\n  /** Configuration that contains optional parameters.\n   */\n  config?: ListCachedContentsConfig;\n}\n\nexport class ListCachedContentsResponse {\n  nextPageToken?: string;\n  /** List of cached contents.\n   */\n  cachedContents?: CachedContent[];\n}\n\n/** Used to override the default configuration. */\nexport interface ListFilesConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  pageSize?: number;\n  pageToken?: string;\n}\n\n/** Generates the parameters for the list method. */\nexport interface ListFilesParameters {\n  /** Used to override the default configuration. */\n  config?: ListFilesConfig;\n}\n\n/** Status of a File that uses a common error model. */\nexport interface FileStatus {\n  /** A list of messages that carry the error details. There is a common set of message types for APIs to use. */\n  details?: Record<string, unknown>[];\n  /** A list of messages that carry the error details. There is a common set of message types for APIs to use. */\n  message?: string;\n  /** The status code. 0 for OK, 1 for CANCELLED */\n  code?: number;\n}\n\n/** A file uploaded to the API. */\nexport interface File {\n  /** The `File` resource name. The ID (name excluding the \"files/\" prefix) can contain up to 40 characters that are lowercase alphanumeric or dashes (-). The ID cannot start or end with a dash. If the name is empty on create, a unique name will be generated. Example: `files/123-456` */\n  name?: string;\n  /** Optional. The human-readable display name for the `File`. The display name must be no more than 512 characters in length, including spaces. Example: 'Welcome Image' */\n  displayName?: string;\n  /** Output only. MIME type of the file. */\n  mimeType?: string;\n  /** Output only. Size of the file in bytes. */\n  sizeBytes?: number;\n  /** Output only. The timestamp of when the `File` was created. */\n  createTime?: string;\n  /** Output only. The timestamp of when the `File` will be deleted. Only set if the `File` is scheduled to expire. */\n  expirationTime?: string;\n  /** Output only. The timestamp of when the `File` was last updated. */\n  updateTime?: string;\n  /** Output only. SHA-256 hash of the uploaded bytes. The hash value is encoded in base64 format. */\n  sha256Hash?: string;\n  /** Output only. The URI of the `File`. */\n  uri?: string;\n  /** Output only. The URI of the `File`, only set for downloadable (generated) files. */\n  downloadUri?: string;\n  /** Output only. Processing state of the File. */\n  state?: FileState;\n  /** Output only. The source of the `File`. */\n  source?: FileSource;\n  /** Output only. Metadata for a video. */\n  videoMetadata?: Record<string, unknown>;\n  /** Output only. Error status if File processing failed. */\n  error?: FileStatus;\n}\n\n/** Response for the list files method. */\nexport class ListFilesResponse {\n  /** A token to retrieve next page of results. */\n  nextPageToken?: string;\n  /** The list of files. */\n  files?: File[];\n}\n\n/** Used to override the default configuration. */\nexport interface CreateFileConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n}\n\n/** Generates the parameters for the private _create method. */\nexport interface CreateFileParameters {\n  /** The file to be uploaded.\n            mime_type: (Required) The MIME type of the file. Must be provided.\n            name: (Optional) The name of the file in the destination (e.g.\n            'files/sample-image').\n            display_name: (Optional) The display name of the file.\n       */\n  file: File;\n  /** Used to override the default configuration. */\n  config?: CreateFileConfig;\n}\n\n/** A wrapper class for the http response. */\nexport class HttpResponse {\n  /** Used to retain the processed HTTP headers in the response. */\n  headers?: Record<string, string>;\n  /**\n   * The original http response.\n   */\n  responseInternal: Response;\n\n  constructor(response: Response) {\n    // Process the headers.\n    const headers: Record<string, string> = {};\n    for (const pair of response.headers.entries()) {\n      headers[pair[0]] = pair[1];\n    }\n    this.headers = headers;\n\n    // Keep the original response.\n    this.responseInternal = response;\n  }\n\n  json(): Promise<unknown> {\n    return this.responseInternal.json();\n  }\n}\n\n/** Callbacks for the live API. */\nexport interface LiveCallbacks {\n  onopen?: (() => void) | null;\n  onmessage: (e: LiveServerMessage) => void;\n  onerror?: ((e: ErrorEvent) => void) | null;\n  onclose?: ((e: CloseEvent) => void) | null;\n}\n/** Response for the create file method. */\nexport class CreateFileResponse {\n  /** Used to retain the full HTTP response. */\n  sdkHttpResponse?: HttpResponse;\n}\n\n/** Used to override the default configuration. */\nexport interface GetFileConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n}\n\n/** Generates the parameters for the get method. */\nexport interface GetFileParameters {\n  /** The name identifier for the file to retrieve. */\n  name: string;\n  /** Used to override the default configuration. */\n  config?: GetFileConfig;\n}\n\nexport interface TestTableItem {\n  /** The name of the test. This is used to derive the replay id. */\n  name?: string;\n  /** The parameters to the test. Use pydantic models. */\n  parameters?: Record<string, unknown>;\n  /** Expects an exception for MLDev matching the string. */\n  exceptionIfMldev?: string;\n  /** Expects an exception for Vertex matching the string. */\n  exceptionIfVertex?: string;\n  /** Use if you don't want to use the default replay id which is derived from the test name. */\n  overrideReplayId?: string;\n  /** True if the parameters contain an unsupported union type. This test  will be skipped for languages that do not support the union type. */\n  hasUnion?: boolean;\n  /** When set to a reason string, this test will be skipped in the API mode. Use this flag for tests that can not be reproduced with the real API. E.g. a test that deletes a resource. */\n  skipInApiMode?: string;\n}\n\nexport interface TestTableFile {\n  comment?: string;\n  testMethod?: string;\n  parameterNames?: string[];\n  testTable?: TestTableItem[];\n}\n\n/** Represents a single request in a replay. */\nexport interface ReplayRequest {\n  method?: string;\n  url?: string;\n  headers?: Record<string, string>;\n  bodySegments?: Record<string, unknown>[];\n}\n\n/** Represents a single response in a replay. */\nexport class ReplayResponse {\n  statusCode?: number;\n  headers?: Record<string, string>;\n  bodySegments?: Record<string, unknown>[];\n  sdkResponseSegments?: Record<string, unknown>[];\n}\n\n/** Represents a single interaction, request and response in a replay. */\nexport interface ReplayInteraction {\n  request?: ReplayRequest;\n  response?: ReplayResponse;\n}\n\n/** Represents a recorded session. */\nexport interface ReplayFile {\n  replayId?: string;\n  interactions?: ReplayInteraction[];\n}\n\n/** Used to override the default configuration. */\nexport interface UploadFileConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** The name of the file in the destination (e.g., 'files/sample-image'. If not provided one will be generated. */\n  name?: string;\n  /** mime_type: The MIME type of the file. If not provided, it will be inferred from the file extension. */\n  mimeType?: string;\n  /** Optional display name of the file. */\n  displayName?: string;\n}\n\n/** Used to override the default configuration. */\nexport interface DownloadFileConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n}\n\n/** Configuration for upscaling an image.\n\n  For more information on this configuration, refer to\n  the `Imagen API reference documentation\n  <https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/imagen-api>`_.\n   */\nexport interface UpscaleImageConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** Whether to include a reason for filtered-out images in the\n      response. */\n  includeRaiReason?: boolean;\n  /** The image format that the output should be saved as. */\n  outputMimeType?: string;\n  /** The level of compression if the ``output_mime_type`` is\n      ``image/jpeg``. */\n  outputCompressionQuality?: number;\n}\n\n/** User-facing config UpscaleImageParameters. */\nexport interface UpscaleImageParameters {\n  /** The model to use. */\n  model: string;\n  /** The input image to upscale. */\n  image: Image;\n  /** The factor to upscale the image (x2 or x4). */\n  upscaleFactor: string;\n  /** Configuration for upscaling. */\n  config?: UpscaleImageConfig;\n}\n\n/** A raw reference image.\n\n  A raw reference image represents the base image to edit, provided by the user.\n  It can optionally be provided in addition to a mask reference image or\n  a style reference image.\n   */\nexport interface RawReferenceImage {\n  /** The reference image for the editing operation. */\n  referenceImage?: Image;\n  /** The id of the reference image. */\n  referenceId?: number;\n  /** The type of the reference image. Only set by the SDK. */\n  referenceType?: string;\n}\n\n/** Configuration for a Mask reference image. */\nexport interface MaskReferenceConfig {\n  /** Prompts the model to generate a mask instead of you needing to\n      provide one (unless MASK_MODE_USER_PROVIDED is used). */\n  maskMode?: MaskReferenceMode;\n  /** A list of up to 5 class ids to use for semantic segmentation.\n      Automatically creates an image mask based on specific objects. */\n  segmentationClasses?: number[];\n  /** Dilation percentage of the mask provided.\n      Float between 0 and 1. */\n  maskDilation?: number;\n}\n\n/** A mask reference image.\n\n  This encapsulates either a mask image provided by the user and configs for\n  the user provided mask, or only config parameters for the model to generate\n  a mask.\n\n  A mask image is an image whose non-zero values indicate where to edit the base\n  image. If the user provides a mask image, the mask must be in the same\n  dimensions as the raw image.\n   */\nexport interface MaskReferenceImage {\n  /** The reference image for the editing operation. */\n  referenceImage?: Image;\n  /** The id of the reference image. */\n  referenceId?: number;\n  /** The type of the reference image. Only set by the SDK. */\n  referenceType?: string;\n  /** Configuration for the mask reference image. */\n  config?: MaskReferenceConfig;\n}\n\n/** Configuration for a Control reference image. */\nexport interface ControlReferenceConfig {\n  /** The type of control reference image to use. */\n  controlType?: ControlReferenceType;\n  /** Defaults to False. When set to True, the control image will be\n      computed by the model based on the control type. When set to False,\n      the control image must be provided by the user. */\n  enableControlImageComputation?: boolean;\n}\n\n/** A control reference image.\n\n  The image of the control reference image is either a control image provided\n  by the user, or a regular image which the backend will use to generate a\n  control image of. In the case of the latter, the\n  enable_control_image_computation field in the config should be set to True.\n\n  A control image is an image that represents a sketch image of areas for the\n  model to fill in based on the prompt.\n   */\nexport interface ControlReferenceImage {\n  /** The reference image for the editing operation. */\n  referenceImage?: Image;\n  /** The id of the reference image. */\n  referenceId?: number;\n  /** The type of the reference image. Only set by the SDK. */\n  referenceType?: string;\n  /** Configuration for the control reference image. */\n  config?: ControlReferenceConfig;\n}\n\n/** Configuration for a Style reference image. */\nexport interface StyleReferenceConfig {\n  /** A text description of the style to use for the generated image. */\n  styleDescription?: string;\n}\n\n/** A style reference image.\n\n  This encapsulates a style reference image provided by the user, and\n  additionally optional config parameters for the style reference image.\n\n  A raw reference image can also be provided as a destination for the style to\n  be applied to.\n   */\nexport interface StyleReferenceImage {\n  /** The reference image for the editing operation. */\n  referenceImage?: Image;\n  /** The id of the reference image. */\n  referenceId?: number;\n  /** The type of the reference image. Only set by the SDK. */\n  referenceType?: string;\n  /** Configuration for the style reference image. */\n  config?: StyleReferenceConfig;\n}\n\n/** Configuration for a Subject reference image. */\nexport interface SubjectReferenceConfig {\n  /** The subject type of a subject reference image. */\n  subjectType?: SubjectReferenceType;\n  /** Subject description for the image. */\n  subjectDescription?: string;\n}\n\n/** A subject reference image.\n\n  This encapsulates a subject reference image provided by the user, and\n  additionally optional config parameters for the subject reference image.\n\n  A raw reference image can also be provided as a destination for the subject to\n  be applied to.\n   */\nexport interface SubjectReferenceImage {\n  /** The reference image for the editing operation. */\n  referenceImage?: Image;\n  /** The id of the reference image. */\n  referenceId?: number;\n  /** The type of the reference image. Only set by the SDK. */\n  referenceType?: string;\n  /** Configuration for the subject reference image. */\n  config?: SubjectReferenceConfig;\n}\n\n/** Sent in response to a `LiveGenerateContentSetup` message from the client. */\nexport interface LiveServerSetupComplete {}\n\n/** Incremental server update generated by the model in response to client messages.\n\n  Content is generated as quickly as possible, and not in real time. Clients\n  may choose to buffer and play it out in real time.\n   */\nexport interface LiveServerContent {\n  /** The content that the model has generated as part of the current conversation with the user. */\n  modelTurn?: Content;\n  /** If true, indicates that the model is done generating. Generation will only start in response to additional client messages. Can be set alongside `content`, indicating that the `content` is the last in the turn. */\n  turnComplete?: boolean;\n  /** If true, indicates that a client message has interrupted current model generation. If the client is playing out the content in realtime, this is a good signal to stop and empty the current queue. */\n  interrupted?: boolean;\n}\n\n/** Request for the client to execute the `function_calls` and return the responses with the matching `id`s. */\nexport interface LiveServerToolCall {\n  /** The function call to be executed. */\n  functionCalls?: FunctionCall[];\n}\n\n/** Notification for the client that a previously issued `ToolCallMessage` with the specified `id`s should have been not executed and should be cancelled.\n\n  If there were side-effects to those tool calls, clients may attempt to undo\n  the tool calls. This message occurs only in cases where the clients interrupt\n  server turns.\n   */\nexport interface LiveServerToolCallCancellation {\n  /** The ids of the tool calls to be cancelled. */\n  ids?: string[];\n}\n\n/** Response message for API call. */\nexport interface LiveServerMessage {\n  /** Sent in response to a `LiveClientSetup` message from the client. */\n  setupComplete?: LiveServerSetupComplete;\n  /** Content generated by the model in response to client messages. */\n  serverContent?: LiveServerContent;\n  /** Request for the client to execute the `function_calls` and return the responses with the matching `id`s. */\n  toolCall?: LiveServerToolCall;\n  /** Notification for the client that a previously issued `ToolCallMessage` with the specified `id`s should have been not executed and should be cancelled. */\n  toolCallCancellation?: LiveServerToolCallCancellation;\n}\n\n/** Message contains configuration that will apply for the duration of the streaming session. */\nexport interface LiveClientSetup {\n  /** \n      The fully qualified name of the publisher model or tuned model endpoint to\n      use.\n       */\n  model?: string;\n  /** The generation configuration for the session.\n\nThe following fields are supported:\n- `response_logprobs`\n- `response_mime_type`\n- `logprobs`\n- `response_schema`\n- `stop_sequence`\n- `routing_config`\n- `audio_timestamp`\n       */\n  generationConfig?: GenerationConfig;\n  /** The user provided system instructions for the model.\n      Note: only text should be used in parts and content in each part will be\n      in a separate paragraph. */\n  systemInstruction?: Content;\n  /**  A list of `Tools` the model may use to generate the next response.\n\n      A `Tool` is a piece of code that enables the system to interact with\n      external systems to perform an action, or set of actions, outside of\n      knowledge and scope of the model. */\n  tools?: ToolListUnion;\n}\n\n/** Incremental update of the current conversation delivered from the client.\n\n  All the content here will unconditionally be appended to the conversation\n  history and used as part of the prompt to the model to generate content.\n\n  A message here will interrupt any current model generation.\n   */\nexport interface LiveClientContent {\n  /** The content appended to the current conversation with the model.\n\n      For single-turn queries, this is a single instance. For multi-turn\n      queries, this is a repeated field that contains conversation history and\n      latest request.\n       */\n  turns?: Content[];\n  /** If true, indicates that the server content generation should start with\n  the currently accumulated prompt. Otherwise, the server will await\n  additional messages before starting generation. */\n  turnComplete?: boolean;\n}\n\n/** User input that is sent in real time.\n\n  This is different from `ClientContentUpdate` in a few ways:\n\n    - Can be sent continuously without interruption to model generation.\n    - If there is a need to mix data interleaved across the\n      `ClientContentUpdate` and the `RealtimeUpdate`, server attempts to\n      optimize for best response, but there are no guarantees.\n    - End of turn is not explicitly specified, but is rather derived from user\n      activity (for example, end of speech).\n    - Even before the end of turn, the data is processed incrementally\n      to optimize for a fast start of the response from the model.\n    - Is always assumed to be the user's input (cannot be used to populate\n      conversation history).\n   */\nexport interface LiveClientRealtimeInput {\n  /** Inlined bytes data for media input. */\n  mediaChunks?: Blob[];\n}\n\n/** Client generated response to a `ToolCall` received from the server.\n\n  Individual `FunctionResponse` objects are matched to the respective\n  `FunctionCall` objects by the `id` field.\n\n  Note that in the unary and server-streaming GenerateContent APIs function\n  calling happens by exchanging the `Content` parts, while in the bidi\n  GenerateContent APIs function calling happens over this dedicated set of\n  messages.\n   */\nexport class LiveClientToolResponse {\n  /** The response to the function calls. */\n  functionResponses?: FunctionResponse[];\n}\n\n/** Messages sent by the client in the API call. */\nexport interface LiveClientMessage {\n  /** Message to be sent by the system when connecting to the API. SDK users should not send this message. */\n  setup?: LiveClientSetup;\n  /** Incremental update of the current conversation delivered from the client. */\n  clientContent?: LiveClientContent;\n  /** User input that is sent in real time. */\n  realtimeInput?: LiveClientRealtimeInput;\n  /** Response to a `ToolCallMessage` received from the server. */\n  toolResponse?: LiveClientToolResponse;\n}\n\n/** Session config for the API connection. */\nexport interface LiveConnectConfig {\n  /** The generation configuration for the session. */\n  generationConfig?: GenerationConfig;\n  /** The requested modalities of the response. Represents the set of\n      modalities that the model can return. Defaults to AUDIO if not specified.\n       */\n  responseModalities?: Modality[];\n  /** The speech generation configuration.\n   */\n  speechConfig?: SpeechConfig;\n  /** The user provided system instructions for the model.\n      Note: only text should be used in parts and content in each part will be\n      in a separate paragraph. */\n  systemInstruction?: Content;\n  /** A list of `Tools` the model may use to generate the next response.\n\n      A `Tool` is a piece of code that enables the system to interact with\n      external systems to perform an action, or set of actions, outside of\n      knowledge and scope of the model. */\n  tools?: ToolListUnion;\n}\n\n/** Parameters for connecting to the live API. */\nexport interface LiveConnectParameters {\n  /** ID of the model to use. For a list of models, see `Google models\n    <https://cloud.google.com/vertex-ai/generative-ai/docs/learn/models>`_. */\n  model: string;\n  /** callbacks */\n  callbacks: LiveCallbacks;\n  /** Optional configuration parameters for the request.\n   */\n  config?: LiveConnectConfig;\n}\n\n/** Parameters for initializing a new chat session.\n\n  These parameters are used when creating a chat session with the\n  `chats.create()` method.\n   */\nexport interface CreateChatParameters {\n  /** The name of the model to use for the chat session.\n\n      For example: 'gemini-2.0-flash', 'gemini-1.5-pro', etc. See gemini API\n      docs to find the available models.\n       */\n  model: string;\n  /** Config for the entire chat session.\n\n      This config applies to all requests within the session\n      unless overridden by a per-request `config` in `SendMessageParameters`.\n       */\n  config?: GenerateContentConfig;\n  /** The initial conversation history for the chat session.\n\n      This allows you to start the chat with a pre-existing history. The history\n      must be a list of `Content` alternating between 'user' and 'model' roles.\n      It should start with a 'user' message.\n       */\n  history?: Content[];\n}\n\n/** Parameters for sending a message within a chat session.\n\n  These parameters are used with the `chat.sendMessage()` method.\n   */\nexport interface SendMessageParameters {\n  /** The message to send to the model.\n\n      The SDK will combine all parts into a single 'user' content to send to\n      the model.\n       */\n  message: PartListUnion;\n  /**  Config for this specific request.\n\n      Please note that the per-request config does not change the chat level\n      config, nor inherit from it. If you intend to use some values from the\n      chat's default config, you must explicitly copy them into this per-request\n      config.\n       */\n  config?: GenerateContentConfig;\n}\n\n/** Parameters for sending client content to the live API. */\nexport interface SessionSendClientContentParameters {\n  /** Client content to send to the session. */\n  turns?: ContentListUnion;\n  /** If true, indicates that the server content generation should start with\n  the currently accumulated prompt. Otherwise, the server will await\n  additional messages before starting generation. */\n  turnComplete?: boolean;\n}\n\n/** Parameters for sending realtime input to the live API. */\nexport interface SessionSendRealtimeInputParameters {\n  /** Realtime input to send to the session. */\n  media: Blob;\n}\n\n/** Parameters for sending tool responses to the live API. */\nexport class SessionSendToolResponseParameters {\n  /** Tool responses to send to the session. */\n  functionResponses: FunctionResponse | FunctionResponse[] = [];\n}\n\nexport type PartUnion = Part | string;\n\nexport type PartListUnion = PartUnion[] | PartUnion;\n\nexport type ContentUnion = Content | PartUnion[] | PartUnion;\n\nexport type ContentListUnion = ContentUnion[] | ContentUnion;\n\nexport type SchemaUnion = Schema;\n\nexport type SpeechConfigUnion = SpeechConfig | string;\n\nexport type ToolListUnion = Tool[];\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Code generated by the Google Gen AI SDK generator DO NOT EDIT.\n\nimport {ApiClient} from './_api_client';\nimport * as common from './_common';\nimport {BaseModule} from './_common';\nimport * as t from './_transformers';\nimport {PagedItem, Pager} from './pagers';\nimport * as types from './types';\n\nexport class Caches extends BaseModule {\n  constructor(private readonly apiClient: ApiClient) {\n    super();\n  }\n\n  /**\n   * Lists cached content configurations.\n   *\n   * @param params - The parameters for the list request.\n   * @return The paginated results of the list of cached contents.\n   *\n   * @example\n   * ```ts\n   * const cachedContents = await ai.caches.list({config: {'pageSize': 2}});\n   * for (const cachedContent of cachedContents) {\n   *   console.log(cachedContent);\n   * }\n   * ```\n   */\n  list = async (\n    params: types.ListCachedContentsParameters = {},\n  ): Promise<Pager<types.CachedContent>> => {\n    return new Pager<types.CachedContent>(\n      PagedItem.PAGED_ITEM_CACHED_CONTENTS,\n      (x: types.ListCachedContentsParameters) => this.listInternal(x),\n      await this.listInternal(params),\n      params,\n    );\n  };\n\n  /**\n   * Creates a cached contents resource.\n   *\n   * @param params - The parameters for the create request.\n   * @return The created cached content.\n   *\n   * @example\n   * ```ts\n   * const contents = ...; // Initialize the content to cache.\n   * const response = await ai.caches.create({\n   *   model: 'gemini-2.0-flash',\n   *   config: {\n   *    'contents': contents,\n   *    'displayName': 'test cache',\n   *    'systemInstruction': 'What is the sum of the two pdfs?',\n   *    'ttl': '86400s',\n   *  }\n   * });\n   * ```\n   */\n  async create(\n    params: types.CreateCachedContentParameters,\n  ): Promise<types.CachedContent> {\n    let response: Promise<types.CachedContent>;\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = createCachedContentParametersToVertex(\n        this.apiClient,\n        params,\n      );\n      path = common.formatMap(\n        'cachedContents',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'POST',\n          httpOptions: params.config?.httpOptions,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.CachedContent>;\n\n      return response.then((apiResponse) => {\n        const resp = cachedContentFromVertex(this.apiClient, apiResponse);\n\n        return resp as types.CachedContent;\n      });\n    } else {\n      const body = createCachedContentParametersToMldev(this.apiClient, params);\n      path = common.formatMap(\n        'cachedContents',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'POST',\n          httpOptions: params.config?.httpOptions,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.CachedContent>;\n\n      return response.then((apiResponse) => {\n        const resp = cachedContentFromMldev(this.apiClient, apiResponse);\n\n        return resp as types.CachedContent;\n      });\n    }\n  }\n\n  /**\n   * Gets cached content configurations.\n   *\n   * @param params - The parameters for the get request.\n   * @return The cached content.\n   *\n   * @example\n   * ```ts\n   * await ai.caches.get({name: 'gemini-1.5-flash'});\n   * ```\n   */\n  async get(\n    params: types.GetCachedContentParameters,\n  ): Promise<types.CachedContent> {\n    let response: Promise<types.CachedContent>;\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = getCachedContentParametersToVertex(this.apiClient, params);\n      path = common.formatMap(\n        '{name}',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'GET',\n          httpOptions: params.config?.httpOptions,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.CachedContent>;\n\n      return response.then((apiResponse) => {\n        const resp = cachedContentFromVertex(this.apiClient, apiResponse);\n\n        return resp as types.CachedContent;\n      });\n    } else {\n      const body = getCachedContentParametersToMldev(this.apiClient, params);\n      path = common.formatMap(\n        '{name}',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'GET',\n          httpOptions: params.config?.httpOptions,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.CachedContent>;\n\n      return response.then((apiResponse) => {\n        const resp = cachedContentFromMldev(this.apiClient, apiResponse);\n\n        return resp as types.CachedContent;\n      });\n    }\n  }\n\n  /**\n   * Deletes cached content.\n   *\n   * @param params - The parameters for the delete request.\n   * @return The empty response returned by the API.\n   *\n   * @example\n   * ```ts\n   * await ai.caches.delete({name: 'gemini-1.5-flash'});\n   * ```\n   */\n  async delete(\n    params: types.DeleteCachedContentParameters,\n  ): Promise<types.DeleteCachedContentResponse> {\n    let response: Promise<types.DeleteCachedContentResponse>;\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = deleteCachedContentParametersToVertex(\n        this.apiClient,\n        params,\n      );\n      path = common.formatMap(\n        '{name}',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'DELETE',\n          httpOptions: params.config?.httpOptions,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.DeleteCachedContentResponse>;\n\n      return response.then((apiResponse) => {\n        const resp = deleteCachedContentResponseFromVertex(\n          this.apiClient,\n          apiResponse,\n        );\n        const typedResp = new types.DeleteCachedContentResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    } else {\n      const body = deleteCachedContentParametersToMldev(this.apiClient, params);\n      path = common.formatMap(\n        '{name}',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'DELETE',\n          httpOptions: params.config?.httpOptions,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.DeleteCachedContentResponse>;\n\n      return response.then((apiResponse) => {\n        const resp = deleteCachedContentResponseFromMldev(\n          this.apiClient,\n          apiResponse,\n        );\n        const typedResp = new types.DeleteCachedContentResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    }\n  }\n\n  /**\n   * Updates cached content configurations.\n   *\n   * @param params - The parameters for the update request.\n   * @return The updated cached content.\n   *\n   * @example\n   * ```ts\n   * const response = await ai.caches.update({\n   *   name: 'gemini-1.5-flash',\n   *   config: {'ttl': '7600s'}\n   * });\n   * ```\n   */\n  async update(\n    params: types.UpdateCachedContentParameters,\n  ): Promise<types.CachedContent> {\n    let response: Promise<types.CachedContent>;\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = updateCachedContentParametersToVertex(\n        this.apiClient,\n        params,\n      );\n      path = common.formatMap(\n        '{name}',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'PATCH',\n          httpOptions: params.config?.httpOptions,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.CachedContent>;\n\n      return response.then((apiResponse) => {\n        const resp = cachedContentFromVertex(this.apiClient, apiResponse);\n\n        return resp as types.CachedContent;\n      });\n    } else {\n      const body = updateCachedContentParametersToMldev(this.apiClient, params);\n      path = common.formatMap(\n        '{name}',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'PATCH',\n          httpOptions: params.config?.httpOptions,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.CachedContent>;\n\n      return response.then((apiResponse) => {\n        const resp = cachedContentFromMldev(this.apiClient, apiResponse);\n\n        return resp as types.CachedContent;\n      });\n    }\n  }\n\n  private async listInternal(\n    params: types.ListCachedContentsParameters,\n  ): Promise<types.ListCachedContentsResponse> {\n    let response: Promise<types.ListCachedContentsResponse>;\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = listCachedContentsParametersToVertex(this.apiClient, params);\n      path = common.formatMap(\n        'cachedContents',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'GET',\n          httpOptions: params.config?.httpOptions,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.ListCachedContentsResponse>;\n\n      return response.then((apiResponse) => {\n        const resp = listCachedContentsResponseFromVertex(\n          this.apiClient,\n          apiResponse,\n        );\n        const typedResp = new types.ListCachedContentsResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    } else {\n      const body = listCachedContentsParametersToMldev(this.apiClient, params);\n      path = common.formatMap(\n        'cachedContents',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'GET',\n          httpOptions: params.config?.httpOptions,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.ListCachedContentsResponse>;\n\n      return response.then((apiResponse) => {\n        const resp = listCachedContentsResponseFromMldev(\n          this.apiClient,\n          apiResponse,\n        );\n        const typedResp = new types.ListCachedContentsResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    }\n  }\n}\n\nfunction partToMldev(\n  apiClient: ApiClient,\n  fromObject: types.Part,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (common.getValueByPath(fromObject, ['videoMetadata']) !== undefined) {\n    throw new Error('videoMetadata parameter is not supported in Gemini API.');\n  }\n\n  const fromThought = common.getValueByPath(fromObject, ['thought']);\n  if (fromThought != null) {\n    common.setValueByPath(toObject, ['thought'], fromThought);\n  }\n\n  const fromCodeExecutionResult = common.getValueByPath(fromObject, [\n    'codeExecutionResult',\n  ]);\n  if (fromCodeExecutionResult != null) {\n    common.setValueByPath(\n      toObject,\n      ['codeExecutionResult'],\n      fromCodeExecutionResult,\n    );\n  }\n\n  const fromExecutableCode = common.getValueByPath(fromObject, [\n    'executableCode',\n  ]);\n  if (fromExecutableCode != null) {\n    common.setValueByPath(toObject, ['executableCode'], fromExecutableCode);\n  }\n\n  const fromFileData = common.getValueByPath(fromObject, ['fileData']);\n  if (fromFileData != null) {\n    common.setValueByPath(toObject, ['fileData'], fromFileData);\n  }\n\n  const fromFunctionCall = common.getValueByPath(fromObject, ['functionCall']);\n  if (fromFunctionCall != null) {\n    common.setValueByPath(toObject, ['functionCall'], fromFunctionCall);\n  }\n\n  const fromFunctionResponse = common.getValueByPath(fromObject, [\n    'functionResponse',\n  ]);\n  if (fromFunctionResponse != null) {\n    common.setValueByPath(toObject, ['functionResponse'], fromFunctionResponse);\n  }\n\n  const fromInlineData = common.getValueByPath(fromObject, ['inlineData']);\n  if (fromInlineData != null) {\n    common.setValueByPath(toObject, ['inlineData'], fromInlineData);\n  }\n\n  const fromText = common.getValueByPath(fromObject, ['text']);\n  if (fromText != null) {\n    common.setValueByPath(toObject, ['text'], fromText);\n  }\n\n  return toObject;\n}\n\nfunction partToVertex(\n  apiClient: ApiClient,\n  fromObject: types.Part,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromVideoMetadata = common.getValueByPath(fromObject, [\n    'videoMetadata',\n  ]);\n  if (fromVideoMetadata != null) {\n    common.setValueByPath(toObject, ['videoMetadata'], fromVideoMetadata);\n  }\n\n  const fromThought = common.getValueByPath(fromObject, ['thought']);\n  if (fromThought != null) {\n    common.setValueByPath(toObject, ['thought'], fromThought);\n  }\n\n  const fromCodeExecutionResult = common.getValueByPath(fromObject, [\n    'codeExecutionResult',\n  ]);\n  if (fromCodeExecutionResult != null) {\n    common.setValueByPath(\n      toObject,\n      ['codeExecutionResult'],\n      fromCodeExecutionResult,\n    );\n  }\n\n  const fromExecutableCode = common.getValueByPath(fromObject, [\n    'executableCode',\n  ]);\n  if (fromExecutableCode != null) {\n    common.setValueByPath(toObject, ['executableCode'], fromExecutableCode);\n  }\n\n  const fromFileData = common.getValueByPath(fromObject, ['fileData']);\n  if (fromFileData != null) {\n    common.setValueByPath(toObject, ['fileData'], fromFileData);\n  }\n\n  const fromFunctionCall = common.getValueByPath(fromObject, ['functionCall']);\n  if (fromFunctionCall != null) {\n    common.setValueByPath(toObject, ['functionCall'], fromFunctionCall);\n  }\n\n  const fromFunctionResponse = common.getValueByPath(fromObject, [\n    'functionResponse',\n  ]);\n  if (fromFunctionResponse != null) {\n    common.setValueByPath(toObject, ['functionResponse'], fromFunctionResponse);\n  }\n\n  const fromInlineData = common.getValueByPath(fromObject, ['inlineData']);\n  if (fromInlineData != null) {\n    common.setValueByPath(toObject, ['inlineData'], fromInlineData);\n  }\n\n  const fromText = common.getValueByPath(fromObject, ['text']);\n  if (fromText != null) {\n    common.setValueByPath(toObject, ['text'], fromText);\n  }\n\n  return toObject;\n}\n\n/** @internal */\nexport function contentToMldev(\n  apiClient: ApiClient,\n  fromObject: types.Content,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromParts = common.getValueByPath(fromObject, ['parts']);\n  if (fromParts != null) {\n    if (Array.isArray(fromParts)) {\n      common.setValueByPath(\n        toObject,\n        ['parts'],\n        fromParts.map((item) => {\n          return partToMldev(apiClient, item);\n        }),\n      );\n    } else {\n      common.setValueByPath(toObject, ['parts'], fromParts);\n    }\n  }\n\n  const fromRole = common.getValueByPath(fromObject, ['role']);\n  if (fromRole != null) {\n    common.setValueByPath(toObject, ['role'], fromRole);\n  }\n\n  return toObject;\n}\n\n/** @internal */\nexport function contentToVertex(\n  apiClient: ApiClient,\n  fromObject: types.Content,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromParts = common.getValueByPath(fromObject, ['parts']);\n  if (fromParts != null) {\n    if (Array.isArray(fromParts)) {\n      common.setValueByPath(\n        toObject,\n        ['parts'],\n        fromParts.map((item) => {\n          return partToVertex(apiClient, item);\n        }),\n      );\n    } else {\n      common.setValueByPath(toObject, ['parts'], fromParts);\n    }\n  }\n\n  const fromRole = common.getValueByPath(fromObject, ['role']);\n  if (fromRole != null) {\n    common.setValueByPath(toObject, ['role'], fromRole);\n  }\n\n  return toObject;\n}\n\nfunction schemaToMldev(\n  apiClient: ApiClient,\n  fromObject: types.Schema,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (common.getValueByPath(fromObject, ['example']) !== undefined) {\n    throw new Error('example parameter is not supported in Gemini API.');\n  }\n\n  if (common.getValueByPath(fromObject, ['pattern']) !== undefined) {\n    throw new Error('pattern parameter is not supported in Gemini API.');\n  }\n\n  if (common.getValueByPath(fromObject, ['minimum']) !== undefined) {\n    throw new Error('minimum parameter is not supported in Gemini API.');\n  }\n\n  if (common.getValueByPath(fromObject, ['default']) !== undefined) {\n    throw new Error('default parameter is not supported in Gemini API.');\n  }\n\n  if (common.getValueByPath(fromObject, ['anyOf']) !== undefined) {\n    throw new Error('anyOf parameter is not supported in Gemini API.');\n  }\n\n  if (common.getValueByPath(fromObject, ['maxLength']) !== undefined) {\n    throw new Error('maxLength parameter is not supported in Gemini API.');\n  }\n\n  if (common.getValueByPath(fromObject, ['title']) !== undefined) {\n    throw new Error('title parameter is not supported in Gemini API.');\n  }\n\n  if (common.getValueByPath(fromObject, ['minLength']) !== undefined) {\n    throw new Error('minLength parameter is not supported in Gemini API.');\n  }\n\n  if (common.getValueByPath(fromObject, ['minProperties']) !== undefined) {\n    throw new Error('minProperties parameter is not supported in Gemini API.');\n  }\n\n  if (common.getValueByPath(fromObject, ['maximum']) !== undefined) {\n    throw new Error('maximum parameter is not supported in Gemini API.');\n  }\n\n  if (common.getValueByPath(fromObject, ['maxProperties']) !== undefined) {\n    throw new Error('maxProperties parameter is not supported in Gemini API.');\n  }\n\n  const fromDescription = common.getValueByPath(fromObject, ['description']);\n  if (fromDescription != null) {\n    common.setValueByPath(toObject, ['description'], fromDescription);\n  }\n\n  const fromEnum = common.getValueByPath(fromObject, ['enum']);\n  if (fromEnum != null) {\n    common.setValueByPath(toObject, ['enum'], fromEnum);\n  }\n\n  const fromFormat = common.getValueByPath(fromObject, ['format']);\n  if (fromFormat != null) {\n    common.setValueByPath(toObject, ['format'], fromFormat);\n  }\n\n  const fromItems = common.getValueByPath(fromObject, ['items']);\n  if (fromItems != null) {\n    common.setValueByPath(toObject, ['items'], fromItems);\n  }\n\n  const fromMaxItems = common.getValueByPath(fromObject, ['maxItems']);\n  if (fromMaxItems != null) {\n    common.setValueByPath(toObject, ['maxItems'], fromMaxItems);\n  }\n\n  const fromMinItems = common.getValueByPath(fromObject, ['minItems']);\n  if (fromMinItems != null) {\n    common.setValueByPath(toObject, ['minItems'], fromMinItems);\n  }\n\n  const fromNullable = common.getValueByPath(fromObject, ['nullable']);\n  if (fromNullable != null) {\n    common.setValueByPath(toObject, ['nullable'], fromNullable);\n  }\n\n  const fromProperties = common.getValueByPath(fromObject, ['properties']);\n  if (fromProperties != null) {\n    common.setValueByPath(toObject, ['properties'], fromProperties);\n  }\n\n  const fromPropertyOrdering = common.getValueByPath(fromObject, [\n    'propertyOrdering',\n  ]);\n  if (fromPropertyOrdering != null) {\n    common.setValueByPath(toObject, ['propertyOrdering'], fromPropertyOrdering);\n  }\n\n  const fromRequired = common.getValueByPath(fromObject, ['required']);\n  if (fromRequired != null) {\n    common.setValueByPath(toObject, ['required'], fromRequired);\n  }\n\n  const fromType = common.getValueByPath(fromObject, ['type']);\n  if (fromType != null) {\n    common.setValueByPath(toObject, ['type'], fromType);\n  }\n\n  return toObject;\n}\n\nfunction schemaToVertex(\n  apiClient: ApiClient,\n  fromObject: types.Schema,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromExample = common.getValueByPath(fromObject, ['example']);\n  if (fromExample != null) {\n    common.setValueByPath(toObject, ['example'], fromExample);\n  }\n\n  const fromPattern = common.getValueByPath(fromObject, ['pattern']);\n  if (fromPattern != null) {\n    common.setValueByPath(toObject, ['pattern'], fromPattern);\n  }\n\n  const fromMinimum = common.getValueByPath(fromObject, ['minimum']);\n  if (fromMinimum != null) {\n    common.setValueByPath(toObject, ['minimum'], fromMinimum);\n  }\n\n  const fromDefault = common.getValueByPath(fromObject, ['default']);\n  if (fromDefault != null) {\n    common.setValueByPath(toObject, ['default'], fromDefault);\n  }\n\n  const fromAnyOf = common.getValueByPath(fromObject, ['anyOf']);\n  if (fromAnyOf != null) {\n    common.setValueByPath(toObject, ['anyOf'], fromAnyOf);\n  }\n\n  const fromMaxLength = common.getValueByPath(fromObject, ['maxLength']);\n  if (fromMaxLength != null) {\n    common.setValueByPath(toObject, ['maxLength'], fromMaxLength);\n  }\n\n  const fromTitle = common.getValueByPath(fromObject, ['title']);\n  if (fromTitle != null) {\n    common.setValueByPath(toObject, ['title'], fromTitle);\n  }\n\n  const fromMinLength = common.getValueByPath(fromObject, ['minLength']);\n  if (fromMinLength != null) {\n    common.setValueByPath(toObject, ['minLength'], fromMinLength);\n  }\n\n  const fromMinProperties = common.getValueByPath(fromObject, [\n    'minProperties',\n  ]);\n  if (fromMinProperties != null) {\n    common.setValueByPath(toObject, ['minProperties'], fromMinProperties);\n  }\n\n  const fromMaximum = common.getValueByPath(fromObject, ['maximum']);\n  if (fromMaximum != null) {\n    common.setValueByPath(toObject, ['maximum'], fromMaximum);\n  }\n\n  const fromMaxProperties = common.getValueByPath(fromObject, [\n    'maxProperties',\n  ]);\n  if (fromMaxProperties != null) {\n    common.setValueByPath(toObject, ['maxProperties'], fromMaxProperties);\n  }\n\n  const fromDescription = common.getValueByPath(fromObject, ['description']);\n  if (fromDescription != null) {\n    common.setValueByPath(toObject, ['description'], fromDescription);\n  }\n\n  const fromEnum = common.getValueByPath(fromObject, ['enum']);\n  if (fromEnum != null) {\n    common.setValueByPath(toObject, ['enum'], fromEnum);\n  }\n\n  const fromFormat = common.getValueByPath(fromObject, ['format']);\n  if (fromFormat != null) {\n    common.setValueByPath(toObject, ['format'], fromFormat);\n  }\n\n  const fromItems = common.getValueByPath(fromObject, ['items']);\n  if (fromItems != null) {\n    common.setValueByPath(toObject, ['items'], fromItems);\n  }\n\n  const fromMaxItems = common.getValueByPath(fromObject, ['maxItems']);\n  if (fromMaxItems != null) {\n    common.setValueByPath(toObject, ['maxItems'], fromMaxItems);\n  }\n\n  const fromMinItems = common.getValueByPath(fromObject, ['minItems']);\n  if (fromMinItems != null) {\n    common.setValueByPath(toObject, ['minItems'], fromMinItems);\n  }\n\n  const fromNullable = common.getValueByPath(fromObject, ['nullable']);\n  if (fromNullable != null) {\n    common.setValueByPath(toObject, ['nullable'], fromNullable);\n  }\n\n  const fromProperties = common.getValueByPath(fromObject, ['properties']);\n  if (fromProperties != null) {\n    common.setValueByPath(toObject, ['properties'], fromProperties);\n  }\n\n  const fromPropertyOrdering = common.getValueByPath(fromObject, [\n    'propertyOrdering',\n  ]);\n  if (fromPropertyOrdering != null) {\n    common.setValueByPath(toObject, ['propertyOrdering'], fromPropertyOrdering);\n  }\n\n  const fromRequired = common.getValueByPath(fromObject, ['required']);\n  if (fromRequired != null) {\n    common.setValueByPath(toObject, ['required'], fromRequired);\n  }\n\n  const fromType = common.getValueByPath(fromObject, ['type']);\n  if (fromType != null) {\n    common.setValueByPath(toObject, ['type'], fromType);\n  }\n\n  return toObject;\n}\n\nfunction functionDeclarationToMldev(\n  apiClient: ApiClient,\n  fromObject: types.FunctionDeclaration,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (common.getValueByPath(fromObject, ['response']) !== undefined) {\n    throw new Error('response parameter is not supported in Gemini API.');\n  }\n\n  const fromDescription = common.getValueByPath(fromObject, ['description']);\n  if (fromDescription != null) {\n    common.setValueByPath(toObject, ['description'], fromDescription);\n  }\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(toObject, ['name'], fromName);\n  }\n\n  const fromParameters = common.getValueByPath(fromObject, ['parameters']);\n  if (fromParameters != null) {\n    common.setValueByPath(toObject, ['parameters'], fromParameters);\n  }\n\n  return toObject;\n}\n\nfunction functionDeclarationToVertex(\n  apiClient: ApiClient,\n  fromObject: types.FunctionDeclaration,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromResponse = common.getValueByPath(fromObject, ['response']);\n  if (fromResponse != null) {\n    common.setValueByPath(\n      toObject,\n      ['response'],\n      schemaToVertex(apiClient, fromResponse),\n    );\n  }\n\n  const fromDescription = common.getValueByPath(fromObject, ['description']);\n  if (fromDescription != null) {\n    common.setValueByPath(toObject, ['description'], fromDescription);\n  }\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(toObject, ['name'], fromName);\n  }\n\n  const fromParameters = common.getValueByPath(fromObject, ['parameters']);\n  if (fromParameters != null) {\n    common.setValueByPath(toObject, ['parameters'], fromParameters);\n  }\n\n  return toObject;\n}\n\nfunction googleSearchToMldev(\n  apiClient: ApiClient,\n  fromObject: types.GoogleSearch,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  return toObject;\n}\n\nfunction googleSearchToVertex(\n  apiClient: ApiClient,\n  fromObject: types.GoogleSearch,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  return toObject;\n}\n\nfunction dynamicRetrievalConfigToMldev(\n  apiClient: ApiClient,\n  fromObject: types.DynamicRetrievalConfig,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromMode = common.getValueByPath(fromObject, ['mode']);\n  if (fromMode != null) {\n    common.setValueByPath(toObject, ['mode'], fromMode);\n  }\n\n  const fromDynamicThreshold = common.getValueByPath(fromObject, [\n    'dynamicThreshold',\n  ]);\n  if (fromDynamicThreshold != null) {\n    common.setValueByPath(toObject, ['dynamicThreshold'], fromDynamicThreshold);\n  }\n\n  return toObject;\n}\n\nfunction dynamicRetrievalConfigToVertex(\n  apiClient: ApiClient,\n  fromObject: types.DynamicRetrievalConfig,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromMode = common.getValueByPath(fromObject, ['mode']);\n  if (fromMode != null) {\n    common.setValueByPath(toObject, ['mode'], fromMode);\n  }\n\n  const fromDynamicThreshold = common.getValueByPath(fromObject, [\n    'dynamicThreshold',\n  ]);\n  if (fromDynamicThreshold != null) {\n    common.setValueByPath(toObject, ['dynamicThreshold'], fromDynamicThreshold);\n  }\n\n  return toObject;\n}\n\nfunction googleSearchRetrievalToMldev(\n  apiClient: ApiClient,\n  fromObject: types.GoogleSearchRetrieval,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromDynamicRetrievalConfig = common.getValueByPath(fromObject, [\n    'dynamicRetrievalConfig',\n  ]);\n  if (fromDynamicRetrievalConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['dynamicRetrievalConfig'],\n      dynamicRetrievalConfigToMldev(apiClient, fromDynamicRetrievalConfig),\n    );\n  }\n\n  return toObject;\n}\n\nfunction googleSearchRetrievalToVertex(\n  apiClient: ApiClient,\n  fromObject: types.GoogleSearchRetrieval,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromDynamicRetrievalConfig = common.getValueByPath(fromObject, [\n    'dynamicRetrievalConfig',\n  ]);\n  if (fromDynamicRetrievalConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['dynamicRetrievalConfig'],\n      dynamicRetrievalConfigToVertex(apiClient, fromDynamicRetrievalConfig),\n    );\n  }\n\n  return toObject;\n}\n\n/** @internal */\nexport function toolToMldev(\n  apiClient: ApiClient,\n  fromObject: types.Tool,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromFunctionDeclarations = common.getValueByPath(fromObject, [\n    'functionDeclarations',\n  ]);\n  if (fromFunctionDeclarations != null) {\n    if (Array.isArray(fromFunctionDeclarations)) {\n      common.setValueByPath(\n        toObject,\n        ['functionDeclarations'],\n        fromFunctionDeclarations.map((item) => {\n          return functionDeclarationToMldev(apiClient, item);\n        }),\n      );\n    } else {\n      common.setValueByPath(\n        toObject,\n        ['functionDeclarations'],\n        fromFunctionDeclarations,\n      );\n    }\n  }\n\n  if (common.getValueByPath(fromObject, ['retrieval']) !== undefined) {\n    throw new Error('retrieval parameter is not supported in Gemini API.');\n  }\n\n  const fromGoogleSearch = common.getValueByPath(fromObject, ['googleSearch']);\n  if (fromGoogleSearch != null) {\n    common.setValueByPath(\n      toObject,\n      ['googleSearch'],\n      googleSearchToMldev(apiClient, fromGoogleSearch),\n    );\n  }\n\n  const fromGoogleSearchRetrieval = common.getValueByPath(fromObject, [\n    'googleSearchRetrieval',\n  ]);\n  if (fromGoogleSearchRetrieval != null) {\n    common.setValueByPath(\n      toObject,\n      ['googleSearchRetrieval'],\n      googleSearchRetrievalToMldev(apiClient, fromGoogleSearchRetrieval),\n    );\n  }\n\n  const fromCodeExecution = common.getValueByPath(fromObject, [\n    'codeExecution',\n  ]);\n  if (fromCodeExecution != null) {\n    common.setValueByPath(toObject, ['codeExecution'], fromCodeExecution);\n  }\n\n  return toObject;\n}\n\n/** @internal */\nexport function toolToVertex(\n  apiClient: ApiClient,\n  fromObject: types.Tool,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromFunctionDeclarations = common.getValueByPath(fromObject, [\n    'functionDeclarations',\n  ]);\n  if (fromFunctionDeclarations != null) {\n    if (Array.isArray(fromFunctionDeclarations)) {\n      common.setValueByPath(\n        toObject,\n        ['functionDeclarations'],\n        fromFunctionDeclarations.map((item) => {\n          return functionDeclarationToVertex(apiClient, item);\n        }),\n      );\n    } else {\n      common.setValueByPath(\n        toObject,\n        ['functionDeclarations'],\n        fromFunctionDeclarations,\n      );\n    }\n  }\n\n  const fromRetrieval = common.getValueByPath(fromObject, ['retrieval']);\n  if (fromRetrieval != null) {\n    common.setValueByPath(toObject, ['retrieval'], fromRetrieval);\n  }\n\n  const fromGoogleSearch = common.getValueByPath(fromObject, ['googleSearch']);\n  if (fromGoogleSearch != null) {\n    common.setValueByPath(\n      toObject,\n      ['googleSearch'],\n      googleSearchToVertex(apiClient, fromGoogleSearch),\n    );\n  }\n\n  const fromGoogleSearchRetrieval = common.getValueByPath(fromObject, [\n    'googleSearchRetrieval',\n  ]);\n  if (fromGoogleSearchRetrieval != null) {\n    common.setValueByPath(\n      toObject,\n      ['googleSearchRetrieval'],\n      googleSearchRetrievalToVertex(apiClient, fromGoogleSearchRetrieval),\n    );\n  }\n\n  const fromCodeExecution = common.getValueByPath(fromObject, [\n    'codeExecution',\n  ]);\n  if (fromCodeExecution != null) {\n    common.setValueByPath(toObject, ['codeExecution'], fromCodeExecution);\n  }\n\n  return toObject;\n}\n\nfunction functionCallingConfigToMldev(\n  apiClient: ApiClient,\n  fromObject: types.FunctionCallingConfig,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromMode = common.getValueByPath(fromObject, ['mode']);\n  if (fromMode != null) {\n    common.setValueByPath(toObject, ['mode'], fromMode);\n  }\n\n  const fromAllowedFunctionNames = common.getValueByPath(fromObject, [\n    'allowedFunctionNames',\n  ]);\n  if (fromAllowedFunctionNames != null) {\n    common.setValueByPath(\n      toObject,\n      ['allowedFunctionNames'],\n      fromAllowedFunctionNames,\n    );\n  }\n\n  return toObject;\n}\n\nfunction functionCallingConfigToVertex(\n  apiClient: ApiClient,\n  fromObject: types.FunctionCallingConfig,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromMode = common.getValueByPath(fromObject, ['mode']);\n  if (fromMode != null) {\n    common.setValueByPath(toObject, ['mode'], fromMode);\n  }\n\n  const fromAllowedFunctionNames = common.getValueByPath(fromObject, [\n    'allowedFunctionNames',\n  ]);\n  if (fromAllowedFunctionNames != null) {\n    common.setValueByPath(\n      toObject,\n      ['allowedFunctionNames'],\n      fromAllowedFunctionNames,\n    );\n  }\n\n  return toObject;\n}\n\nfunction toolConfigToMldev(\n  apiClient: ApiClient,\n  fromObject: types.ToolConfig,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromFunctionCallingConfig = common.getValueByPath(fromObject, [\n    'functionCallingConfig',\n  ]);\n  if (fromFunctionCallingConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['functionCallingConfig'],\n      functionCallingConfigToMldev(apiClient, fromFunctionCallingConfig),\n    );\n  }\n\n  return toObject;\n}\n\nfunction toolConfigToVertex(\n  apiClient: ApiClient,\n  fromObject: types.ToolConfig,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromFunctionCallingConfig = common.getValueByPath(fromObject, [\n    'functionCallingConfig',\n  ]);\n  if (fromFunctionCallingConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['functionCallingConfig'],\n      functionCallingConfigToVertex(apiClient, fromFunctionCallingConfig),\n    );\n  }\n\n  return toObject;\n}\n\nfunction createCachedContentConfigToMldev(\n  apiClient: ApiClient,\n  fromObject: types.CreateCachedContentConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromTtl = common.getValueByPath(fromObject, ['ttl']);\n  if (parentObject !== undefined && fromTtl != null) {\n    common.setValueByPath(parentObject, ['ttl'], fromTtl);\n  }\n\n  const fromExpireTime = common.getValueByPath(fromObject, ['expireTime']);\n  if (parentObject !== undefined && fromExpireTime != null) {\n    common.setValueByPath(parentObject, ['expireTime'], fromExpireTime);\n  }\n\n  const fromDisplayName = common.getValueByPath(fromObject, ['displayName']);\n  if (parentObject !== undefined && fromDisplayName != null) {\n    common.setValueByPath(parentObject, ['displayName'], fromDisplayName);\n  }\n\n  const fromContents = common.getValueByPath(fromObject, ['contents']);\n  if (parentObject !== undefined && fromContents != null) {\n    if (Array.isArray(fromContents)) {\n      common.setValueByPath(\n        parentObject,\n        ['contents'],\n        t.tContents(\n          apiClient,\n          t.tContents(apiClient, fromContents).map((item) => {\n            return contentToMldev(apiClient, item);\n          }),\n        ),\n      );\n    } else {\n      common.setValueByPath(\n        parentObject,\n        ['contents'],\n        t.tContents(apiClient, fromContents),\n      );\n    }\n  }\n\n  const fromSystemInstruction = common.getValueByPath(fromObject, [\n    'systemInstruction',\n  ]);\n  if (parentObject !== undefined && fromSystemInstruction != null) {\n    common.setValueByPath(\n      parentObject,\n      ['systemInstruction'],\n      contentToMldev(apiClient, t.tContent(apiClient, fromSystemInstruction)),\n    );\n  }\n\n  const fromTools = common.getValueByPath(fromObject, ['tools']);\n  if (parentObject !== undefined && fromTools != null) {\n    if (Array.isArray(fromTools)) {\n      common.setValueByPath(\n        parentObject,\n        ['tools'],\n        fromTools.map((item) => {\n          return toolToMldev(apiClient, item);\n        }),\n      );\n    } else {\n      common.setValueByPath(parentObject, ['tools'], fromTools);\n    }\n  }\n\n  const fromToolConfig = common.getValueByPath(fromObject, ['toolConfig']);\n  if (parentObject !== undefined && fromToolConfig != null) {\n    common.setValueByPath(\n      parentObject,\n      ['toolConfig'],\n      toolConfigToMldev(apiClient, fromToolConfig),\n    );\n  }\n\n  return toObject;\n}\n\nfunction createCachedContentConfigToVertex(\n  apiClient: ApiClient,\n  fromObject: types.CreateCachedContentConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromTtl = common.getValueByPath(fromObject, ['ttl']);\n  if (parentObject !== undefined && fromTtl != null) {\n    common.setValueByPath(parentObject, ['ttl'], fromTtl);\n  }\n\n  const fromExpireTime = common.getValueByPath(fromObject, ['expireTime']);\n  if (parentObject !== undefined && fromExpireTime != null) {\n    common.setValueByPath(parentObject, ['expireTime'], fromExpireTime);\n  }\n\n  const fromDisplayName = common.getValueByPath(fromObject, ['displayName']);\n  if (parentObject !== undefined && fromDisplayName != null) {\n    common.setValueByPath(parentObject, ['displayName'], fromDisplayName);\n  }\n\n  const fromContents = common.getValueByPath(fromObject, ['contents']);\n  if (parentObject !== undefined && fromContents != null) {\n    if (Array.isArray(fromContents)) {\n      common.setValueByPath(\n        parentObject,\n        ['contents'],\n        t.tContents(\n          apiClient,\n          t.tContents(apiClient, fromContents).map((item) => {\n            return contentToVertex(apiClient, item);\n          }),\n        ),\n      );\n    } else {\n      common.setValueByPath(\n        parentObject,\n        ['contents'],\n        t.tContents(apiClient, fromContents),\n      );\n    }\n  }\n\n  const fromSystemInstruction = common.getValueByPath(fromObject, [\n    'systemInstruction',\n  ]);\n  if (parentObject !== undefined && fromSystemInstruction != null) {\n    common.setValueByPath(\n      parentObject,\n      ['systemInstruction'],\n      contentToVertex(apiClient, t.tContent(apiClient, fromSystemInstruction)),\n    );\n  }\n\n  const fromTools = common.getValueByPath(fromObject, ['tools']);\n  if (parentObject !== undefined && fromTools != null) {\n    if (Array.isArray(fromTools)) {\n      common.setValueByPath(\n        parentObject,\n        ['tools'],\n        fromTools.map((item) => {\n          return toolToVertex(apiClient, item);\n        }),\n      );\n    } else {\n      common.setValueByPath(parentObject, ['tools'], fromTools);\n    }\n  }\n\n  const fromToolConfig = common.getValueByPath(fromObject, ['toolConfig']);\n  if (parentObject !== undefined && fromToolConfig != null) {\n    common.setValueByPath(\n      parentObject,\n      ['toolConfig'],\n      toolConfigToVertex(apiClient, fromToolConfig),\n    );\n  }\n\n  return toObject;\n}\n\nfunction createCachedContentParametersToMldev(\n  apiClient: ApiClient,\n  fromObject: types.CreateCachedContentParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(\n      toObject,\n      ['model'],\n      t.tCachesModel(apiClient, fromModel),\n    );\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['config'],\n      createCachedContentConfigToMldev(apiClient, fromConfig, toObject),\n    );\n  }\n\n  return toObject;\n}\n\nfunction createCachedContentParametersToVertex(\n  apiClient: ApiClient,\n  fromObject: types.CreateCachedContentParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(\n      toObject,\n      ['model'],\n      t.tCachesModel(apiClient, fromModel),\n    );\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['config'],\n      createCachedContentConfigToVertex(apiClient, fromConfig, toObject),\n    );\n  }\n\n  return toObject;\n}\n\nfunction getCachedContentParametersToMldev(\n  apiClient: ApiClient,\n  fromObject: types.GetCachedContentParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'name'],\n      t.tCachedContentName(apiClient, fromName),\n    );\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    common.setValueByPath(toObject, ['config'], fromConfig);\n  }\n\n  return toObject;\n}\n\nfunction getCachedContentParametersToVertex(\n  apiClient: ApiClient,\n  fromObject: types.GetCachedContentParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'name'],\n      t.tCachedContentName(apiClient, fromName),\n    );\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    common.setValueByPath(toObject, ['config'], fromConfig);\n  }\n\n  return toObject;\n}\n\nfunction deleteCachedContentParametersToMldev(\n  apiClient: ApiClient,\n  fromObject: types.DeleteCachedContentParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'name'],\n      t.tCachedContentName(apiClient, fromName),\n    );\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    common.setValueByPath(toObject, ['config'], fromConfig);\n  }\n\n  return toObject;\n}\n\nfunction deleteCachedContentParametersToVertex(\n  apiClient: ApiClient,\n  fromObject: types.DeleteCachedContentParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'name'],\n      t.tCachedContentName(apiClient, fromName),\n    );\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    common.setValueByPath(toObject, ['config'], fromConfig);\n  }\n\n  return toObject;\n}\n\nfunction updateCachedContentConfigToMldev(\n  apiClient: ApiClient,\n  fromObject: types.UpdateCachedContentConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromTtl = common.getValueByPath(fromObject, ['ttl']);\n  if (parentObject !== undefined && fromTtl != null) {\n    common.setValueByPath(parentObject, ['ttl'], fromTtl);\n  }\n\n  const fromExpireTime = common.getValueByPath(fromObject, ['expireTime']);\n  if (parentObject !== undefined && fromExpireTime != null) {\n    common.setValueByPath(parentObject, ['expireTime'], fromExpireTime);\n  }\n\n  return toObject;\n}\n\nfunction updateCachedContentConfigToVertex(\n  apiClient: ApiClient,\n  fromObject: types.UpdateCachedContentConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromTtl = common.getValueByPath(fromObject, ['ttl']);\n  if (parentObject !== undefined && fromTtl != null) {\n    common.setValueByPath(parentObject, ['ttl'], fromTtl);\n  }\n\n  const fromExpireTime = common.getValueByPath(fromObject, ['expireTime']);\n  if (parentObject !== undefined && fromExpireTime != null) {\n    common.setValueByPath(parentObject, ['expireTime'], fromExpireTime);\n  }\n\n  return toObject;\n}\n\nfunction updateCachedContentParametersToMldev(\n  apiClient: ApiClient,\n  fromObject: types.UpdateCachedContentParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'name'],\n      t.tCachedContentName(apiClient, fromName),\n    );\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['config'],\n      updateCachedContentConfigToMldev(apiClient, fromConfig, toObject),\n    );\n  }\n\n  return toObject;\n}\n\nfunction updateCachedContentParametersToVertex(\n  apiClient: ApiClient,\n  fromObject: types.UpdateCachedContentParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'name'],\n      t.tCachedContentName(apiClient, fromName),\n    );\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['config'],\n      updateCachedContentConfigToVertex(apiClient, fromConfig, toObject),\n    );\n  }\n\n  return toObject;\n}\n\nfunction listCachedContentsConfigToMldev(\n  apiClient: ApiClient,\n  fromObject: types.ListCachedContentsConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromPageSize = common.getValueByPath(fromObject, ['pageSize']);\n  if (parentObject !== undefined && fromPageSize != null) {\n    common.setValueByPath(parentObject, ['_query', 'pageSize'], fromPageSize);\n  }\n\n  const fromPageToken = common.getValueByPath(fromObject, ['pageToken']);\n  if (parentObject !== undefined && fromPageToken != null) {\n    common.setValueByPath(parentObject, ['_query', 'pageToken'], fromPageToken);\n  }\n\n  return toObject;\n}\n\nfunction listCachedContentsConfigToVertex(\n  apiClient: ApiClient,\n  fromObject: types.ListCachedContentsConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromPageSize = common.getValueByPath(fromObject, ['pageSize']);\n  if (parentObject !== undefined && fromPageSize != null) {\n    common.setValueByPath(parentObject, ['_query', 'pageSize'], fromPageSize);\n  }\n\n  const fromPageToken = common.getValueByPath(fromObject, ['pageToken']);\n  if (parentObject !== undefined && fromPageToken != null) {\n    common.setValueByPath(parentObject, ['_query', 'pageToken'], fromPageToken);\n  }\n\n  return toObject;\n}\n\nfunction listCachedContentsParametersToMldev(\n  apiClient: ApiClient,\n  fromObject: types.ListCachedContentsParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['config'],\n      listCachedContentsConfigToMldev(apiClient, fromConfig, toObject),\n    );\n  }\n\n  return toObject;\n}\n\nfunction listCachedContentsParametersToVertex(\n  apiClient: ApiClient,\n  fromObject: types.ListCachedContentsParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['config'],\n      listCachedContentsConfigToVertex(apiClient, fromConfig, toObject),\n    );\n  }\n\n  return toObject;\n}\n\nfunction cachedContentFromMldev(\n  apiClient: ApiClient,\n  fromObject: types.CachedContent,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(toObject, ['name'], fromName);\n  }\n\n  const fromDisplayName = common.getValueByPath(fromObject, ['displayName']);\n  if (fromDisplayName != null) {\n    common.setValueByPath(toObject, ['displayName'], fromDisplayName);\n  }\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(toObject, ['model'], fromModel);\n  }\n\n  const fromCreateTime = common.getValueByPath(fromObject, ['createTime']);\n  if (fromCreateTime != null) {\n    common.setValueByPath(toObject, ['createTime'], fromCreateTime);\n  }\n\n  const fromUpdateTime = common.getValueByPath(fromObject, ['updateTime']);\n  if (fromUpdateTime != null) {\n    common.setValueByPath(toObject, ['updateTime'], fromUpdateTime);\n  }\n\n  const fromExpireTime = common.getValueByPath(fromObject, ['expireTime']);\n  if (fromExpireTime != null) {\n    common.setValueByPath(toObject, ['expireTime'], fromExpireTime);\n  }\n\n  const fromUsageMetadata = common.getValueByPath(fromObject, [\n    'usageMetadata',\n  ]);\n  if (fromUsageMetadata != null) {\n    common.setValueByPath(toObject, ['usageMetadata'], fromUsageMetadata);\n  }\n\n  return toObject;\n}\n\nfunction cachedContentFromVertex(\n  apiClient: ApiClient,\n  fromObject: types.CachedContent,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(toObject, ['name'], fromName);\n  }\n\n  const fromDisplayName = common.getValueByPath(fromObject, ['displayName']);\n  if (fromDisplayName != null) {\n    common.setValueByPath(toObject, ['displayName'], fromDisplayName);\n  }\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(toObject, ['model'], fromModel);\n  }\n\n  const fromCreateTime = common.getValueByPath(fromObject, ['createTime']);\n  if (fromCreateTime != null) {\n    common.setValueByPath(toObject, ['createTime'], fromCreateTime);\n  }\n\n  const fromUpdateTime = common.getValueByPath(fromObject, ['updateTime']);\n  if (fromUpdateTime != null) {\n    common.setValueByPath(toObject, ['updateTime'], fromUpdateTime);\n  }\n\n  const fromExpireTime = common.getValueByPath(fromObject, ['expireTime']);\n  if (fromExpireTime != null) {\n    common.setValueByPath(toObject, ['expireTime'], fromExpireTime);\n  }\n\n  const fromUsageMetadata = common.getValueByPath(fromObject, [\n    'usageMetadata',\n  ]);\n  if (fromUsageMetadata != null) {\n    common.setValueByPath(toObject, ['usageMetadata'], fromUsageMetadata);\n  }\n\n  return toObject;\n}\n\nfunction deleteCachedContentResponseFromMldev(\n  apiClient: ApiClient,\n  fromObject: types.DeleteCachedContentResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  return toObject;\n}\n\nfunction deleteCachedContentResponseFromVertex(\n  apiClient: ApiClient,\n  fromObject: types.DeleteCachedContentResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  return toObject;\n}\n\nfunction listCachedContentsResponseFromMldev(\n  apiClient: ApiClient,\n  fromObject: types.ListCachedContentsResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromNextPageToken = common.getValueByPath(fromObject, [\n    'nextPageToken',\n  ]);\n  if (fromNextPageToken != null) {\n    common.setValueByPath(toObject, ['nextPageToken'], fromNextPageToken);\n  }\n\n  const fromCachedContents = common.getValueByPath(fromObject, [\n    'cachedContents',\n  ]);\n  if (fromCachedContents != null) {\n    if (Array.isArray(fromCachedContents)) {\n      common.setValueByPath(\n        toObject,\n        ['cachedContents'],\n        fromCachedContents.map((item) => {\n          return cachedContentFromMldev(apiClient, item);\n        }),\n      );\n    } else {\n      common.setValueByPath(toObject, ['cachedContents'], fromCachedContents);\n    }\n  }\n\n  return toObject;\n}\n\nfunction listCachedContentsResponseFromVertex(\n  apiClient: ApiClient,\n  fromObject: types.ListCachedContentsResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromNextPageToken = common.getValueByPath(fromObject, [\n    'nextPageToken',\n  ]);\n  if (fromNextPageToken != null) {\n    common.setValueByPath(toObject, ['nextPageToken'], fromNextPageToken);\n  }\n\n  const fromCachedContents = common.getValueByPath(fromObject, [\n    'cachedContents',\n  ]);\n  if (fromCachedContents != null) {\n    if (Array.isArray(fromCachedContents)) {\n      common.setValueByPath(\n        toObject,\n        ['cachedContents'],\n        fromCachedContents.map((item) => {\n          return cachedContentFromVertex(apiClient, item);\n        }),\n      );\n    } else {\n      common.setValueByPath(toObject, ['cachedContents'], fromCachedContents);\n    }\n  }\n\n  return toObject;\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {ApiClient} from './_api_client';\nimport * as t from './_transformers';\nimport {Models} from './models';\nimport * as types from './types';\n\n/**\n * Returns true if the response is valid, false otherwise.\n */\nfunction isValidResponse(response: types.GenerateContentResponse): boolean {\n  if (response.candidates == undefined || response.candidates.length === 0) {\n    return false;\n  }\n  const content = response.candidates[0]?.content;\n  if (content === undefined) {\n    return false;\n  }\n  return isValidContent(content);\n}\n\nfunction isValidContent(content: types.Content): boolean {\n  if (content.parts === undefined || content.parts.length === 0) {\n    return false;\n  }\n  for (const part of content.parts) {\n    if (part === undefined || Object.keys(part).length === 0) {\n      return false;\n    }\n    if (part.text !== undefined && part.text === '') {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Validates the history contains the correct roles.\n *\n * @remarks\n * Expects the history to start with a user turn and then alternate between\n * user and model turns.\n *\n * @throws Error if the history does not start with a user turn.\n * @throws Error if the history contains an invalid role.\n */\nfunction validateHistory(history: types.Content[]) {\n  // Empty history is valid.\n  if (history.length === 0) {\n    return;\n  }\n  if (history[0].role !== 'user') {\n    throw new Error('History must start with a user turn.');\n  }\n  for (const content of history) {\n    if (content.role !== 'user' && content.role !== 'model') {\n      throw new Error(`Role must be user or model, but got ${content.role}.`);\n    }\n  }\n}\n\n/**\n * Extracts the curated (valid) history from a comprehensive history.\n *\n * @remarks\n * The model may sometimes generate invalid or empty contents(e.g., due to safty\n * filters or recitation). Extracting valid turns from the history\n * ensures that subsequent requests could be accpeted by the model.\n */\nfunction extractCuratedHistory(\n  comprehensiveHistory: types.Content[],\n): types.Content[] {\n  if (comprehensiveHistory === undefined || comprehensiveHistory.length === 0) {\n    return [];\n  }\n  const curatedHistory: types.Content[] = [];\n  const length = comprehensiveHistory.length;\n  let i = 0;\n  let userInput = comprehensiveHistory[0];\n  while (i < length) {\n    if (comprehensiveHistory[i].role === 'user') {\n      userInput = comprehensiveHistory[i];\n      i++;\n    } else {\n      const modelOutput: types.Content[] = [];\n      let isValid = true;\n      while (i < length && comprehensiveHistory[i].role === 'model') {\n        modelOutput.push(comprehensiveHistory[i]);\n        if (isValid && !isValidContent(comprehensiveHistory[i])) {\n          isValid = false;\n        }\n        i++;\n      }\n      if (isValid) {\n        curatedHistory.push(userInput);\n        curatedHistory.push(...modelOutput);\n      }\n    }\n  }\n  return curatedHistory;\n}\n\n/**\n * A utility class to create a chat session.\n */\nexport class Chats {\n  private readonly modelsModule: Models;\n  private readonly apiClient: ApiClient;\n\n  constructor(modelsModule: Models, apiClient: ApiClient) {\n    this.modelsModule = modelsModule;\n    this.apiClient = apiClient;\n  }\n\n  /**\n   * Creates a new chat session.\n   *\n   * @remarks\n   * The config in the params will be used for all requests within the chat\n   * session unless overridden by a per-request `config` in\n   * {@link ./types.SendMessageParameters}.\n   *\n   * @param params - Parameters for creating a chat session.\n   * @returns A new chat session.\n   *\n   * @example\n   * ```ts\n   * const chat = ai.chats.create({\n   *   model: 'gemini-2.0-flash'\n   *   config: {\n   *     temperature: 0.5,\n   *     maxOutputTokens: 1024,\n   *   }\n   * });\n   * ```\n   */\n  create(params: types.CreateChatParameters) {\n    return new Chat(\n      this.apiClient,\n      this.modelsModule,\n      params.model,\n      params.config,\n      params.history,\n    );\n  }\n}\n\n/**\n * Chat session that enables sending messages to the model with previous\n * conversation context.\n *\n * @remarks\n * The session maintains all the turns between user and model.\n */\nexport class Chat {\n  // A promise to represent the current state of the message being sent to the\n  // model.\n  private sendPromise: Promise<void> = Promise.resolve();\n\n  constructor(\n    private readonly apiClient: ApiClient,\n    private readonly modelsModule: Models,\n    private readonly model: string,\n    private readonly config: types.GenerateContentConfig = {},\n    private history: types.Content[] = [],\n  ) {\n    validateHistory(history);\n  }\n\n  /**\n   * Sends a message to the model and returns the response.\n   *\n   * @remarks\n   * This method will wait for the previous message to be processed before\n   * sending the next message.\n   *\n   * @see {@link Chat#sendMessageStream} for streaming method.\n   * @param params - parameters for sending messages within a chat session.\n   * @returns The model's response.\n   *\n   * @example\n   * ```ts\n   * const chat = ai.chats.create({model: 'gemini-2.0-flash'});\n   * const response = await chat.sendMessage({\n   *   message: 'Why is the sky blue?'\n   * });\n   * console.log(response.text);\n   * ```\n   */\n  async sendMessage(\n    params: types.SendMessageParameters,\n  ): Promise<types.GenerateContentResponse> {\n    await this.sendPromise;\n    const inputContent = t.tContent(this.apiClient, params.message);\n    const responsePromise = this.modelsModule.generateContent({\n      model: this.model,\n      contents: this.getHistory(true).concat(inputContent),\n      config: params.config ?? this.config,\n    });\n    this.sendPromise = (async () => {\n      const response = await responsePromise;\n      const outputContent = response.candidates?.[0]?.content;\n      const modelOutput = outputContent ? [outputContent] : [];\n      this.recordHistory(inputContent, modelOutput);\n      return;\n    })();\n    await this.sendPromise;\n    return responsePromise;\n  }\n\n  /**\n   * Sends a message to the model and returns the response in chunks.\n   *\n   * @remarks\n   * This method will wait for the previous message to be processed before\n   * sending the next message.\n   *\n   * @see {@link Chat#sendMessage} for non-streaming method.\n   * @param params - parameters for sending the message.\n   * @return The model's response.\n   *\n   * @example\n   * ```ts\n   * const chat = ai.chats.create({model: 'gemini-2.0-flash'});\n   * const response = await chat.sendMessageStream({\n   *   message: 'Why is the sky blue?'\n   * });\n   * for await (const chunk of response) {\n   *   console.log(chunk.text);\n   * }\n   * ```\n   */\n  async sendMessageStream(\n    params: types.SendMessageParameters,\n  ): Promise<AsyncGenerator<types.GenerateContentResponse>> {\n    await this.sendPromise;\n    const inputContent = t.tContent(this.apiClient, params.message);\n    const streamResponse = this.modelsModule.generateContentStream({\n      model: this.model,\n      contents: this.getHistory(true).concat(inputContent),\n      config: params.config ?? this.config,\n    });\n    this.sendPromise = streamResponse.then(() => undefined);\n    const response = await streamResponse;\n    const result = this.processStreamResponse(response, inputContent);\n    return result;\n  }\n\n  /**\n   * Returns the chat history.\n   *\n   * @remarks\n   * The history is a list of contents alternating between user and model.\n   *\n   * There are two types of history:\n   * - The `curated history` contains only the valid turns between user and\n   * model, which will be included in the subsequent requests sent to the model.\n   * - The `comprehensive history` contains all turns, including invalid or\n   *   empty model outputs, providing a complete record of the history.\n   *\n   * The history is updated after receiving the response from the model,\n   * for streaming response, it means receiving the last chunk of the response.\n   *\n   * The `comprehensive history` is returned by default. To get the `curated\n   * history`, set the `curated` parameter to `true`.\n   *\n   * @param curated - whether to return the curated history or the comprehensive\n   *     history.\n   * @return History contents alternating between user and model for the entire\n   *     chat session.\n   */\n  getHistory(curated: boolean = false): types.Content[] {\n    return curated ? extractCuratedHistory(this.history) : this.history;\n  }\n\n  private async *processStreamResponse(\n    streamResponse: AsyncGenerator<types.GenerateContentResponse>,\n    inputContent: types.Content,\n  ) {\n    const outputContent: types.Content[] = [];\n    for await (const chunk of streamResponse) {\n      if (isValidResponse(chunk)) {\n        const content = chunk.candidates?.[0]?.content;\n        if (content !== undefined) {\n          outputContent.push(content);\n        }\n      }\n      yield chunk;\n    }\n    this.recordHistory(inputContent, outputContent);\n  }\n\n  private recordHistory(\n    userInput: types.Content,\n    modelOutput: types.Content[],\n  ) {\n    let outputContents: types.Content[] = [];\n    if (\n      modelOutput.length > 0 &&\n      modelOutput.every((content) => content.role === 'model')\n    ) {\n      outputContents = modelOutput;\n    } else {\n      // Appends an empty content when model returns empty response, so that the\n      // history is always alternating between user and model.\n      outputContents.push({\n        role: 'model',\n        parts: [],\n      } as types.Content);\n    }\n    this.history.push(userInput);\n    this.history.push(...outputContents);\n  }\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Code generated by the Google Gen AI SDK generator DO NOT EDIT.\n\nimport {ApiClient} from './_api_client';\nimport * as common from './_common';\nimport {BaseModule} from './_common';\nimport * as t from './_transformers';\nimport * as types from './types';\n\nexport class Models extends BaseModule {\n  constructor(private readonly apiClient: ApiClient) {\n    super();\n  }\n\n  /**\n   * Makes an API request to generate content with a given model.\n   *\n   * For the `model` parameter, supported formats for Vertex AI API include:\n   * - The Gemini model ID, for example: 'gemini-2.0-flash'\n   * - The full resource name starts with 'projects/', for example:\n   *  'projects/my-project-id/locations/us-central1/publishers/google/models/gemini-2.0-flash'\n   * - The partial resource name with 'publishers/', for example:\n   *  'publishers/google/models/gemini-2.0-flash' or\n   *  'publishers/meta/models/llama-3.1-405b-instruct-maas'\n   * - `/` separated publisher and model name, for example:\n   * 'google/gemini-2.0-flash' or 'meta/llama-3.1-405b-instruct-maas'\n   *\n   * For the `model` parameter, supported formats for Gemini API include:\n   * - The Gemini model ID, for example: 'gemini-2.0-flash'\n   * - The model name starts with 'models/', for example:\n   *  'models/gemini-2.0-flash'\n   * - For tuned models, the model name starts with 'tunedModels/',\n   * for example:\n   * 'tunedModels/1234567890123456789'\n   *\n   * Some models support multimodal input and output.\n   *\n   * @param params - The parameters for generating content.\n   * @return The response from generating content.\n   *\n   * @example\n   * ```ts\n   * const response = await ai.models.generateContent({\n   *   model: 'gemini-2.0-flash',\n   *   contents: 'why is the sky blue?',\n   *   config: {\n   *     candidateCount: 2,\n   *   }\n   * });\n   * console.log(response);\n   * ```\n   */\n  generateContent = async (\n    params: types.GenerateContentParameters,\n  ): Promise<types.GenerateContentResponse> => {\n    return await this.generateContentInternal(params);\n  };\n\n  /**\n   * Makes an API request to generate content with a given model and yields the\n   * response in chunks.\n   *\n   * For the `model` parameter, supported formats for Vertex AI API include:\n   * - The Gemini model ID, for example: 'gemini-2.0-flash'\n   * - The full resource name starts with 'projects/', for example:\n   *  'projects/my-project-id/locations/us-central1/publishers/google/models/gemini-2.0-flash'\n   * - The partial resource name with 'publishers/', for example:\n   *  'publishers/google/models/gemini-2.0-flash' or\n   *  'publishers/meta/models/llama-3.1-405b-instruct-maas'\n   * - `/` separated publisher and model name, for example:\n   * 'google/gemini-2.0-flash' or 'meta/llama-3.1-405b-instruct-maas'\n   *\n   * For the `model` parameter, supported formats for Gemini API include:\n   * - The Gemini model ID, for example: 'gemini-2.0-flash'\n   * - The model name starts with 'models/', for example:\n   *  'models/gemini-2.0-flash'\n   * - For tuned models, the model name starts with 'tunedModels/',\n   * for example:\n   *  'tunedModels/1234567890123456789'\n   *\n   * Some models support multimodal input and output.\n   *\n   * @param params - The parameters for generating content with streaming response.\n   * @return The response from generating content.\n   *\n   * @example\n   * ```ts\n   * const response = await ai.models.generateContentStream({\n   *   model: 'gemini-2.0-flash',\n   *   contents: 'why is the sky blue?',\n   *   config: {\n   *     maxOutputTokens: 200,\n   *   }\n   * });\n   * for await (const chunk of response) {\n   *   console.log(chunk);\n   * }\n   * ```\n   */\n  generateContentStream = async (\n    params: types.GenerateContentParameters,\n  ): Promise<AsyncGenerator<types.GenerateContentResponse>> => {\n    return await this.generateContentStreamInternal(params);\n  };\n\n  private async generateContentInternal(\n    params: types.GenerateContentParameters,\n  ): Promise<types.GenerateContentResponse> {\n    let response: Promise<types.GenerateContentResponse>;\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = generateContentParametersToVertex(this.apiClient, params);\n      path = common.formatMap(\n        '{model}:generateContent',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'POST',\n          httpOptions: params.config?.httpOptions,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.GenerateContentResponse>;\n\n      return response.then((apiResponse) => {\n        const resp = generateContentResponseFromVertex(\n          this.apiClient,\n          apiResponse,\n        );\n        const typedResp = new types.GenerateContentResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    } else {\n      const body = generateContentParametersToMldev(this.apiClient, params);\n      path = common.formatMap(\n        '{model}:generateContent',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'POST',\n          httpOptions: params.config?.httpOptions,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.GenerateContentResponse>;\n\n      return response.then((apiResponse) => {\n        const resp = generateContentResponseFromMldev(\n          this.apiClient,\n          apiResponse,\n        );\n        const typedResp = new types.GenerateContentResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    }\n  }\n\n  private async generateContentStreamInternal(\n    params: types.GenerateContentParameters,\n  ): Promise<AsyncGenerator<types.GenerateContentResponse>> {\n    let response: Promise<AsyncGenerator<types.GenerateContentResponse>>;\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = generateContentParametersToVertex(this.apiClient, params);\n      path = common.formatMap(\n        '{model}:streamGenerateContent?alt=sse',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n\n      const apiClient = this.apiClient;\n      response = apiClient.requestStream({\n        path: path,\n        queryParams: queryParams,\n        body: JSON.stringify(body),\n        httpMethod: 'POST',\n        httpOptions: params.config?.httpOptions,\n      }) as Promise<AsyncGenerator<types.GenerateContentResponse>>;\n\n      return response.then(async function* (\n        apiResponse: AsyncGenerator<types.GenerateContentResponse>,\n      ) {\n        for await (const chunk of apiResponse) {\n          const resp = generateContentResponseFromVertex(apiClient, chunk);\n          const typedResp = new types.GenerateContentResponse();\n          Object.assign(typedResp, resp);\n          yield typedResp;\n        }\n      }) as Promise<AsyncGenerator<types.GenerateContentResponse>>;\n    } else {\n      const body = generateContentParametersToMldev(this.apiClient, params);\n      path = common.formatMap(\n        '{model}:streamGenerateContent?alt=sse',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n\n      const apiClient = this.apiClient;\n      response = apiClient.requestStream({\n        path: path,\n        queryParams: queryParams,\n        body: JSON.stringify(body),\n        httpMethod: 'POST',\n        httpOptions: params.config?.httpOptions,\n      }) as Promise<AsyncGenerator<types.GenerateContentResponse>>;\n\n      return response.then(async function* (\n        apiResponse: AsyncGenerator<types.GenerateContentResponse>,\n      ) {\n        for await (const chunk of apiResponse) {\n          const resp = generateContentResponseFromMldev(apiClient, chunk);\n          const typedResp = new types.GenerateContentResponse();\n          Object.assign(typedResp, resp);\n          yield typedResp;\n        }\n      });\n    }\n  }\n\n  /**\n   * Calculates embeddings for the given contents. Only text is supported.\n   *\n   * @param params - The parameters for embedding contents.\n   * @return The response from the API.\n   *\n   * @example\n   * ```ts\n   * const response = await ai.models.embedContent({\n   *  model: 'text-embedding-004',\n   *  contents: [\n   *    'What is your name?',\n   *    'What is your favorite color?',\n   *  ],\n   *  config: {\n   *    outputDimensionality: 64,\n   *  },\n   * });\n   * console.log(response);\n   * ```\n   */\n  async embedContent(\n    params: types.EmbedContentParameters,\n  ): Promise<types.EmbedContentResponse> {\n    let response: Promise<types.EmbedContentResponse>;\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = embedContentParametersToVertex(this.apiClient, params);\n      path = common.formatMap(\n        '{model}:predict',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'POST',\n          httpOptions: params.config?.httpOptions,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.EmbedContentResponse>;\n\n      return response.then((apiResponse) => {\n        const resp = embedContentResponseFromVertex(\n          this.apiClient,\n          apiResponse,\n        );\n        const typedResp = new types.EmbedContentResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    } else {\n      const body = embedContentParametersToMldev(this.apiClient, params);\n      path = common.formatMap(\n        '{model}:batchEmbedContents',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'POST',\n          httpOptions: params.config?.httpOptions,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.EmbedContentResponse>;\n\n      return response.then((apiResponse) => {\n        const resp = embedContentResponseFromMldev(this.apiClient, apiResponse);\n        const typedResp = new types.EmbedContentResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    }\n  }\n\n  /**\n   * Generates an image based on a text description and configuration.\n   *\n   * @param params - The parameters for generating images.\n   * @return The response from the API.\n   *\n   * @example\n   * ```ts\n   * const response = await ai.models.generateImages({\n   *  model: 'imagen-3.0-generate-002',\n   *  prompt: 'Robot holding a red skateboard',\n   *  config: {\n   *    numberOfImages: 1,\n   *    includeRaiReason: true,\n   *  },\n   * });\n   * console.log(response?.generatedImages?.[0]?.image?.imageBytes);\n   * ```\n   */\n  async generateImages(\n    params: types.GenerateImagesParameters,\n  ): Promise<types.GenerateImagesResponse> {\n    let response: Promise<types.GenerateImagesResponse>;\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = generateImagesParametersToVertex(this.apiClient, params);\n      path = common.formatMap(\n        '{model}:predict',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'POST',\n          httpOptions: params.config?.httpOptions,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.GenerateImagesResponse>;\n\n      return response.then((apiResponse) => {\n        const resp = generateImagesResponseFromVertex(\n          this.apiClient,\n          apiResponse,\n        );\n        const typedResp = new types.GenerateImagesResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    } else {\n      const body = generateImagesParametersToMldev(this.apiClient, params);\n      path = common.formatMap(\n        '{model}:predict',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'POST',\n          httpOptions: params.config?.httpOptions,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.GenerateImagesResponse>;\n\n      return response.then((apiResponse) => {\n        const resp = generateImagesResponseFromMldev(\n          this.apiClient,\n          apiResponse,\n        );\n        const typedResp = new types.GenerateImagesResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    }\n  }\n\n  /**\n   * Counts the number of tokens in the given contents. Multimodal input is\n   * supported for Gemini models.\n   *\n   * @param params - The parameters for counting tokens.\n   * @return The response from the API.\n   *\n   * @example\n   * ```ts\n   * const response = await ai.models.countTokens({\n   *  model: 'gemini-2.0-flash',\n   *  contents: 'The quick brown fox jumps over the lazy dog.'\n   * });\n   * console.log(response);\n   * ```\n   */\n  async countTokens(\n    params: types.CountTokensParameters,\n  ): Promise<types.CountTokensResponse> {\n    let response: Promise<types.CountTokensResponse>;\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = countTokensParametersToVertex(this.apiClient, params);\n      path = common.formatMap(\n        '{model}:countTokens',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'POST',\n          httpOptions: params.config?.httpOptions,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.CountTokensResponse>;\n\n      return response.then((apiResponse) => {\n        const resp = countTokensResponseFromVertex(this.apiClient, apiResponse);\n        const typedResp = new types.CountTokensResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    } else {\n      const body = countTokensParametersToMldev(this.apiClient, params);\n      path = common.formatMap(\n        '{model}:countTokens',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'POST',\n          httpOptions: params.config?.httpOptions,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.CountTokensResponse>;\n\n      return response.then((apiResponse) => {\n        const resp = countTokensResponseFromMldev(this.apiClient, apiResponse);\n        const typedResp = new types.CountTokensResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    }\n  }\n\n  /**\n   * Given a list of contents, returns a corresponding TokensInfo containing\n   * the list of tokens and list of token ids.\n   *\n   * This method is not supported by the Gemini Developer API.\n   *\n   * @param params - The parameters for computing tokens.\n   * @return The response from the API.\n   *\n   * @example\n   * ```ts\n   * const response = await ai.models.computeTokens({\n   *  model: 'gemini-2.0-flash',\n   *  contents: 'What is your name?'\n   * });\n   * console.log(response);\n   * ```\n   */\n  async computeTokens(\n    params: types.ComputeTokensParameters,\n  ): Promise<types.ComputeTokensResponse> {\n    let response: Promise<types.ComputeTokensResponse>;\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = computeTokensParametersToVertex(this.apiClient, params);\n      path = common.formatMap(\n        '{model}:computeTokens',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'POST',\n          httpOptions: params.config?.httpOptions,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.ComputeTokensResponse>;\n\n      return response.then((apiResponse) => {\n        const resp = computeTokensResponseFromVertex(\n          this.apiClient,\n          apiResponse,\n        );\n        const typedResp = new types.ComputeTokensResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    } else {\n      const body = computeTokensParametersToMldev(this.apiClient, params);\n      path = common.formatMap('None', body['_url'] as Record<string, unknown>);\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'POST',\n          httpOptions: params.config?.httpOptions,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.ComputeTokensResponse>;\n\n      return response.then((apiResponse) => {\n        const resp = computeTokensResponseFromMldev(\n          this.apiClient,\n          apiResponse,\n        );\n        const typedResp = new types.ComputeTokensResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    }\n  }\n}\n\nfunction partToMldev(\n  apiClient: ApiClient,\n  fromObject: types.Part,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (common.getValueByPath(fromObject, ['videoMetadata']) !== undefined) {\n    throw new Error('videoMetadata parameter is not supported in Gemini API.');\n  }\n\n  const fromThought = common.getValueByPath(fromObject, ['thought']);\n  if (fromThought != null) {\n    common.setValueByPath(toObject, ['thought'], fromThought);\n  }\n\n  const fromCodeExecutionResult = common.getValueByPath(fromObject, [\n    'codeExecutionResult',\n  ]);\n  if (fromCodeExecutionResult != null) {\n    common.setValueByPath(\n      toObject,\n      ['codeExecutionResult'],\n      fromCodeExecutionResult,\n    );\n  }\n\n  const fromExecutableCode = common.getValueByPath(fromObject, [\n    'executableCode',\n  ]);\n  if (fromExecutableCode != null) {\n    common.setValueByPath(toObject, ['executableCode'], fromExecutableCode);\n  }\n\n  const fromFileData = common.getValueByPath(fromObject, ['fileData']);\n  if (fromFileData != null) {\n    common.setValueByPath(toObject, ['fileData'], fromFileData);\n  }\n\n  const fromFunctionCall = common.getValueByPath(fromObject, ['functionCall']);\n  if (fromFunctionCall != null) {\n    common.setValueByPath(toObject, ['functionCall'], fromFunctionCall);\n  }\n\n  const fromFunctionResponse = common.getValueByPath(fromObject, [\n    'functionResponse',\n  ]);\n  if (fromFunctionResponse != null) {\n    common.setValueByPath(toObject, ['functionResponse'], fromFunctionResponse);\n  }\n\n  const fromInlineData = common.getValueByPath(fromObject, ['inlineData']);\n  if (fromInlineData != null) {\n    common.setValueByPath(toObject, ['inlineData'], fromInlineData);\n  }\n\n  const fromText = common.getValueByPath(fromObject, ['text']);\n  if (fromText != null) {\n    common.setValueByPath(toObject, ['text'], fromText);\n  }\n\n  return toObject;\n}\n\nfunction partToVertex(\n  apiClient: ApiClient,\n  fromObject: types.Part,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromVideoMetadata = common.getValueByPath(fromObject, [\n    'videoMetadata',\n  ]);\n  if (fromVideoMetadata != null) {\n    common.setValueByPath(toObject, ['videoMetadata'], fromVideoMetadata);\n  }\n\n  const fromThought = common.getValueByPath(fromObject, ['thought']);\n  if (fromThought != null) {\n    common.setValueByPath(toObject, ['thought'], fromThought);\n  }\n\n  const fromCodeExecutionResult = common.getValueByPath(fromObject, [\n    'codeExecutionResult',\n  ]);\n  if (fromCodeExecutionResult != null) {\n    common.setValueByPath(\n      toObject,\n      ['codeExecutionResult'],\n      fromCodeExecutionResult,\n    );\n  }\n\n  const fromExecutableCode = common.getValueByPath(fromObject, [\n    'executableCode',\n  ]);\n  if (fromExecutableCode != null) {\n    common.setValueByPath(toObject, ['executableCode'], fromExecutableCode);\n  }\n\n  const fromFileData = common.getValueByPath(fromObject, ['fileData']);\n  if (fromFileData != null) {\n    common.setValueByPath(toObject, ['fileData'], fromFileData);\n  }\n\n  const fromFunctionCall = common.getValueByPath(fromObject, ['functionCall']);\n  if (fromFunctionCall != null) {\n    common.setValueByPath(toObject, ['functionCall'], fromFunctionCall);\n  }\n\n  const fromFunctionResponse = common.getValueByPath(fromObject, [\n    'functionResponse',\n  ]);\n  if (fromFunctionResponse != null) {\n    common.setValueByPath(toObject, ['functionResponse'], fromFunctionResponse);\n  }\n\n  const fromInlineData = common.getValueByPath(fromObject, ['inlineData']);\n  if (fromInlineData != null) {\n    common.setValueByPath(toObject, ['inlineData'], fromInlineData);\n  }\n\n  const fromText = common.getValueByPath(fromObject, ['text']);\n  if (fromText != null) {\n    common.setValueByPath(toObject, ['text'], fromText);\n  }\n\n  return toObject;\n}\n\n/** @internal */\nexport function contentToMldev(\n  apiClient: ApiClient,\n  fromObject: types.Content,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromParts = common.getValueByPath(fromObject, ['parts']);\n  if (fromParts != null) {\n    if (Array.isArray(fromParts)) {\n      common.setValueByPath(\n        toObject,\n        ['parts'],\n        fromParts.map((item) => {\n          return partToMldev(apiClient, item);\n        }),\n      );\n    } else {\n      common.setValueByPath(toObject, ['parts'], fromParts);\n    }\n  }\n\n  const fromRole = common.getValueByPath(fromObject, ['role']);\n  if (fromRole != null) {\n    common.setValueByPath(toObject, ['role'], fromRole);\n  }\n\n  return toObject;\n}\n\n/** @internal */\nexport function contentToVertex(\n  apiClient: ApiClient,\n  fromObject: types.Content,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromParts = common.getValueByPath(fromObject, ['parts']);\n  if (fromParts != null) {\n    if (Array.isArray(fromParts)) {\n      common.setValueByPath(\n        toObject,\n        ['parts'],\n        fromParts.map((item) => {\n          return partToVertex(apiClient, item);\n        }),\n      );\n    } else {\n      common.setValueByPath(toObject, ['parts'], fromParts);\n    }\n  }\n\n  const fromRole = common.getValueByPath(fromObject, ['role']);\n  if (fromRole != null) {\n    common.setValueByPath(toObject, ['role'], fromRole);\n  }\n\n  return toObject;\n}\n\nfunction schemaToMldev(\n  apiClient: ApiClient,\n  fromObject: types.Schema,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (common.getValueByPath(fromObject, ['example']) !== undefined) {\n    throw new Error('example parameter is not supported in Gemini API.');\n  }\n\n  if (common.getValueByPath(fromObject, ['pattern']) !== undefined) {\n    throw new Error('pattern parameter is not supported in Gemini API.');\n  }\n\n  if (common.getValueByPath(fromObject, ['minimum']) !== undefined) {\n    throw new Error('minimum parameter is not supported in Gemini API.');\n  }\n\n  if (common.getValueByPath(fromObject, ['default']) !== undefined) {\n    throw new Error('default parameter is not supported in Gemini API.');\n  }\n\n  if (common.getValueByPath(fromObject, ['anyOf']) !== undefined) {\n    throw new Error('anyOf parameter is not supported in Gemini API.');\n  }\n\n  if (common.getValueByPath(fromObject, ['maxLength']) !== undefined) {\n    throw new Error('maxLength parameter is not supported in Gemini API.');\n  }\n\n  if (common.getValueByPath(fromObject, ['title']) !== undefined) {\n    throw new Error('title parameter is not supported in Gemini API.');\n  }\n\n  if (common.getValueByPath(fromObject, ['minLength']) !== undefined) {\n    throw new Error('minLength parameter is not supported in Gemini API.');\n  }\n\n  if (common.getValueByPath(fromObject, ['minProperties']) !== undefined) {\n    throw new Error('minProperties parameter is not supported in Gemini API.');\n  }\n\n  if (common.getValueByPath(fromObject, ['maximum']) !== undefined) {\n    throw new Error('maximum parameter is not supported in Gemini API.');\n  }\n\n  if (common.getValueByPath(fromObject, ['maxProperties']) !== undefined) {\n    throw new Error('maxProperties parameter is not supported in Gemini API.');\n  }\n\n  const fromDescription = common.getValueByPath(fromObject, ['description']);\n  if (fromDescription != null) {\n    common.setValueByPath(toObject, ['description'], fromDescription);\n  }\n\n  const fromEnum = common.getValueByPath(fromObject, ['enum']);\n  if (fromEnum != null) {\n    common.setValueByPath(toObject, ['enum'], fromEnum);\n  }\n\n  const fromFormat = common.getValueByPath(fromObject, ['format']);\n  if (fromFormat != null) {\n    common.setValueByPath(toObject, ['format'], fromFormat);\n  }\n\n  const fromItems = common.getValueByPath(fromObject, ['items']);\n  if (fromItems != null) {\n    common.setValueByPath(toObject, ['items'], fromItems);\n  }\n\n  const fromMaxItems = common.getValueByPath(fromObject, ['maxItems']);\n  if (fromMaxItems != null) {\n    common.setValueByPath(toObject, ['maxItems'], fromMaxItems);\n  }\n\n  const fromMinItems = common.getValueByPath(fromObject, ['minItems']);\n  if (fromMinItems != null) {\n    common.setValueByPath(toObject, ['minItems'], fromMinItems);\n  }\n\n  const fromNullable = common.getValueByPath(fromObject, ['nullable']);\n  if (fromNullable != null) {\n    common.setValueByPath(toObject, ['nullable'], fromNullable);\n  }\n\n  const fromProperties = common.getValueByPath(fromObject, ['properties']);\n  if (fromProperties != null) {\n    common.setValueByPath(toObject, ['properties'], fromProperties);\n  }\n\n  const fromPropertyOrdering = common.getValueByPath(fromObject, [\n    'propertyOrdering',\n  ]);\n  if (fromPropertyOrdering != null) {\n    common.setValueByPath(toObject, ['propertyOrdering'], fromPropertyOrdering);\n  }\n\n  const fromRequired = common.getValueByPath(fromObject, ['required']);\n  if (fromRequired != null) {\n    common.setValueByPath(toObject, ['required'], fromRequired);\n  }\n\n  const fromType = common.getValueByPath(fromObject, ['type']);\n  if (fromType != null) {\n    common.setValueByPath(toObject, ['type'], fromType);\n  }\n\n  return toObject;\n}\n\nfunction schemaToVertex(\n  apiClient: ApiClient,\n  fromObject: types.Schema,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromExample = common.getValueByPath(fromObject, ['example']);\n  if (fromExample != null) {\n    common.setValueByPath(toObject, ['example'], fromExample);\n  }\n\n  const fromPattern = common.getValueByPath(fromObject, ['pattern']);\n  if (fromPattern != null) {\n    common.setValueByPath(toObject, ['pattern'], fromPattern);\n  }\n\n  const fromMinimum = common.getValueByPath(fromObject, ['minimum']);\n  if (fromMinimum != null) {\n    common.setValueByPath(toObject, ['minimum'], fromMinimum);\n  }\n\n  const fromDefault = common.getValueByPath(fromObject, ['default']);\n  if (fromDefault != null) {\n    common.setValueByPath(toObject, ['default'], fromDefault);\n  }\n\n  const fromAnyOf = common.getValueByPath(fromObject, ['anyOf']);\n  if (fromAnyOf != null) {\n    common.setValueByPath(toObject, ['anyOf'], fromAnyOf);\n  }\n\n  const fromMaxLength = common.getValueByPath(fromObject, ['maxLength']);\n  if (fromMaxLength != null) {\n    common.setValueByPath(toObject, ['maxLength'], fromMaxLength);\n  }\n\n  const fromTitle = common.getValueByPath(fromObject, ['title']);\n  if (fromTitle != null) {\n    common.setValueByPath(toObject, ['title'], fromTitle);\n  }\n\n  const fromMinLength = common.getValueByPath(fromObject, ['minLength']);\n  if (fromMinLength != null) {\n    common.setValueByPath(toObject, ['minLength'], fromMinLength);\n  }\n\n  const fromMinProperties = common.getValueByPath(fromObject, [\n    'minProperties',\n  ]);\n  if (fromMinProperties != null) {\n    common.setValueByPath(toObject, ['minProperties'], fromMinProperties);\n  }\n\n  const fromMaximum = common.getValueByPath(fromObject, ['maximum']);\n  if (fromMaximum != null) {\n    common.setValueByPath(toObject, ['maximum'], fromMaximum);\n  }\n\n  const fromMaxProperties = common.getValueByPath(fromObject, [\n    'maxProperties',\n  ]);\n  if (fromMaxProperties != null) {\n    common.setValueByPath(toObject, ['maxProperties'], fromMaxProperties);\n  }\n\n  const fromDescription = common.getValueByPath(fromObject, ['description']);\n  if (fromDescription != null) {\n    common.setValueByPath(toObject, ['description'], fromDescription);\n  }\n\n  const fromEnum = common.getValueByPath(fromObject, ['enum']);\n  if (fromEnum != null) {\n    common.setValueByPath(toObject, ['enum'], fromEnum);\n  }\n\n  const fromFormat = common.getValueByPath(fromObject, ['format']);\n  if (fromFormat != null) {\n    common.setValueByPath(toObject, ['format'], fromFormat);\n  }\n\n  const fromItems = common.getValueByPath(fromObject, ['items']);\n  if (fromItems != null) {\n    common.setValueByPath(toObject, ['items'], fromItems);\n  }\n\n  const fromMaxItems = common.getValueByPath(fromObject, ['maxItems']);\n  if (fromMaxItems != null) {\n    common.setValueByPath(toObject, ['maxItems'], fromMaxItems);\n  }\n\n  const fromMinItems = common.getValueByPath(fromObject, ['minItems']);\n  if (fromMinItems != null) {\n    common.setValueByPath(toObject, ['minItems'], fromMinItems);\n  }\n\n  const fromNullable = common.getValueByPath(fromObject, ['nullable']);\n  if (fromNullable != null) {\n    common.setValueByPath(toObject, ['nullable'], fromNullable);\n  }\n\n  const fromProperties = common.getValueByPath(fromObject, ['properties']);\n  if (fromProperties != null) {\n    common.setValueByPath(toObject, ['properties'], fromProperties);\n  }\n\n  const fromPropertyOrdering = common.getValueByPath(fromObject, [\n    'propertyOrdering',\n  ]);\n  if (fromPropertyOrdering != null) {\n    common.setValueByPath(toObject, ['propertyOrdering'], fromPropertyOrdering);\n  }\n\n  const fromRequired = common.getValueByPath(fromObject, ['required']);\n  if (fromRequired != null) {\n    common.setValueByPath(toObject, ['required'], fromRequired);\n  }\n\n  const fromType = common.getValueByPath(fromObject, ['type']);\n  if (fromType != null) {\n    common.setValueByPath(toObject, ['type'], fromType);\n  }\n\n  return toObject;\n}\n\nfunction safetySettingToMldev(\n  apiClient: ApiClient,\n  fromObject: types.SafetySetting,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (common.getValueByPath(fromObject, ['method']) !== undefined) {\n    throw new Error('method parameter is not supported in Gemini API.');\n  }\n\n  const fromCategory = common.getValueByPath(fromObject, ['category']);\n  if (fromCategory != null) {\n    common.setValueByPath(toObject, ['category'], fromCategory);\n  }\n\n  const fromThreshold = common.getValueByPath(fromObject, ['threshold']);\n  if (fromThreshold != null) {\n    common.setValueByPath(toObject, ['threshold'], fromThreshold);\n  }\n\n  return toObject;\n}\n\nfunction safetySettingToVertex(\n  apiClient: ApiClient,\n  fromObject: types.SafetySetting,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromMethod = common.getValueByPath(fromObject, ['method']);\n  if (fromMethod != null) {\n    common.setValueByPath(toObject, ['method'], fromMethod);\n  }\n\n  const fromCategory = common.getValueByPath(fromObject, ['category']);\n  if (fromCategory != null) {\n    common.setValueByPath(toObject, ['category'], fromCategory);\n  }\n\n  const fromThreshold = common.getValueByPath(fromObject, ['threshold']);\n  if (fromThreshold != null) {\n    common.setValueByPath(toObject, ['threshold'], fromThreshold);\n  }\n\n  return toObject;\n}\n\nfunction functionDeclarationToMldev(\n  apiClient: ApiClient,\n  fromObject: types.FunctionDeclaration,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (common.getValueByPath(fromObject, ['response']) !== undefined) {\n    throw new Error('response parameter is not supported in Gemini API.');\n  }\n\n  const fromDescription = common.getValueByPath(fromObject, ['description']);\n  if (fromDescription != null) {\n    common.setValueByPath(toObject, ['description'], fromDescription);\n  }\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(toObject, ['name'], fromName);\n  }\n\n  const fromParameters = common.getValueByPath(fromObject, ['parameters']);\n  if (fromParameters != null) {\n    common.setValueByPath(toObject, ['parameters'], fromParameters);\n  }\n\n  return toObject;\n}\n\nfunction functionDeclarationToVertex(\n  apiClient: ApiClient,\n  fromObject: types.FunctionDeclaration,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromResponse = common.getValueByPath(fromObject, ['response']);\n  if (fromResponse != null) {\n    common.setValueByPath(\n      toObject,\n      ['response'],\n      schemaToVertex(apiClient, fromResponse),\n    );\n  }\n\n  const fromDescription = common.getValueByPath(fromObject, ['description']);\n  if (fromDescription != null) {\n    common.setValueByPath(toObject, ['description'], fromDescription);\n  }\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(toObject, ['name'], fromName);\n  }\n\n  const fromParameters = common.getValueByPath(fromObject, ['parameters']);\n  if (fromParameters != null) {\n    common.setValueByPath(toObject, ['parameters'], fromParameters);\n  }\n\n  return toObject;\n}\n\nfunction googleSearchToMldev(\n  apiClient: ApiClient,\n  fromObject: types.GoogleSearch,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  return toObject;\n}\n\nfunction googleSearchToVertex(\n  apiClient: ApiClient,\n  fromObject: types.GoogleSearch,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  return toObject;\n}\n\nfunction dynamicRetrievalConfigToMldev(\n  apiClient: ApiClient,\n  fromObject: types.DynamicRetrievalConfig,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromMode = common.getValueByPath(fromObject, ['mode']);\n  if (fromMode != null) {\n    common.setValueByPath(toObject, ['mode'], fromMode);\n  }\n\n  const fromDynamicThreshold = common.getValueByPath(fromObject, [\n    'dynamicThreshold',\n  ]);\n  if (fromDynamicThreshold != null) {\n    common.setValueByPath(toObject, ['dynamicThreshold'], fromDynamicThreshold);\n  }\n\n  return toObject;\n}\n\nfunction dynamicRetrievalConfigToVertex(\n  apiClient: ApiClient,\n  fromObject: types.DynamicRetrievalConfig,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromMode = common.getValueByPath(fromObject, ['mode']);\n  if (fromMode != null) {\n    common.setValueByPath(toObject, ['mode'], fromMode);\n  }\n\n  const fromDynamicThreshold = common.getValueByPath(fromObject, [\n    'dynamicThreshold',\n  ]);\n  if (fromDynamicThreshold != null) {\n    common.setValueByPath(toObject, ['dynamicThreshold'], fromDynamicThreshold);\n  }\n\n  return toObject;\n}\n\nfunction googleSearchRetrievalToMldev(\n  apiClient: ApiClient,\n  fromObject: types.GoogleSearchRetrieval,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromDynamicRetrievalConfig = common.getValueByPath(fromObject, [\n    'dynamicRetrievalConfig',\n  ]);\n  if (fromDynamicRetrievalConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['dynamicRetrievalConfig'],\n      dynamicRetrievalConfigToMldev(apiClient, fromDynamicRetrievalConfig),\n    );\n  }\n\n  return toObject;\n}\n\nfunction googleSearchRetrievalToVertex(\n  apiClient: ApiClient,\n  fromObject: types.GoogleSearchRetrieval,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromDynamicRetrievalConfig = common.getValueByPath(fromObject, [\n    'dynamicRetrievalConfig',\n  ]);\n  if (fromDynamicRetrievalConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['dynamicRetrievalConfig'],\n      dynamicRetrievalConfigToVertex(apiClient, fromDynamicRetrievalConfig),\n    );\n  }\n\n  return toObject;\n}\n\n/** @internal */\nexport function toolToMldev(\n  apiClient: ApiClient,\n  fromObject: types.Tool,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromFunctionDeclarations = common.getValueByPath(fromObject, [\n    'functionDeclarations',\n  ]);\n  if (fromFunctionDeclarations != null) {\n    if (Array.isArray(fromFunctionDeclarations)) {\n      common.setValueByPath(\n        toObject,\n        ['functionDeclarations'],\n        fromFunctionDeclarations.map((item) => {\n          return functionDeclarationToMldev(apiClient, item);\n        }),\n      );\n    } else {\n      common.setValueByPath(\n        toObject,\n        ['functionDeclarations'],\n        fromFunctionDeclarations,\n      );\n    }\n  }\n\n  if (common.getValueByPath(fromObject, ['retrieval']) !== undefined) {\n    throw new Error('retrieval parameter is not supported in Gemini API.');\n  }\n\n  const fromGoogleSearch = common.getValueByPath(fromObject, ['googleSearch']);\n  if (fromGoogleSearch != null) {\n    common.setValueByPath(\n      toObject,\n      ['googleSearch'],\n      googleSearchToMldev(apiClient, fromGoogleSearch),\n    );\n  }\n\n  const fromGoogleSearchRetrieval = common.getValueByPath(fromObject, [\n    'googleSearchRetrieval',\n  ]);\n  if (fromGoogleSearchRetrieval != null) {\n    common.setValueByPath(\n      toObject,\n      ['googleSearchRetrieval'],\n      googleSearchRetrievalToMldev(apiClient, fromGoogleSearchRetrieval),\n    );\n  }\n\n  const fromCodeExecution = common.getValueByPath(fromObject, [\n    'codeExecution',\n  ]);\n  if (fromCodeExecution != null) {\n    common.setValueByPath(toObject, ['codeExecution'], fromCodeExecution);\n  }\n\n  return toObject;\n}\n\n/** @internal */\nexport function toolToVertex(\n  apiClient: ApiClient,\n  fromObject: types.Tool,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromFunctionDeclarations = common.getValueByPath(fromObject, [\n    'functionDeclarations',\n  ]);\n  if (fromFunctionDeclarations != null) {\n    if (Array.isArray(fromFunctionDeclarations)) {\n      common.setValueByPath(\n        toObject,\n        ['functionDeclarations'],\n        fromFunctionDeclarations.map((item) => {\n          return functionDeclarationToVertex(apiClient, item);\n        }),\n      );\n    } else {\n      common.setValueByPath(\n        toObject,\n        ['functionDeclarations'],\n        fromFunctionDeclarations,\n      );\n    }\n  }\n\n  const fromRetrieval = common.getValueByPath(fromObject, ['retrieval']);\n  if (fromRetrieval != null) {\n    common.setValueByPath(toObject, ['retrieval'], fromRetrieval);\n  }\n\n  const fromGoogleSearch = common.getValueByPath(fromObject, ['googleSearch']);\n  if (fromGoogleSearch != null) {\n    common.setValueByPath(\n      toObject,\n      ['googleSearch'],\n      googleSearchToVertex(apiClient, fromGoogleSearch),\n    );\n  }\n\n  const fromGoogleSearchRetrieval = common.getValueByPath(fromObject, [\n    'googleSearchRetrieval',\n  ]);\n  if (fromGoogleSearchRetrieval != null) {\n    common.setValueByPath(\n      toObject,\n      ['googleSearchRetrieval'],\n      googleSearchRetrievalToVertex(apiClient, fromGoogleSearchRetrieval),\n    );\n  }\n\n  const fromCodeExecution = common.getValueByPath(fromObject, [\n    'codeExecution',\n  ]);\n  if (fromCodeExecution != null) {\n    common.setValueByPath(toObject, ['codeExecution'], fromCodeExecution);\n  }\n\n  return toObject;\n}\n\nfunction functionCallingConfigToMldev(\n  apiClient: ApiClient,\n  fromObject: types.FunctionCallingConfig,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromMode = common.getValueByPath(fromObject, ['mode']);\n  if (fromMode != null) {\n    common.setValueByPath(toObject, ['mode'], fromMode);\n  }\n\n  const fromAllowedFunctionNames = common.getValueByPath(fromObject, [\n    'allowedFunctionNames',\n  ]);\n  if (fromAllowedFunctionNames != null) {\n    common.setValueByPath(\n      toObject,\n      ['allowedFunctionNames'],\n      fromAllowedFunctionNames,\n    );\n  }\n\n  return toObject;\n}\n\nfunction functionCallingConfigToVertex(\n  apiClient: ApiClient,\n  fromObject: types.FunctionCallingConfig,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromMode = common.getValueByPath(fromObject, ['mode']);\n  if (fromMode != null) {\n    common.setValueByPath(toObject, ['mode'], fromMode);\n  }\n\n  const fromAllowedFunctionNames = common.getValueByPath(fromObject, [\n    'allowedFunctionNames',\n  ]);\n  if (fromAllowedFunctionNames != null) {\n    common.setValueByPath(\n      toObject,\n      ['allowedFunctionNames'],\n      fromAllowedFunctionNames,\n    );\n  }\n\n  return toObject;\n}\n\nfunction toolConfigToMldev(\n  apiClient: ApiClient,\n  fromObject: types.ToolConfig,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromFunctionCallingConfig = common.getValueByPath(fromObject, [\n    'functionCallingConfig',\n  ]);\n  if (fromFunctionCallingConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['functionCallingConfig'],\n      functionCallingConfigToMldev(apiClient, fromFunctionCallingConfig),\n    );\n  }\n\n  return toObject;\n}\n\nfunction toolConfigToVertex(\n  apiClient: ApiClient,\n  fromObject: types.ToolConfig,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromFunctionCallingConfig = common.getValueByPath(fromObject, [\n    'functionCallingConfig',\n  ]);\n  if (fromFunctionCallingConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['functionCallingConfig'],\n      functionCallingConfigToVertex(apiClient, fromFunctionCallingConfig),\n    );\n  }\n\n  return toObject;\n}\n\nfunction prebuiltVoiceConfigToMldev(\n  apiClient: ApiClient,\n  fromObject: types.PrebuiltVoiceConfig,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromVoiceName = common.getValueByPath(fromObject, ['voiceName']);\n  if (fromVoiceName != null) {\n    common.setValueByPath(toObject, ['voiceName'], fromVoiceName);\n  }\n\n  return toObject;\n}\n\nfunction prebuiltVoiceConfigToVertex(\n  apiClient: ApiClient,\n  fromObject: types.PrebuiltVoiceConfig,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromVoiceName = common.getValueByPath(fromObject, ['voiceName']);\n  if (fromVoiceName != null) {\n    common.setValueByPath(toObject, ['voiceName'], fromVoiceName);\n  }\n\n  return toObject;\n}\n\nfunction voiceConfigToMldev(\n  apiClient: ApiClient,\n  fromObject: types.VoiceConfig,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromPrebuiltVoiceConfig = common.getValueByPath(fromObject, [\n    'prebuiltVoiceConfig',\n  ]);\n  if (fromPrebuiltVoiceConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['prebuiltVoiceConfig'],\n      prebuiltVoiceConfigToMldev(apiClient, fromPrebuiltVoiceConfig),\n    );\n  }\n\n  return toObject;\n}\n\nfunction voiceConfigToVertex(\n  apiClient: ApiClient,\n  fromObject: types.VoiceConfig,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromPrebuiltVoiceConfig = common.getValueByPath(fromObject, [\n    'prebuiltVoiceConfig',\n  ]);\n  if (fromPrebuiltVoiceConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['prebuiltVoiceConfig'],\n      prebuiltVoiceConfigToVertex(apiClient, fromPrebuiltVoiceConfig),\n    );\n  }\n\n  return toObject;\n}\n\nfunction speechConfigToMldev(\n  apiClient: ApiClient,\n  fromObject: types.SpeechConfig,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromVoiceConfig = common.getValueByPath(fromObject, ['voiceConfig']);\n  if (fromVoiceConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['voiceConfig'],\n      voiceConfigToMldev(apiClient, fromVoiceConfig),\n    );\n  }\n\n  return toObject;\n}\n\nfunction speechConfigToVertex(\n  apiClient: ApiClient,\n  fromObject: types.SpeechConfig,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromVoiceConfig = common.getValueByPath(fromObject, ['voiceConfig']);\n  if (fromVoiceConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['voiceConfig'],\n      voiceConfigToVertex(apiClient, fromVoiceConfig),\n    );\n  }\n\n  return toObject;\n}\n\nfunction thinkingConfigToMldev(\n  apiClient: ApiClient,\n  fromObject: types.ThinkingConfig,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromIncludeThoughts = common.getValueByPath(fromObject, [\n    'includeThoughts',\n  ]);\n  if (fromIncludeThoughts != null) {\n    common.setValueByPath(toObject, ['includeThoughts'], fromIncludeThoughts);\n  }\n\n  return toObject;\n}\n\nfunction thinkingConfigToVertex(\n  apiClient: ApiClient,\n  fromObject: types.ThinkingConfig,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromIncludeThoughts = common.getValueByPath(fromObject, [\n    'includeThoughts',\n  ]);\n  if (fromIncludeThoughts != null) {\n    common.setValueByPath(toObject, ['includeThoughts'], fromIncludeThoughts);\n  }\n\n  return toObject;\n}\n\nfunction generateContentConfigToMldev(\n  apiClient: ApiClient,\n  fromObject: types.GenerateContentConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromSystemInstruction = common.getValueByPath(fromObject, [\n    'systemInstruction',\n  ]);\n  if (parentObject !== undefined && fromSystemInstruction != null) {\n    common.setValueByPath(\n      parentObject,\n      ['systemInstruction'],\n      contentToMldev(apiClient, t.tContent(apiClient, fromSystemInstruction)),\n    );\n  }\n\n  const fromTemperature = common.getValueByPath(fromObject, ['temperature']);\n  if (fromTemperature != null) {\n    common.setValueByPath(toObject, ['temperature'], fromTemperature);\n  }\n\n  const fromTopP = common.getValueByPath(fromObject, ['topP']);\n  if (fromTopP != null) {\n    common.setValueByPath(toObject, ['topP'], fromTopP);\n  }\n\n  const fromTopK = common.getValueByPath(fromObject, ['topK']);\n  if (fromTopK != null) {\n    common.setValueByPath(toObject, ['topK'], fromTopK);\n  }\n\n  const fromCandidateCount = common.getValueByPath(fromObject, [\n    'candidateCount',\n  ]);\n  if (fromCandidateCount != null) {\n    common.setValueByPath(toObject, ['candidateCount'], fromCandidateCount);\n  }\n\n  const fromMaxOutputTokens = common.getValueByPath(fromObject, [\n    'maxOutputTokens',\n  ]);\n  if (fromMaxOutputTokens != null) {\n    common.setValueByPath(toObject, ['maxOutputTokens'], fromMaxOutputTokens);\n  }\n\n  const fromStopSequences = common.getValueByPath(fromObject, [\n    'stopSequences',\n  ]);\n  if (fromStopSequences != null) {\n    common.setValueByPath(toObject, ['stopSequences'], fromStopSequences);\n  }\n\n  const fromResponseLogprobs = common.getValueByPath(fromObject, [\n    'responseLogprobs',\n  ]);\n  if (fromResponseLogprobs != null) {\n    common.setValueByPath(toObject, ['responseLogprobs'], fromResponseLogprobs);\n  }\n\n  const fromLogprobs = common.getValueByPath(fromObject, ['logprobs']);\n  if (fromLogprobs != null) {\n    common.setValueByPath(toObject, ['logprobs'], fromLogprobs);\n  }\n\n  const fromPresencePenalty = common.getValueByPath(fromObject, [\n    'presencePenalty',\n  ]);\n  if (fromPresencePenalty != null) {\n    common.setValueByPath(toObject, ['presencePenalty'], fromPresencePenalty);\n  }\n\n  const fromFrequencyPenalty = common.getValueByPath(fromObject, [\n    'frequencyPenalty',\n  ]);\n  if (fromFrequencyPenalty != null) {\n    common.setValueByPath(toObject, ['frequencyPenalty'], fromFrequencyPenalty);\n  }\n\n  const fromSeed = common.getValueByPath(fromObject, ['seed']);\n  if (fromSeed != null) {\n    common.setValueByPath(toObject, ['seed'], fromSeed);\n  }\n\n  const fromResponseMimeType = common.getValueByPath(fromObject, [\n    'responseMimeType',\n  ]);\n  if (fromResponseMimeType != null) {\n    common.setValueByPath(toObject, ['responseMimeType'], fromResponseMimeType);\n  }\n\n  const fromResponseSchema = common.getValueByPath(fromObject, [\n    'responseSchema',\n  ]);\n  if (fromResponseSchema != null) {\n    common.setValueByPath(\n      toObject,\n      ['responseSchema'],\n      schemaToMldev(apiClient, t.tSchema(apiClient, fromResponseSchema)),\n    );\n  }\n\n  if (common.getValueByPath(fromObject, ['routingConfig']) !== undefined) {\n    throw new Error('routingConfig parameter is not supported in Gemini API.');\n  }\n\n  const fromSafetySettings = common.getValueByPath(fromObject, [\n    'safetySettings',\n  ]);\n  if (parentObject !== undefined && fromSafetySettings != null) {\n    if (Array.isArray(fromSafetySettings)) {\n      common.setValueByPath(\n        parentObject,\n        ['safetySettings'],\n        fromSafetySettings.map((item) => {\n          return safetySettingToMldev(apiClient, item);\n        }),\n      );\n    } else {\n      common.setValueByPath(\n        parentObject,\n        ['safetySettings'],\n        fromSafetySettings,\n      );\n    }\n  }\n\n  const fromTools = common.getValueByPath(fromObject, ['tools']);\n  if (parentObject !== undefined && fromTools != null) {\n    if (Array.isArray(fromTools)) {\n      common.setValueByPath(\n        parentObject,\n        ['tools'],\n        t.tTools(\n          apiClient,\n          t.tTools(apiClient, fromTools).map((item) => {\n            return toolToMldev(apiClient, t.tTool(apiClient, item));\n          }),\n        ),\n      );\n    } else {\n      common.setValueByPath(\n        parentObject,\n        ['tools'],\n        t.tTools(apiClient, fromTools),\n      );\n    }\n  }\n\n  const fromToolConfig = common.getValueByPath(fromObject, ['toolConfig']);\n  if (parentObject !== undefined && fromToolConfig != null) {\n    common.setValueByPath(\n      parentObject,\n      ['toolConfig'],\n      toolConfigToMldev(apiClient, fromToolConfig),\n    );\n  }\n\n  if (common.getValueByPath(fromObject, ['labels']) !== undefined) {\n    throw new Error('labels parameter is not supported in Gemini API.');\n  }\n\n  const fromCachedContent = common.getValueByPath(fromObject, [\n    'cachedContent',\n  ]);\n  if (parentObject !== undefined && fromCachedContent != null) {\n    common.setValueByPath(\n      parentObject,\n      ['cachedContent'],\n      t.tCachedContentName(apiClient, fromCachedContent),\n    );\n  }\n\n  const fromResponseModalities = common.getValueByPath(fromObject, [\n    'responseModalities',\n  ]);\n  if (fromResponseModalities != null) {\n    common.setValueByPath(\n      toObject,\n      ['responseModalities'],\n      fromResponseModalities,\n    );\n  }\n\n  const fromMediaResolution = common.getValueByPath(fromObject, [\n    'mediaResolution',\n  ]);\n  if (fromMediaResolution != null) {\n    common.setValueByPath(toObject, ['mediaResolution'], fromMediaResolution);\n  }\n\n  const fromSpeechConfig = common.getValueByPath(fromObject, ['speechConfig']);\n  if (fromSpeechConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['speechConfig'],\n      speechConfigToMldev(\n        apiClient,\n        t.tSpeechConfig(apiClient, fromSpeechConfig),\n      ),\n    );\n  }\n\n  if (common.getValueByPath(fromObject, ['audioTimestamp']) !== undefined) {\n    throw new Error('audioTimestamp parameter is not supported in Gemini API.');\n  }\n\n  const fromThinkingConfig = common.getValueByPath(fromObject, [\n    'thinkingConfig',\n  ]);\n  if (fromThinkingConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['thinkingConfig'],\n      thinkingConfigToMldev(apiClient, fromThinkingConfig),\n    );\n  }\n\n  return toObject;\n}\n\nfunction generateContentConfigToVertex(\n  apiClient: ApiClient,\n  fromObject: types.GenerateContentConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromSystemInstruction = common.getValueByPath(fromObject, [\n    'systemInstruction',\n  ]);\n  if (parentObject !== undefined && fromSystemInstruction != null) {\n    common.setValueByPath(\n      parentObject,\n      ['systemInstruction'],\n      contentToVertex(apiClient, t.tContent(apiClient, fromSystemInstruction)),\n    );\n  }\n\n  const fromTemperature = common.getValueByPath(fromObject, ['temperature']);\n  if (fromTemperature != null) {\n    common.setValueByPath(toObject, ['temperature'], fromTemperature);\n  }\n\n  const fromTopP = common.getValueByPath(fromObject, ['topP']);\n  if (fromTopP != null) {\n    common.setValueByPath(toObject, ['topP'], fromTopP);\n  }\n\n  const fromTopK = common.getValueByPath(fromObject, ['topK']);\n  if (fromTopK != null) {\n    common.setValueByPath(toObject, ['topK'], fromTopK);\n  }\n\n  const fromCandidateCount = common.getValueByPath(fromObject, [\n    'candidateCount',\n  ]);\n  if (fromCandidateCount != null) {\n    common.setValueByPath(toObject, ['candidateCount'], fromCandidateCount);\n  }\n\n  const fromMaxOutputTokens = common.getValueByPath(fromObject, [\n    'maxOutputTokens',\n  ]);\n  if (fromMaxOutputTokens != null) {\n    common.setValueByPath(toObject, ['maxOutputTokens'], fromMaxOutputTokens);\n  }\n\n  const fromStopSequences = common.getValueByPath(fromObject, [\n    'stopSequences',\n  ]);\n  if (fromStopSequences != null) {\n    common.setValueByPath(toObject, ['stopSequences'], fromStopSequences);\n  }\n\n  const fromResponseLogprobs = common.getValueByPath(fromObject, [\n    'responseLogprobs',\n  ]);\n  if (fromResponseLogprobs != null) {\n    common.setValueByPath(toObject, ['responseLogprobs'], fromResponseLogprobs);\n  }\n\n  const fromLogprobs = common.getValueByPath(fromObject, ['logprobs']);\n  if (fromLogprobs != null) {\n    common.setValueByPath(toObject, ['logprobs'], fromLogprobs);\n  }\n\n  const fromPresencePenalty = common.getValueByPath(fromObject, [\n    'presencePenalty',\n  ]);\n  if (fromPresencePenalty != null) {\n    common.setValueByPath(toObject, ['presencePenalty'], fromPresencePenalty);\n  }\n\n  const fromFrequencyPenalty = common.getValueByPath(fromObject, [\n    'frequencyPenalty',\n  ]);\n  if (fromFrequencyPenalty != null) {\n    common.setValueByPath(toObject, ['frequencyPenalty'], fromFrequencyPenalty);\n  }\n\n  const fromSeed = common.getValueByPath(fromObject, ['seed']);\n  if (fromSeed != null) {\n    common.setValueByPath(toObject, ['seed'], fromSeed);\n  }\n\n  const fromResponseMimeType = common.getValueByPath(fromObject, [\n    'responseMimeType',\n  ]);\n  if (fromResponseMimeType != null) {\n    common.setValueByPath(toObject, ['responseMimeType'], fromResponseMimeType);\n  }\n\n  const fromResponseSchema = common.getValueByPath(fromObject, [\n    'responseSchema',\n  ]);\n  if (fromResponseSchema != null) {\n    common.setValueByPath(\n      toObject,\n      ['responseSchema'],\n      schemaToVertex(apiClient, t.tSchema(apiClient, fromResponseSchema)),\n    );\n  }\n\n  const fromRoutingConfig = common.getValueByPath(fromObject, [\n    'routingConfig',\n  ]);\n  if (fromRoutingConfig != null) {\n    common.setValueByPath(toObject, ['routingConfig'], fromRoutingConfig);\n  }\n\n  const fromSafetySettings = common.getValueByPath(fromObject, [\n    'safetySettings',\n  ]);\n  if (parentObject !== undefined && fromSafetySettings != null) {\n    if (Array.isArray(fromSafetySettings)) {\n      common.setValueByPath(\n        parentObject,\n        ['safetySettings'],\n        fromSafetySettings.map((item) => {\n          return safetySettingToVertex(apiClient, item);\n        }),\n      );\n    } else {\n      common.setValueByPath(\n        parentObject,\n        ['safetySettings'],\n        fromSafetySettings,\n      );\n    }\n  }\n\n  const fromTools = common.getValueByPath(fromObject, ['tools']);\n  if (parentObject !== undefined && fromTools != null) {\n    if (Array.isArray(fromTools)) {\n      common.setValueByPath(\n        parentObject,\n        ['tools'],\n        t.tTools(\n          apiClient,\n          t.tTools(apiClient, fromTools).map((item) => {\n            return toolToVertex(apiClient, t.tTool(apiClient, item));\n          }),\n        ),\n      );\n    } else {\n      common.setValueByPath(\n        parentObject,\n        ['tools'],\n        t.tTools(apiClient, fromTools),\n      );\n    }\n  }\n\n  const fromToolConfig = common.getValueByPath(fromObject, ['toolConfig']);\n  if (parentObject !== undefined && fromToolConfig != null) {\n    common.setValueByPath(\n      parentObject,\n      ['toolConfig'],\n      toolConfigToVertex(apiClient, fromToolConfig),\n    );\n  }\n\n  const fromLabels = common.getValueByPath(fromObject, ['labels']);\n  if (parentObject !== undefined && fromLabels != null) {\n    common.setValueByPath(parentObject, ['labels'], fromLabels);\n  }\n\n  const fromCachedContent = common.getValueByPath(fromObject, [\n    'cachedContent',\n  ]);\n  if (parentObject !== undefined && fromCachedContent != null) {\n    common.setValueByPath(\n      parentObject,\n      ['cachedContent'],\n      t.tCachedContentName(apiClient, fromCachedContent),\n    );\n  }\n\n  const fromResponseModalities = common.getValueByPath(fromObject, [\n    'responseModalities',\n  ]);\n  if (fromResponseModalities != null) {\n    common.setValueByPath(\n      toObject,\n      ['responseModalities'],\n      fromResponseModalities,\n    );\n  }\n\n  const fromMediaResolution = common.getValueByPath(fromObject, [\n    'mediaResolution',\n  ]);\n  if (fromMediaResolution != null) {\n    common.setValueByPath(toObject, ['mediaResolution'], fromMediaResolution);\n  }\n\n  const fromSpeechConfig = common.getValueByPath(fromObject, ['speechConfig']);\n  if (fromSpeechConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['speechConfig'],\n      speechConfigToVertex(\n        apiClient,\n        t.tSpeechConfig(apiClient, fromSpeechConfig),\n      ),\n    );\n  }\n\n  const fromAudioTimestamp = common.getValueByPath(fromObject, [\n    'audioTimestamp',\n  ]);\n  if (fromAudioTimestamp != null) {\n    common.setValueByPath(toObject, ['audioTimestamp'], fromAudioTimestamp);\n  }\n\n  const fromThinkingConfig = common.getValueByPath(fromObject, [\n    'thinkingConfig',\n  ]);\n  if (fromThinkingConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['thinkingConfig'],\n      thinkingConfigToVertex(apiClient, fromThinkingConfig),\n    );\n  }\n\n  return toObject;\n}\n\nfunction generateContentParametersToMldev(\n  apiClient: ApiClient,\n  fromObject: types.GenerateContentParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'model'],\n      t.tModel(apiClient, fromModel),\n    );\n  }\n\n  const fromContents = common.getValueByPath(fromObject, ['contents']);\n  if (fromContents != null) {\n    if (Array.isArray(fromContents)) {\n      common.setValueByPath(\n        toObject,\n        ['contents'],\n        t.tContents(\n          apiClient,\n          t.tContents(apiClient, fromContents).map((item) => {\n            return contentToMldev(apiClient, item);\n          }),\n        ),\n      );\n    } else {\n      common.setValueByPath(\n        toObject,\n        ['contents'],\n        t.tContents(apiClient, fromContents),\n      );\n    }\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['generationConfig'],\n      generateContentConfigToMldev(apiClient, fromConfig, toObject),\n    );\n  }\n\n  return toObject;\n}\n\nfunction generateContentParametersToVertex(\n  apiClient: ApiClient,\n  fromObject: types.GenerateContentParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'model'],\n      t.tModel(apiClient, fromModel),\n    );\n  }\n\n  const fromContents = common.getValueByPath(fromObject, ['contents']);\n  if (fromContents != null) {\n    if (Array.isArray(fromContents)) {\n      common.setValueByPath(\n        toObject,\n        ['contents'],\n        t.tContents(\n          apiClient,\n          t.tContents(apiClient, fromContents).map((item) => {\n            return contentToVertex(apiClient, item);\n          }),\n        ),\n      );\n    } else {\n      common.setValueByPath(\n        toObject,\n        ['contents'],\n        t.tContents(apiClient, fromContents),\n      );\n    }\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['generationConfig'],\n      generateContentConfigToVertex(apiClient, fromConfig, toObject),\n    );\n  }\n\n  return toObject;\n}\n\nfunction embedContentConfigToMldev(\n  apiClient: ApiClient,\n  fromObject: types.EmbedContentConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromTaskType = common.getValueByPath(fromObject, ['taskType']);\n  if (parentObject !== undefined && fromTaskType != null) {\n    common.setValueByPath(\n      parentObject,\n      ['requests[]', 'taskType'],\n      fromTaskType,\n    );\n  }\n\n  const fromTitle = common.getValueByPath(fromObject, ['title']);\n  if (parentObject !== undefined && fromTitle != null) {\n    common.setValueByPath(parentObject, ['requests[]', 'title'], fromTitle);\n  }\n\n  const fromOutputDimensionality = common.getValueByPath(fromObject, [\n    'outputDimensionality',\n  ]);\n  if (parentObject !== undefined && fromOutputDimensionality != null) {\n    common.setValueByPath(\n      parentObject,\n      ['requests[]', 'outputDimensionality'],\n      fromOutputDimensionality,\n    );\n  }\n\n  if (common.getValueByPath(fromObject, ['mimeType']) !== undefined) {\n    throw new Error('mimeType parameter is not supported in Gemini API.');\n  }\n\n  if (common.getValueByPath(fromObject, ['autoTruncate']) !== undefined) {\n    throw new Error('autoTruncate parameter is not supported in Gemini API.');\n  }\n\n  return toObject;\n}\n\nfunction embedContentConfigToVertex(\n  apiClient: ApiClient,\n  fromObject: types.EmbedContentConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromTaskType = common.getValueByPath(fromObject, ['taskType']);\n  if (parentObject !== undefined && fromTaskType != null) {\n    common.setValueByPath(\n      parentObject,\n      ['instances[]', 'task_type'],\n      fromTaskType,\n    );\n  }\n\n  const fromTitle = common.getValueByPath(fromObject, ['title']);\n  if (parentObject !== undefined && fromTitle != null) {\n    common.setValueByPath(parentObject, ['instances[]', 'title'], fromTitle);\n  }\n\n  const fromOutputDimensionality = common.getValueByPath(fromObject, [\n    'outputDimensionality',\n  ]);\n  if (parentObject !== undefined && fromOutputDimensionality != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'outputDimensionality'],\n      fromOutputDimensionality,\n    );\n  }\n\n  const fromMimeType = common.getValueByPath(fromObject, ['mimeType']);\n  if (parentObject !== undefined && fromMimeType != null) {\n    common.setValueByPath(\n      parentObject,\n      ['instances[]', 'mimeType'],\n      fromMimeType,\n    );\n  }\n\n  const fromAutoTruncate = common.getValueByPath(fromObject, ['autoTruncate']);\n  if (parentObject !== undefined && fromAutoTruncate != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'autoTruncate'],\n      fromAutoTruncate,\n    );\n  }\n\n  return toObject;\n}\n\nfunction embedContentParametersToMldev(\n  apiClient: ApiClient,\n  fromObject: types.EmbedContentParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'model'],\n      t.tModel(apiClient, fromModel),\n    );\n  }\n\n  const fromContents = common.getValueByPath(fromObject, ['contents']);\n  if (fromContents != null) {\n    common.setValueByPath(\n      toObject,\n      ['requests[]', 'content'],\n      t.tContentsForEmbed(apiClient, fromContents),\n    );\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['config'],\n      embedContentConfigToMldev(apiClient, fromConfig, toObject),\n    );\n  }\n\n  const fromModelForEmbedContent = common.getValueByPath(fromObject, ['model']);\n  if (fromModelForEmbedContent !== undefined) {\n    common.setValueByPath(\n      toObject,\n      ['requests[]', 'model'],\n      t.tModel(apiClient, fromModelForEmbedContent),\n    );\n  }\n  return toObject;\n}\n\nfunction embedContentParametersToVertex(\n  apiClient: ApiClient,\n  fromObject: types.EmbedContentParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'model'],\n      t.tModel(apiClient, fromModel),\n    );\n  }\n\n  const fromContents = common.getValueByPath(fromObject, ['contents']);\n  if (fromContents != null) {\n    common.setValueByPath(\n      toObject,\n      ['instances[]', 'content'],\n      t.tContentsForEmbed(apiClient, fromContents),\n    );\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['config'],\n      embedContentConfigToVertex(apiClient, fromConfig, toObject),\n    );\n  }\n\n  return toObject;\n}\n\nfunction generateImagesConfigToMldev(\n  apiClient: ApiClient,\n  fromObject: types.GenerateImagesConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (common.getValueByPath(fromObject, ['outputGcsUri']) !== undefined) {\n    throw new Error('outputGcsUri parameter is not supported in Gemini API.');\n  }\n\n  if (common.getValueByPath(fromObject, ['negativePrompt']) !== undefined) {\n    throw new Error('negativePrompt parameter is not supported in Gemini API.');\n  }\n\n  const fromNumberOfImages = common.getValueByPath(fromObject, [\n    'numberOfImages',\n  ]);\n  if (parentObject !== undefined && fromNumberOfImages != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'sampleCount'],\n      fromNumberOfImages,\n    );\n  }\n\n  const fromAspectRatio = common.getValueByPath(fromObject, ['aspectRatio']);\n  if (parentObject !== undefined && fromAspectRatio != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'aspectRatio'],\n      fromAspectRatio,\n    );\n  }\n\n  const fromGuidanceScale = common.getValueByPath(fromObject, [\n    'guidanceScale',\n  ]);\n  if (parentObject !== undefined && fromGuidanceScale != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'guidanceScale'],\n      fromGuidanceScale,\n    );\n  }\n\n  if (common.getValueByPath(fromObject, ['seed']) !== undefined) {\n    throw new Error('seed parameter is not supported in Gemini API.');\n  }\n\n  const fromSafetyFilterLevel = common.getValueByPath(fromObject, [\n    'safetyFilterLevel',\n  ]);\n  if (parentObject !== undefined && fromSafetyFilterLevel != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'safetySetting'],\n      fromSafetyFilterLevel,\n    );\n  }\n\n  const fromPersonGeneration = common.getValueByPath(fromObject, [\n    'personGeneration',\n  ]);\n  if (parentObject !== undefined && fromPersonGeneration != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'personGeneration'],\n      fromPersonGeneration,\n    );\n  }\n\n  const fromIncludeSafetyAttributes = common.getValueByPath(fromObject, [\n    'includeSafetyAttributes',\n  ]);\n  if (parentObject !== undefined && fromIncludeSafetyAttributes != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'includeSafetyAttributes'],\n      fromIncludeSafetyAttributes,\n    );\n  }\n\n  const fromIncludeRaiReason = common.getValueByPath(fromObject, [\n    'includeRaiReason',\n  ]);\n  if (parentObject !== undefined && fromIncludeRaiReason != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'includeRaiReason'],\n      fromIncludeRaiReason,\n    );\n  }\n\n  const fromLanguage = common.getValueByPath(fromObject, ['language']);\n  if (parentObject !== undefined && fromLanguage != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'language'],\n      fromLanguage,\n    );\n  }\n\n  const fromOutputMimeType = common.getValueByPath(fromObject, [\n    'outputMimeType',\n  ]);\n  if (parentObject !== undefined && fromOutputMimeType != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'outputOptions', 'mimeType'],\n      fromOutputMimeType,\n    );\n  }\n\n  const fromOutputCompressionQuality = common.getValueByPath(fromObject, [\n    'outputCompressionQuality',\n  ]);\n  if (parentObject !== undefined && fromOutputCompressionQuality != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'outputOptions', 'compressionQuality'],\n      fromOutputCompressionQuality,\n    );\n  }\n\n  if (common.getValueByPath(fromObject, ['addWatermark']) !== undefined) {\n    throw new Error('addWatermark parameter is not supported in Gemini API.');\n  }\n\n  if (common.getValueByPath(fromObject, ['enhancePrompt']) !== undefined) {\n    throw new Error('enhancePrompt parameter is not supported in Gemini API.');\n  }\n\n  return toObject;\n}\n\nfunction generateImagesConfigToVertex(\n  apiClient: ApiClient,\n  fromObject: types.GenerateImagesConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromOutputGcsUri = common.getValueByPath(fromObject, ['outputGcsUri']);\n  if (parentObject !== undefined && fromOutputGcsUri != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'storageUri'],\n      fromOutputGcsUri,\n    );\n  }\n\n  const fromNegativePrompt = common.getValueByPath(fromObject, [\n    'negativePrompt',\n  ]);\n  if (parentObject !== undefined && fromNegativePrompt != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'negativePrompt'],\n      fromNegativePrompt,\n    );\n  }\n\n  const fromNumberOfImages = common.getValueByPath(fromObject, [\n    'numberOfImages',\n  ]);\n  if (parentObject !== undefined && fromNumberOfImages != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'sampleCount'],\n      fromNumberOfImages,\n    );\n  }\n\n  const fromAspectRatio = common.getValueByPath(fromObject, ['aspectRatio']);\n  if (parentObject !== undefined && fromAspectRatio != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'aspectRatio'],\n      fromAspectRatio,\n    );\n  }\n\n  const fromGuidanceScale = common.getValueByPath(fromObject, [\n    'guidanceScale',\n  ]);\n  if (parentObject !== undefined && fromGuidanceScale != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'guidanceScale'],\n      fromGuidanceScale,\n    );\n  }\n\n  const fromSeed = common.getValueByPath(fromObject, ['seed']);\n  if (parentObject !== undefined && fromSeed != null) {\n    common.setValueByPath(parentObject, ['parameters', 'seed'], fromSeed);\n  }\n\n  const fromSafetyFilterLevel = common.getValueByPath(fromObject, [\n    'safetyFilterLevel',\n  ]);\n  if (parentObject !== undefined && fromSafetyFilterLevel != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'safetySetting'],\n      fromSafetyFilterLevel,\n    );\n  }\n\n  const fromPersonGeneration = common.getValueByPath(fromObject, [\n    'personGeneration',\n  ]);\n  if (parentObject !== undefined && fromPersonGeneration != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'personGeneration'],\n      fromPersonGeneration,\n    );\n  }\n\n  const fromIncludeSafetyAttributes = common.getValueByPath(fromObject, [\n    'includeSafetyAttributes',\n  ]);\n  if (parentObject !== undefined && fromIncludeSafetyAttributes != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'includeSafetyAttributes'],\n      fromIncludeSafetyAttributes,\n    );\n  }\n\n  const fromIncludeRaiReason = common.getValueByPath(fromObject, [\n    'includeRaiReason',\n  ]);\n  if (parentObject !== undefined && fromIncludeRaiReason != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'includeRaiReason'],\n      fromIncludeRaiReason,\n    );\n  }\n\n  const fromLanguage = common.getValueByPath(fromObject, ['language']);\n  if (parentObject !== undefined && fromLanguage != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'language'],\n      fromLanguage,\n    );\n  }\n\n  const fromOutputMimeType = common.getValueByPath(fromObject, [\n    'outputMimeType',\n  ]);\n  if (parentObject !== undefined && fromOutputMimeType != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'outputOptions', 'mimeType'],\n      fromOutputMimeType,\n    );\n  }\n\n  const fromOutputCompressionQuality = common.getValueByPath(fromObject, [\n    'outputCompressionQuality',\n  ]);\n  if (parentObject !== undefined && fromOutputCompressionQuality != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'outputOptions', 'compressionQuality'],\n      fromOutputCompressionQuality,\n    );\n  }\n\n  const fromAddWatermark = common.getValueByPath(fromObject, ['addWatermark']);\n  if (parentObject !== undefined && fromAddWatermark != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'addWatermark'],\n      fromAddWatermark,\n    );\n  }\n\n  const fromEnhancePrompt = common.getValueByPath(fromObject, [\n    'enhancePrompt',\n  ]);\n  if (parentObject !== undefined && fromEnhancePrompt != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'enhancePrompt'],\n      fromEnhancePrompt,\n    );\n  }\n\n  return toObject;\n}\n\nfunction generateImagesParametersToMldev(\n  apiClient: ApiClient,\n  fromObject: types.GenerateImagesParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'model'],\n      t.tModel(apiClient, fromModel),\n    );\n  }\n\n  const fromPrompt = common.getValueByPath(fromObject, ['prompt']);\n  if (fromPrompt != null) {\n    common.setValueByPath(toObject, ['instances[0]', 'prompt'], fromPrompt);\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['config'],\n      generateImagesConfigToMldev(apiClient, fromConfig, toObject),\n    );\n  }\n\n  return toObject;\n}\n\nfunction generateImagesParametersToVertex(\n  apiClient: ApiClient,\n  fromObject: types.GenerateImagesParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'model'],\n      t.tModel(apiClient, fromModel),\n    );\n  }\n\n  const fromPrompt = common.getValueByPath(fromObject, ['prompt']);\n  if (fromPrompt != null) {\n    common.setValueByPath(toObject, ['instances[0]', 'prompt'], fromPrompt);\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['config'],\n      generateImagesConfigToVertex(apiClient, fromConfig, toObject),\n    );\n  }\n\n  return toObject;\n}\n\nfunction countTokensConfigToMldev(\n  apiClient: ApiClient,\n  fromObject: types.CountTokensConfig,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (common.getValueByPath(fromObject, ['systemInstruction']) !== undefined) {\n    throw new Error(\n      'systemInstruction parameter is not supported in Gemini API.',\n    );\n  }\n\n  if (common.getValueByPath(fromObject, ['tools']) !== undefined) {\n    throw new Error('tools parameter is not supported in Gemini API.');\n  }\n\n  if (common.getValueByPath(fromObject, ['generationConfig']) !== undefined) {\n    throw new Error(\n      'generationConfig parameter is not supported in Gemini API.',\n    );\n  }\n\n  return toObject;\n}\n\nfunction countTokensConfigToVertex(\n  apiClient: ApiClient,\n  fromObject: types.CountTokensConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromSystemInstruction = common.getValueByPath(fromObject, [\n    'systemInstruction',\n  ]);\n  if (parentObject !== undefined && fromSystemInstruction != null) {\n    common.setValueByPath(\n      parentObject,\n      ['systemInstruction'],\n      contentToVertex(apiClient, t.tContent(apiClient, fromSystemInstruction)),\n    );\n  }\n\n  const fromTools = common.getValueByPath(fromObject, ['tools']);\n  if (parentObject !== undefined && fromTools != null) {\n    if (Array.isArray(fromTools)) {\n      common.setValueByPath(\n        parentObject,\n        ['tools'],\n        fromTools.map((item) => {\n          return toolToVertex(apiClient, item);\n        }),\n      );\n    } else {\n      common.setValueByPath(parentObject, ['tools'], fromTools);\n    }\n  }\n\n  const fromGenerationConfig = common.getValueByPath(fromObject, [\n    'generationConfig',\n  ]);\n  if (parentObject !== undefined && fromGenerationConfig != null) {\n    common.setValueByPath(\n      parentObject,\n      ['generationConfig'],\n      fromGenerationConfig,\n    );\n  }\n\n  return toObject;\n}\n\nfunction countTokensParametersToMldev(\n  apiClient: ApiClient,\n  fromObject: types.CountTokensParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'model'],\n      t.tModel(apiClient, fromModel),\n    );\n  }\n\n  const fromContents = common.getValueByPath(fromObject, ['contents']);\n  if (fromContents != null) {\n    if (Array.isArray(fromContents)) {\n      common.setValueByPath(\n        toObject,\n        ['contents'],\n        t.tContents(\n          apiClient,\n          t.tContents(apiClient, fromContents).map((item) => {\n            return contentToMldev(apiClient, item);\n          }),\n        ),\n      );\n    } else {\n      common.setValueByPath(\n        toObject,\n        ['contents'],\n        t.tContents(apiClient, fromContents),\n      );\n    }\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['config'],\n      countTokensConfigToMldev(apiClient, fromConfig),\n    );\n  }\n\n  return toObject;\n}\n\nfunction countTokensParametersToVertex(\n  apiClient: ApiClient,\n  fromObject: types.CountTokensParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'model'],\n      t.tModel(apiClient, fromModel),\n    );\n  }\n\n  const fromContents = common.getValueByPath(fromObject, ['contents']);\n  if (fromContents != null) {\n    if (Array.isArray(fromContents)) {\n      common.setValueByPath(\n        toObject,\n        ['contents'],\n        t.tContents(\n          apiClient,\n          t.tContents(apiClient, fromContents).map((item) => {\n            return contentToVertex(apiClient, item);\n          }),\n        ),\n      );\n    } else {\n      common.setValueByPath(\n        toObject,\n        ['contents'],\n        t.tContents(apiClient, fromContents),\n      );\n    }\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['config'],\n      countTokensConfigToVertex(apiClient, fromConfig, toObject),\n    );\n  }\n\n  return toObject;\n}\n\nfunction computeTokensParametersToMldev(\n  apiClient: ApiClient,\n  fromObject: types.ComputeTokensParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'model'],\n      t.tModel(apiClient, fromModel),\n    );\n  }\n\n  if (common.getValueByPath(fromObject, ['contents']) !== undefined) {\n    throw new Error('contents parameter is not supported in Gemini API.');\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    common.setValueByPath(toObject, ['config'], fromConfig);\n  }\n\n  return toObject;\n}\n\nfunction computeTokensParametersToVertex(\n  apiClient: ApiClient,\n  fromObject: types.ComputeTokensParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'model'],\n      t.tModel(apiClient, fromModel),\n    );\n  }\n\n  const fromContents = common.getValueByPath(fromObject, ['contents']);\n  if (fromContents != null) {\n    if (Array.isArray(fromContents)) {\n      common.setValueByPath(\n        toObject,\n        ['contents'],\n        t.tContents(\n          apiClient,\n          t.tContents(apiClient, fromContents).map((item) => {\n            return contentToVertex(apiClient, item);\n          }),\n        ),\n      );\n    } else {\n      common.setValueByPath(\n        toObject,\n        ['contents'],\n        t.tContents(apiClient, fromContents),\n      );\n    }\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    common.setValueByPath(toObject, ['config'], fromConfig);\n  }\n\n  return toObject;\n}\n\nfunction partFromMldev(\n  apiClient: ApiClient,\n  fromObject: types.Part,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromThought = common.getValueByPath(fromObject, ['thought']);\n  if (fromThought != null) {\n    common.setValueByPath(toObject, ['thought'], fromThought);\n  }\n\n  const fromCodeExecutionResult = common.getValueByPath(fromObject, [\n    'codeExecutionResult',\n  ]);\n  if (fromCodeExecutionResult != null) {\n    common.setValueByPath(\n      toObject,\n      ['codeExecutionResult'],\n      fromCodeExecutionResult,\n    );\n  }\n\n  const fromExecutableCode = common.getValueByPath(fromObject, [\n    'executableCode',\n  ]);\n  if (fromExecutableCode != null) {\n    common.setValueByPath(toObject, ['executableCode'], fromExecutableCode);\n  }\n\n  const fromFileData = common.getValueByPath(fromObject, ['fileData']);\n  if (fromFileData != null) {\n    common.setValueByPath(toObject, ['fileData'], fromFileData);\n  }\n\n  const fromFunctionCall = common.getValueByPath(fromObject, ['functionCall']);\n  if (fromFunctionCall != null) {\n    common.setValueByPath(toObject, ['functionCall'], fromFunctionCall);\n  }\n\n  const fromFunctionResponse = common.getValueByPath(fromObject, [\n    'functionResponse',\n  ]);\n  if (fromFunctionResponse != null) {\n    common.setValueByPath(toObject, ['functionResponse'], fromFunctionResponse);\n  }\n\n  const fromInlineData = common.getValueByPath(fromObject, ['inlineData']);\n  if (fromInlineData != null) {\n    common.setValueByPath(toObject, ['inlineData'], fromInlineData);\n  }\n\n  const fromText = common.getValueByPath(fromObject, ['text']);\n  if (fromText != null) {\n    common.setValueByPath(toObject, ['text'], fromText);\n  }\n\n  return toObject;\n}\n\nfunction partFromVertex(\n  apiClient: ApiClient,\n  fromObject: types.Part,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromVideoMetadata = common.getValueByPath(fromObject, [\n    'videoMetadata',\n  ]);\n  if (fromVideoMetadata != null) {\n    common.setValueByPath(toObject, ['videoMetadata'], fromVideoMetadata);\n  }\n\n  const fromThought = common.getValueByPath(fromObject, ['thought']);\n  if (fromThought != null) {\n    common.setValueByPath(toObject, ['thought'], fromThought);\n  }\n\n  const fromCodeExecutionResult = common.getValueByPath(fromObject, [\n    'codeExecutionResult',\n  ]);\n  if (fromCodeExecutionResult != null) {\n    common.setValueByPath(\n      toObject,\n      ['codeExecutionResult'],\n      fromCodeExecutionResult,\n    );\n  }\n\n  const fromExecutableCode = common.getValueByPath(fromObject, [\n    'executableCode',\n  ]);\n  if (fromExecutableCode != null) {\n    common.setValueByPath(toObject, ['executableCode'], fromExecutableCode);\n  }\n\n  const fromFileData = common.getValueByPath(fromObject, ['fileData']);\n  if (fromFileData != null) {\n    common.setValueByPath(toObject, ['fileData'], fromFileData);\n  }\n\n  const fromFunctionCall = common.getValueByPath(fromObject, ['functionCall']);\n  if (fromFunctionCall != null) {\n    common.setValueByPath(toObject, ['functionCall'], fromFunctionCall);\n  }\n\n  const fromFunctionResponse = common.getValueByPath(fromObject, [\n    'functionResponse',\n  ]);\n  if (fromFunctionResponse != null) {\n    common.setValueByPath(toObject, ['functionResponse'], fromFunctionResponse);\n  }\n\n  const fromInlineData = common.getValueByPath(fromObject, ['inlineData']);\n  if (fromInlineData != null) {\n    common.setValueByPath(toObject, ['inlineData'], fromInlineData);\n  }\n\n  const fromText = common.getValueByPath(fromObject, ['text']);\n  if (fromText != null) {\n    common.setValueByPath(toObject, ['text'], fromText);\n  }\n\n  return toObject;\n}\n\n/** @internal */\nexport function contentFromMldev(\n  apiClient: ApiClient,\n  fromObject: types.Content,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromParts = common.getValueByPath(fromObject, ['parts']);\n  if (fromParts != null) {\n    if (Array.isArray(fromParts)) {\n      common.setValueByPath(\n        toObject,\n        ['parts'],\n        fromParts.map((item) => {\n          return partFromMldev(apiClient, item);\n        }),\n      );\n    } else {\n      common.setValueByPath(toObject, ['parts'], fromParts);\n    }\n  }\n\n  const fromRole = common.getValueByPath(fromObject, ['role']);\n  if (fromRole != null) {\n    common.setValueByPath(toObject, ['role'], fromRole);\n  }\n\n  return toObject;\n}\n\n/** @internal */\nexport function contentFromVertex(\n  apiClient: ApiClient,\n  fromObject: types.Content,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromParts = common.getValueByPath(fromObject, ['parts']);\n  if (fromParts != null) {\n    if (Array.isArray(fromParts)) {\n      common.setValueByPath(\n        toObject,\n        ['parts'],\n        fromParts.map((item) => {\n          return partFromVertex(apiClient, item);\n        }),\n      );\n    } else {\n      common.setValueByPath(toObject, ['parts'], fromParts);\n    }\n  }\n\n  const fromRole = common.getValueByPath(fromObject, ['role']);\n  if (fromRole != null) {\n    common.setValueByPath(toObject, ['role'], fromRole);\n  }\n\n  return toObject;\n}\n\nfunction citationMetadataFromMldev(\n  apiClient: ApiClient,\n  fromObject: types.CitationMetadata,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromCitations = common.getValueByPath(fromObject, ['citationSources']);\n  if (fromCitations != null) {\n    common.setValueByPath(toObject, ['citations'], fromCitations);\n  }\n\n  return toObject;\n}\n\nfunction citationMetadataFromVertex(\n  apiClient: ApiClient,\n  fromObject: types.CitationMetadata,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromCitations = common.getValueByPath(fromObject, ['citations']);\n  if (fromCitations != null) {\n    common.setValueByPath(toObject, ['citations'], fromCitations);\n  }\n\n  return toObject;\n}\n\nfunction candidateFromMldev(\n  apiClient: ApiClient,\n  fromObject: types.Candidate,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromContent = common.getValueByPath(fromObject, ['content']);\n  if (fromContent != null) {\n    common.setValueByPath(\n      toObject,\n      ['content'],\n      contentFromMldev(apiClient, fromContent),\n    );\n  }\n\n  const fromCitationMetadata = common.getValueByPath(fromObject, [\n    'citationMetadata',\n  ]);\n  if (fromCitationMetadata != null) {\n    common.setValueByPath(\n      toObject,\n      ['citationMetadata'],\n      citationMetadataFromMldev(apiClient, fromCitationMetadata),\n    );\n  }\n\n  const fromTokenCount = common.getValueByPath(fromObject, ['tokenCount']);\n  if (fromTokenCount != null) {\n    common.setValueByPath(toObject, ['tokenCount'], fromTokenCount);\n  }\n\n  const fromAvgLogprobs = common.getValueByPath(fromObject, ['avgLogprobs']);\n  if (fromAvgLogprobs != null) {\n    common.setValueByPath(toObject, ['avgLogprobs'], fromAvgLogprobs);\n  }\n\n  const fromFinishReason = common.getValueByPath(fromObject, ['finishReason']);\n  if (fromFinishReason != null) {\n    common.setValueByPath(toObject, ['finishReason'], fromFinishReason);\n  }\n\n  const fromGroundingMetadata = common.getValueByPath(fromObject, [\n    'groundingMetadata',\n  ]);\n  if (fromGroundingMetadata != null) {\n    common.setValueByPath(\n      toObject,\n      ['groundingMetadata'],\n      fromGroundingMetadata,\n    );\n  }\n\n  const fromIndex = common.getValueByPath(fromObject, ['index']);\n  if (fromIndex != null) {\n    common.setValueByPath(toObject, ['index'], fromIndex);\n  }\n\n  const fromLogprobsResult = common.getValueByPath(fromObject, [\n    'logprobsResult',\n  ]);\n  if (fromLogprobsResult != null) {\n    common.setValueByPath(toObject, ['logprobsResult'], fromLogprobsResult);\n  }\n\n  const fromSafetyRatings = common.getValueByPath(fromObject, [\n    'safetyRatings',\n  ]);\n  if (fromSafetyRatings != null) {\n    common.setValueByPath(toObject, ['safetyRatings'], fromSafetyRatings);\n  }\n\n  return toObject;\n}\n\nfunction candidateFromVertex(\n  apiClient: ApiClient,\n  fromObject: types.Candidate,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromContent = common.getValueByPath(fromObject, ['content']);\n  if (fromContent != null) {\n    common.setValueByPath(\n      toObject,\n      ['content'],\n      contentFromVertex(apiClient, fromContent),\n    );\n  }\n\n  const fromCitationMetadata = common.getValueByPath(fromObject, [\n    'citationMetadata',\n  ]);\n  if (fromCitationMetadata != null) {\n    common.setValueByPath(\n      toObject,\n      ['citationMetadata'],\n      citationMetadataFromVertex(apiClient, fromCitationMetadata),\n    );\n  }\n\n  const fromFinishMessage = common.getValueByPath(fromObject, [\n    'finishMessage',\n  ]);\n  if (fromFinishMessage != null) {\n    common.setValueByPath(toObject, ['finishMessage'], fromFinishMessage);\n  }\n\n  const fromAvgLogprobs = common.getValueByPath(fromObject, ['avgLogprobs']);\n  if (fromAvgLogprobs != null) {\n    common.setValueByPath(toObject, ['avgLogprobs'], fromAvgLogprobs);\n  }\n\n  const fromFinishReason = common.getValueByPath(fromObject, ['finishReason']);\n  if (fromFinishReason != null) {\n    common.setValueByPath(toObject, ['finishReason'], fromFinishReason);\n  }\n\n  const fromGroundingMetadata = common.getValueByPath(fromObject, [\n    'groundingMetadata',\n  ]);\n  if (fromGroundingMetadata != null) {\n    common.setValueByPath(\n      toObject,\n      ['groundingMetadata'],\n      fromGroundingMetadata,\n    );\n  }\n\n  const fromIndex = common.getValueByPath(fromObject, ['index']);\n  if (fromIndex != null) {\n    common.setValueByPath(toObject, ['index'], fromIndex);\n  }\n\n  const fromLogprobsResult = common.getValueByPath(fromObject, [\n    'logprobsResult',\n  ]);\n  if (fromLogprobsResult != null) {\n    common.setValueByPath(toObject, ['logprobsResult'], fromLogprobsResult);\n  }\n\n  const fromSafetyRatings = common.getValueByPath(fromObject, [\n    'safetyRatings',\n  ]);\n  if (fromSafetyRatings != null) {\n    common.setValueByPath(toObject, ['safetyRatings'], fromSafetyRatings);\n  }\n\n  return toObject;\n}\n\nfunction generateContentResponseFromMldev(\n  apiClient: ApiClient,\n  fromObject: types.GenerateContentResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromCandidates = common.getValueByPath(fromObject, ['candidates']);\n  if (fromCandidates != null) {\n    if (Array.isArray(fromCandidates)) {\n      common.setValueByPath(\n        toObject,\n        ['candidates'],\n        fromCandidates.map((item) => {\n          return candidateFromMldev(apiClient, item);\n        }),\n      );\n    } else {\n      common.setValueByPath(toObject, ['candidates'], fromCandidates);\n    }\n  }\n\n  const fromModelVersion = common.getValueByPath(fromObject, ['modelVersion']);\n  if (fromModelVersion != null) {\n    common.setValueByPath(toObject, ['modelVersion'], fromModelVersion);\n  }\n\n  const fromPromptFeedback = common.getValueByPath(fromObject, [\n    'promptFeedback',\n  ]);\n  if (fromPromptFeedback != null) {\n    common.setValueByPath(toObject, ['promptFeedback'], fromPromptFeedback);\n  }\n\n  const fromUsageMetadata = common.getValueByPath(fromObject, [\n    'usageMetadata',\n  ]);\n  if (fromUsageMetadata != null) {\n    common.setValueByPath(toObject, ['usageMetadata'], fromUsageMetadata);\n  }\n\n  return toObject;\n}\n\nfunction generateContentResponseFromVertex(\n  apiClient: ApiClient,\n  fromObject: types.GenerateContentResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromCandidates = common.getValueByPath(fromObject, ['candidates']);\n  if (fromCandidates != null) {\n    if (Array.isArray(fromCandidates)) {\n      common.setValueByPath(\n        toObject,\n        ['candidates'],\n        fromCandidates.map((item) => {\n          return candidateFromVertex(apiClient, item);\n        }),\n      );\n    } else {\n      common.setValueByPath(toObject, ['candidates'], fromCandidates);\n    }\n  }\n\n  const fromCreateTime = common.getValueByPath(fromObject, ['createTime']);\n  if (fromCreateTime != null) {\n    common.setValueByPath(toObject, ['createTime'], fromCreateTime);\n  }\n\n  const fromResponseId = common.getValueByPath(fromObject, ['responseId']);\n  if (fromResponseId != null) {\n    common.setValueByPath(toObject, ['responseId'], fromResponseId);\n  }\n\n  const fromModelVersion = common.getValueByPath(fromObject, ['modelVersion']);\n  if (fromModelVersion != null) {\n    common.setValueByPath(toObject, ['modelVersion'], fromModelVersion);\n  }\n\n  const fromPromptFeedback = common.getValueByPath(fromObject, [\n    'promptFeedback',\n  ]);\n  if (fromPromptFeedback != null) {\n    common.setValueByPath(toObject, ['promptFeedback'], fromPromptFeedback);\n  }\n\n  const fromUsageMetadata = common.getValueByPath(fromObject, [\n    'usageMetadata',\n  ]);\n  if (fromUsageMetadata != null) {\n    common.setValueByPath(toObject, ['usageMetadata'], fromUsageMetadata);\n  }\n\n  return toObject;\n}\n\nfunction contentEmbeddingStatisticsFromMldev(\n  apiClient: ApiClient,\n  fromObject: types.ContentEmbeddingStatistics,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  return toObject;\n}\n\nfunction contentEmbeddingStatisticsFromVertex(\n  apiClient: ApiClient,\n  fromObject: types.ContentEmbeddingStatistics,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromTruncated = common.getValueByPath(fromObject, ['truncated']);\n  if (fromTruncated != null) {\n    common.setValueByPath(toObject, ['truncated'], fromTruncated);\n  }\n\n  const fromTokenCount = common.getValueByPath(fromObject, ['token_count']);\n  if (fromTokenCount != null) {\n    common.setValueByPath(toObject, ['tokenCount'], fromTokenCount);\n  }\n\n  return toObject;\n}\n\nfunction contentEmbeddingFromMldev(\n  apiClient: ApiClient,\n  fromObject: types.ContentEmbedding,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromValues = common.getValueByPath(fromObject, ['values']);\n  if (fromValues != null) {\n    common.setValueByPath(toObject, ['values'], fromValues);\n  }\n\n  return toObject;\n}\n\nfunction contentEmbeddingFromVertex(\n  apiClient: ApiClient,\n  fromObject: types.ContentEmbedding,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromValues = common.getValueByPath(fromObject, ['values']);\n  if (fromValues != null) {\n    common.setValueByPath(toObject, ['values'], fromValues);\n  }\n\n  const fromStatistics = common.getValueByPath(fromObject, ['statistics']);\n  if (fromStatistics != null) {\n    common.setValueByPath(\n      toObject,\n      ['statistics'],\n      contentEmbeddingStatisticsFromVertex(apiClient, fromStatistics),\n    );\n  }\n\n  return toObject;\n}\n\nfunction embedContentMetadataFromMldev(\n  apiClient: ApiClient,\n  fromObject: types.EmbedContentMetadata,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  return toObject;\n}\n\nfunction embedContentMetadataFromVertex(\n  apiClient: ApiClient,\n  fromObject: types.EmbedContentMetadata,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromBillableCharacterCount = common.getValueByPath(fromObject, [\n    'billableCharacterCount',\n  ]);\n  if (fromBillableCharacterCount != null) {\n    common.setValueByPath(\n      toObject,\n      ['billableCharacterCount'],\n      fromBillableCharacterCount,\n    );\n  }\n\n  return toObject;\n}\n\nfunction embedContentResponseFromMldev(\n  apiClient: ApiClient,\n  fromObject: types.EmbedContentResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromEmbeddings = common.getValueByPath(fromObject, ['embeddings']);\n  if (fromEmbeddings != null) {\n    if (Array.isArray(fromEmbeddings)) {\n      common.setValueByPath(\n        toObject,\n        ['embeddings'],\n        fromEmbeddings.map((item) => {\n          return contentEmbeddingFromMldev(apiClient, item);\n        }),\n      );\n    } else {\n      common.setValueByPath(toObject, ['embeddings'], fromEmbeddings);\n    }\n  }\n\n  const fromMetadata = common.getValueByPath(fromObject, ['metadata']);\n  if (fromMetadata != null) {\n    common.setValueByPath(\n      toObject,\n      ['metadata'],\n      embedContentMetadataFromMldev(apiClient, fromMetadata),\n    );\n  }\n\n  return toObject;\n}\n\nfunction embedContentResponseFromVertex(\n  apiClient: ApiClient,\n  fromObject: types.EmbedContentResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromEmbeddings = common.getValueByPath(fromObject, [\n    'predictions[]',\n    'embeddings',\n  ]);\n  if (fromEmbeddings != null) {\n    if (Array.isArray(fromEmbeddings)) {\n      common.setValueByPath(\n        toObject,\n        ['embeddings'],\n        fromEmbeddings.map((item) => {\n          return contentEmbeddingFromVertex(apiClient, item);\n        }),\n      );\n    } else {\n      common.setValueByPath(toObject, ['embeddings'], fromEmbeddings);\n    }\n  }\n\n  const fromMetadata = common.getValueByPath(fromObject, ['metadata']);\n  if (fromMetadata != null) {\n    common.setValueByPath(\n      toObject,\n      ['metadata'],\n      embedContentMetadataFromVertex(apiClient, fromMetadata),\n    );\n  }\n\n  return toObject;\n}\n\nfunction imageFromMldev(\n  apiClient: ApiClient,\n  fromObject: types.Image,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromImageBytes = common.getValueByPath(fromObject, [\n    'bytesBase64Encoded',\n  ]);\n  if (fromImageBytes != null) {\n    common.setValueByPath(\n      toObject,\n      ['imageBytes'],\n      t.tBytes(apiClient, fromImageBytes),\n    );\n  }\n\n  const fromMimeType = common.getValueByPath(fromObject, ['mimeType']);\n  if (fromMimeType != null) {\n    common.setValueByPath(toObject, ['mimeType'], fromMimeType);\n  }\n\n  return toObject;\n}\n\nfunction imageFromVertex(\n  apiClient: ApiClient,\n  fromObject: types.Image,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromGcsUri = common.getValueByPath(fromObject, ['gcsUri']);\n  if (fromGcsUri != null) {\n    common.setValueByPath(toObject, ['gcsUri'], fromGcsUri);\n  }\n\n  const fromImageBytes = common.getValueByPath(fromObject, [\n    'bytesBase64Encoded',\n  ]);\n  if (fromImageBytes != null) {\n    common.setValueByPath(\n      toObject,\n      ['imageBytes'],\n      t.tBytes(apiClient, fromImageBytes),\n    );\n  }\n\n  const fromMimeType = common.getValueByPath(fromObject, ['mimeType']);\n  if (fromMimeType != null) {\n    common.setValueByPath(toObject, ['mimeType'], fromMimeType);\n  }\n\n  return toObject;\n}\n\nfunction generatedImageFromMldev(\n  apiClient: ApiClient,\n  fromObject: types.GeneratedImage,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromImage = common.getValueByPath(fromObject, ['_self']);\n  if (fromImage != null) {\n    common.setValueByPath(\n      toObject,\n      ['image'],\n      imageFromMldev(apiClient, fromImage),\n    );\n  }\n\n  const fromRaiFilteredReason = common.getValueByPath(fromObject, [\n    'raiFilteredReason',\n  ]);\n  if (fromRaiFilteredReason != null) {\n    common.setValueByPath(\n      toObject,\n      ['raiFilteredReason'],\n      fromRaiFilteredReason,\n    );\n  }\n\n  return toObject;\n}\n\nfunction generatedImageFromVertex(\n  apiClient: ApiClient,\n  fromObject: types.GeneratedImage,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromImage = common.getValueByPath(fromObject, ['_self']);\n  if (fromImage != null) {\n    common.setValueByPath(\n      toObject,\n      ['image'],\n      imageFromVertex(apiClient, fromImage),\n    );\n  }\n\n  const fromRaiFilteredReason = common.getValueByPath(fromObject, [\n    'raiFilteredReason',\n  ]);\n  if (fromRaiFilteredReason != null) {\n    common.setValueByPath(\n      toObject,\n      ['raiFilteredReason'],\n      fromRaiFilteredReason,\n    );\n  }\n\n  const fromEnhancedPrompt = common.getValueByPath(fromObject, ['prompt']);\n  if (fromEnhancedPrompt != null) {\n    common.setValueByPath(toObject, ['enhancedPrompt'], fromEnhancedPrompt);\n  }\n\n  return toObject;\n}\n\nfunction generateImagesResponseFromMldev(\n  apiClient: ApiClient,\n  fromObject: types.GenerateImagesResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromGeneratedImages = common.getValueByPath(fromObject, [\n    'predictions',\n  ]);\n  if (fromGeneratedImages != null) {\n    if (Array.isArray(fromGeneratedImages)) {\n      common.setValueByPath(\n        toObject,\n        ['generatedImages'],\n        fromGeneratedImages.map((item) => {\n          return generatedImageFromMldev(apiClient, item);\n        }),\n      );\n    } else {\n      common.setValueByPath(toObject, ['generatedImages'], fromGeneratedImages);\n    }\n  }\n\n  return toObject;\n}\n\nfunction generateImagesResponseFromVertex(\n  apiClient: ApiClient,\n  fromObject: types.GenerateImagesResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromGeneratedImages = common.getValueByPath(fromObject, [\n    'predictions',\n  ]);\n  if (fromGeneratedImages != null) {\n    if (Array.isArray(fromGeneratedImages)) {\n      common.setValueByPath(\n        toObject,\n        ['generatedImages'],\n        fromGeneratedImages.map((item) => {\n          return generatedImageFromVertex(apiClient, item);\n        }),\n      );\n    } else {\n      common.setValueByPath(toObject, ['generatedImages'], fromGeneratedImages);\n    }\n  }\n\n  return toObject;\n}\n\nfunction countTokensResponseFromMldev(\n  apiClient: ApiClient,\n  fromObject: types.CountTokensResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromTotalTokens = common.getValueByPath(fromObject, ['totalTokens']);\n  if (fromTotalTokens != null) {\n    common.setValueByPath(toObject, ['totalTokens'], fromTotalTokens);\n  }\n\n  const fromCachedContentTokenCount = common.getValueByPath(fromObject, [\n    'cachedContentTokenCount',\n  ]);\n  if (fromCachedContentTokenCount != null) {\n    common.setValueByPath(\n      toObject,\n      ['cachedContentTokenCount'],\n      fromCachedContentTokenCount,\n    );\n  }\n\n  return toObject;\n}\n\nfunction countTokensResponseFromVertex(\n  apiClient: ApiClient,\n  fromObject: types.CountTokensResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromTotalTokens = common.getValueByPath(fromObject, ['totalTokens']);\n  if (fromTotalTokens != null) {\n    common.setValueByPath(toObject, ['totalTokens'], fromTotalTokens);\n  }\n\n  return toObject;\n}\n\nfunction computeTokensResponseFromMldev(\n  apiClient: ApiClient,\n  fromObject: types.ComputeTokensResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromTokensInfo = common.getValueByPath(fromObject, ['tokensInfo']);\n  if (fromTokensInfo != null) {\n    common.setValueByPath(toObject, ['tokensInfo'], fromTokensInfo);\n  }\n\n  return toObject;\n}\n\nfunction computeTokensResponseFromVertex(\n  apiClient: ApiClient,\n  fromObject: types.ComputeTokensResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromTokensInfo = common.getValueByPath(fromObject, ['tokensInfo']);\n  if (fromTokensInfo != null) {\n    common.setValueByPath(toObject, ['tokensInfo'], fromTokensInfo);\n  }\n\n  return toObject;\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Live client.\n *\n * @experimental\n */\n\nimport {ApiClient} from './_api_client';\nimport {Auth} from './_auth';\nimport * as common from './_common';\nimport * as t from './_transformers';\nimport {WebSocket, WebSocketCallbacks, WebSocketFactory} from './_websocket';\nimport {\n  contentFromMldev,\n  contentFromVertex,\n  contentToMldev,\n  contentToVertex,\n  toolToMldev,\n  toolToVertex,\n} from './models';\nimport * as types from './types';\n\nconst FUNCTION_RESPONSE_REQUIRES_ID =\n  'FunctionResponse request must have an `id` field from the response of a ToolCall.FunctionalCalls in Google AI.';\n\nfunction liveConnectConfigToMldev(\n  apiClient: ApiClient,\n  fromObject: types.LiveConnectConfig,\n): types.LiveClientSetup {\n  const toObject: Record<string, unknown> = {};\n\n  const fromGenerationConfig = common.getValueByPath(fromObject, [\n    'generationConfig',\n  ]);\n  if (fromGenerationConfig !== undefined) {\n    common.setValueByPath(toObject, ['generationConfig'], fromGenerationConfig);\n  }\n\n  const fromResponseModalities = common.getValueByPath(fromObject, [\n    'responseModalities',\n  ]);\n  if (fromResponseModalities !== undefined) {\n    common.setValueByPath(\n      toObject,\n      ['generationConfig', 'responseModalities'],\n      fromResponseModalities,\n    );\n  }\n\n  const fromSpeechConfig = common.getValueByPath(fromObject, ['speechConfig']);\n  if (fromSpeechConfig !== undefined) {\n    common.setValueByPath(\n      toObject,\n      ['generationConfig', 'speechConfig'],\n      fromSpeechConfig,\n    );\n  }\n\n  const fromSystemInstruction = common.getValueByPath(fromObject, [\n    'systemInstruction',\n  ]);\n  if (fromSystemInstruction !== undefined && fromSystemInstruction !== null) {\n    common.setValueByPath(\n      toObject,\n      ['systemInstruction'],\n      contentToMldev(apiClient, fromSystemInstruction),\n    );\n  }\n\n  const fromTools = common.getValueByPath(fromObject, ['tools']);\n  if (\n    fromTools !== undefined &&\n    fromTools !== null &&\n    Array.isArray(fromTools)\n  ) {\n    common.setValueByPath(\n      toObject,\n      ['tools'],\n      fromTools.map((item: types.Tool) => {\n        return toolToMldev(apiClient, item);\n      }),\n    );\n  }\n\n  return toObject;\n}\n\nfunction liveConnectConfigToVertex(\n  apiClient: ApiClient,\n  fromObject: types.LiveConnectConfig,\n): types.LiveClientSetup {\n  const toObject: Record<string, unknown> = {};\n\n  const fromGenerationConfig = common.getValueByPath(fromObject, [\n    'generationConfig',\n  ]);\n  if (fromGenerationConfig !== undefined) {\n    common.setValueByPath(toObject, ['generationConfig'], fromGenerationConfig);\n  }\n\n  const fromResponseModalities = common.getValueByPath(fromObject, [\n    'responseModalities',\n  ]);\n  if (fromResponseModalities !== undefined) {\n    common.setValueByPath(\n      toObject,\n      ['generationConfig', 'responseModalities'],\n      fromResponseModalities,\n    );\n  } else {\n    // Set default to AUDIO to align with MLDev API.\n    common.setValueByPath(\n      toObject,\n      ['generationConfig', 'responseModalities'],\n      ['AUDIO'],\n    );\n  }\n\n  const fromSpeechConfig = common.getValueByPath(fromObject, ['speechConfig']);\n  if (fromSpeechConfig !== undefined) {\n    common.setValueByPath(\n      toObject,\n      ['generationConfig', 'speechConfig'],\n      fromSpeechConfig,\n    );\n  }\n\n  const fromSystemInstruction = common.getValueByPath(fromObject, [\n    'systemInstruction',\n  ]);\n  if (fromSystemInstruction !== undefined && fromSystemInstruction !== null) {\n    common.setValueByPath(\n      toObject,\n      ['systemInstruction'],\n      contentToVertex(apiClient, fromSystemInstruction),\n    );\n  }\n\n  const fromTools = common.getValueByPath(fromObject, ['tools']);\n  if (\n    fromTools !== undefined &&\n    fromTools !== null &&\n    Array.isArray(fromTools)\n  ) {\n    common.setValueByPath(\n      toObject,\n      ['tools'],\n      fromTools.map((item: types.Tool) => {\n        return toolToVertex(apiClient, item);\n      }),\n    );\n  }\n\n  return toObject;\n}\n\nfunction liveConnectParametersToMldev(\n  apiClient: ApiClient,\n  fromObject: types.LiveConnectParameters,\n): types.LiveClientMessage {\n  const toObject: Record<string, unknown> = {};\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig !== undefined && fromConfig !== null) {\n    common.setValueByPath(\n      toObject,\n      ['setup'],\n      liveConnectConfigToMldev(apiClient, fromConfig),\n    );\n  }\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel !== undefined) {\n    common.setValueByPath(toObject, ['setup', 'model'], fromModel);\n  }\n\n  return toObject;\n}\n\nfunction liveConnectParametersToVertex(\n  apiClient: ApiClient,\n  fromObject: types.LiveConnectParameters,\n): types.LiveClientMessage {\n  const toObject: Record<string, unknown> = {};\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig !== undefined && fromConfig !== null) {\n    common.setValueByPath(\n      toObject,\n      ['setup'],\n      liveConnectConfigToVertex(apiClient, fromConfig),\n    );\n  }\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel !== undefined) {\n    common.setValueByPath(toObject, ['setup', 'model'], fromModel);\n  }\n\n  return toObject;\n}\n\nfunction liveServerContentFromMldev(\n  apiClient: ApiClient,\n  fromObject: types.LiveServerContent,\n): types.LiveServerContent {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModelTurn = common.getValueByPath(fromObject, ['modelTurn']);\n  if (fromModelTurn !== undefined && fromModelTurn !== null) {\n    common.setValueByPath(\n      toObject,\n      ['modelTurn'],\n      contentFromMldev(apiClient, fromModelTurn),\n    );\n  }\n\n  const fromTurnComplete = common.getValueByPath(fromObject, ['turnComplete']);\n  if (fromTurnComplete !== undefined) {\n    common.setValueByPath(toObject, ['turnComplete'], fromTurnComplete);\n  }\n\n  const fromInterrupted = common.getValueByPath(fromObject, ['interrupted']);\n  if (fromInterrupted !== undefined) {\n    common.setValueByPath(toObject, ['interrupted'], fromInterrupted);\n  }\n\n  return toObject;\n}\n\nfunction liveServerContentFromVertex(\n  apiClient: ApiClient,\n  fromObject: types.LiveServerContent,\n): types.LiveServerContent {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModelTurn = common.getValueByPath(fromObject, ['modelTurn']);\n  if (fromModelTurn !== undefined && fromModelTurn !== null) {\n    common.setValueByPath(\n      toObject,\n      ['modelTurn'],\n      contentFromVertex(apiClient, fromModelTurn),\n    );\n  }\n\n  const fromTurnComplete = common.getValueByPath(fromObject, ['turnComplete']);\n  if (fromTurnComplete !== undefined) {\n    common.setValueByPath(toObject, ['turnComplete'], fromTurnComplete);\n  }\n\n  const fromInterrupted = common.getValueByPath(fromObject, ['interrupted']);\n  if (fromInterrupted !== undefined) {\n    common.setValueByPath(toObject, ['interrupted'], fromInterrupted);\n  }\n\n  return toObject;\n}\n\nfunction functionCallFromMldev(\n  apiClient: ApiClient,\n  fromObject: types.FunctionCall,\n): types.FunctionCall {\n  const toObject: Record<string, unknown> = {};\n\n  const fromId = common.getValueByPath(fromObject, ['id']);\n  if (fromId !== undefined) {\n    common.setValueByPath(toObject, ['id'], fromId);\n  }\n\n  const fromArgs = common.getValueByPath(fromObject, ['args']);\n  if (fromArgs !== undefined) {\n    common.setValueByPath(toObject, ['args'], fromArgs);\n  }\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName !== undefined) {\n    common.setValueByPath(toObject, ['name'], fromName);\n  }\n\n  return toObject;\n}\n\nfunction functionCallFromVertex(\n  apiClient: ApiClient,\n  fromObject: types.FunctionCall,\n): types.FunctionCall {\n  const toObject: Record<string, unknown> = {};\n\n  const fromArgs = common.getValueByPath(fromObject, ['args']);\n  if (fromArgs !== undefined) {\n    common.setValueByPath(toObject, ['args'], fromArgs);\n  }\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName !== undefined) {\n    common.setValueByPath(toObject, ['name'], fromName);\n  }\n\n  return toObject;\n}\n\nfunction liveServerToolCallFromMldev(\n  apiClient: ApiClient,\n  fromObject: types.LiveServerToolCall,\n): types.LiveServerToolCall {\n  const toObject: Record<string, unknown> = {};\n\n  const fromFunctionCalls = common.getValueByPath(fromObject, [\n    'functionCalls',\n  ]);\n  if (\n    fromFunctionCalls !== undefined &&\n    fromFunctionCalls !== null &&\n    Array.isArray(fromFunctionCalls)\n  ) {\n    common.setValueByPath(\n      toObject,\n      ['functionCalls'],\n      fromFunctionCalls.map((item: types.FunctionCall) => {\n        return functionCallFromMldev(apiClient, item);\n      }),\n    );\n  }\n\n  return toObject;\n}\n\nfunction liveServerToolCallFromVertex(\n  apiClient: ApiClient,\n  fromObject: types.LiveServerToolCall,\n): types.LiveServerToolCall {\n  const toObject: Record<string, unknown> = {};\n\n  const fromFunctionCalls = common.getValueByPath(fromObject, [\n    'functionCalls',\n  ]);\n  if (\n    fromFunctionCalls !== undefined &&\n    fromFunctionCalls !== null &&\n    Array.isArray(fromFunctionCalls)\n  ) {\n    common.setValueByPath(\n      toObject,\n      ['functionCalls'],\n      fromFunctionCalls.map((item: types.FunctionCall) => {\n        return functionCallFromVertex(apiClient, item);\n      }),\n    );\n  }\n\n  return toObject;\n}\n\nfunction liveServerToolCallCancellationFromMldev(\n  apiClient: ApiClient,\n  fromObject: types.LiveServerToolCallCancellation,\n): types.LiveServerToolCallCancellation {\n  const toObject: Record<string, unknown> = {};\n\n  const fromIds = common.getValueByPath(fromObject, ['ids']);\n  if (fromIds !== undefined) {\n    common.setValueByPath(toObject, ['ids'], fromIds);\n  }\n\n  return toObject;\n}\n\nfunction liveServerToolCallCancellationFromVertex(\n  apiClient: ApiClient,\n  fromObject: types.LiveServerToolCallCancellation,\n): types.LiveServerToolCallCancellation {\n  const toObject: Record<string, unknown> = {};\n\n  const fromIds = common.getValueByPath(fromObject, ['ids']);\n  if (fromIds !== undefined) {\n    common.setValueByPath(toObject, ['ids'], fromIds);\n  }\n\n  return toObject;\n}\n\nfunction liveServerMessageFromMldev(\n  apiClient: ApiClient,\n  fromObject: types.LiveServerMessage,\n): types.LiveServerMessage {\n  const toObject: Record<string, unknown> = {};\n\n  const fromSetupComplete = common.getValueByPath(fromObject, [\n    'setupComplete',\n  ]);\n  if (fromSetupComplete !== undefined) {\n    common.setValueByPath(toObject, ['setupComplete'], fromSetupComplete);\n  }\n\n  const fromServerContent = common.getValueByPath(fromObject, [\n    'serverContent',\n  ]);\n  if (fromServerContent !== undefined && fromServerContent !== null) {\n    common.setValueByPath(\n      toObject,\n      ['serverContent'],\n      liveServerContentFromMldev(apiClient, fromServerContent),\n    );\n  }\n\n  const fromToolCall = common.getValueByPath(fromObject, ['toolCall']);\n  if (fromToolCall !== undefined && fromToolCall !== null) {\n    common.setValueByPath(\n      toObject,\n      ['toolCall'],\n      liveServerToolCallFromMldev(apiClient, fromToolCall),\n    );\n  }\n\n  const fromToolCallCancellation = common.getValueByPath(fromObject, [\n    'toolCallCancellation',\n  ]);\n  if (\n    fromToolCallCancellation !== undefined &&\n    fromToolCallCancellation !== null\n  ) {\n    common.setValueByPath(\n      toObject,\n      ['toolCallCancellation'],\n      liveServerToolCallCancellationFromMldev(\n        apiClient,\n        fromToolCallCancellation,\n      ),\n    );\n  }\n\n  return toObject;\n}\n\nfunction liveServerMessageFromVertex(\n  apiClient: ApiClient,\n  fromObject: types.LiveServerMessage,\n): types.LiveServerMessage {\n  const toObject: Record<string, unknown> = {};\n\n  const fromSetupComplete = common.getValueByPath(fromObject, [\n    'setupComplete',\n  ]);\n  if (fromSetupComplete !== undefined) {\n    common.setValueByPath(toObject, ['setupComplete'], fromSetupComplete);\n  }\n\n  const fromServerContent = common.getValueByPath(fromObject, [\n    'serverContent',\n  ]);\n  if (fromServerContent !== undefined && fromServerContent !== null) {\n    common.setValueByPath(\n      toObject,\n      ['serverContent'],\n      liveServerContentFromVertex(apiClient, fromServerContent),\n    );\n  }\n\n  const fromToolCall = common.getValueByPath(fromObject, ['toolCall']);\n  if (fromToolCall !== undefined && fromToolCall !== null) {\n    common.setValueByPath(\n      toObject,\n      ['toolCall'],\n      liveServerToolCallFromVertex(apiClient, fromToolCall),\n    );\n  }\n\n  const fromToolCallCancellation = common.getValueByPath(fromObject, [\n    'toolCallCancellation',\n  ]);\n  if (\n    fromToolCallCancellation !== undefined &&\n    fromToolCallCancellation !== null\n  ) {\n    common.setValueByPath(\n      toObject,\n      ['toolCallCancellation'],\n      liveServerToolCallCancellationFromVertex(\n        apiClient,\n        fromToolCallCancellation,\n      ),\n    );\n  }\n\n  return toObject;\n}\n\n/**\n * Handles incoming messages from the WebSocket.\n *\n * @remarks\n * This function is responsible for parsing incoming messages, transforming them\n * into LiveServerMessages, and then calling the onmessage callback. Note that\n * the first message which is received from the server is a setupComplete\n * message.\n *\n * @param apiClient The ApiClient instance.\n * @param onmessage The user-provided onmessage callback (if any).\n * @param event The MessageEvent from the WebSocket.\n */\nasync function handleWebSocketMessage(\n  apiClient: ApiClient,\n  onmessage: (msg: types.LiveServerMessage) => void,\n  event: MessageEvent,\n): Promise<void> {\n  let serverMessage: types.LiveServerMessage;\n  let data: types.LiveServerMessage;\n  if (event.data instanceof Blob) {\n    data = JSON.parse(await event.data.text()) as types.LiveServerMessage;\n  } else {\n    data = JSON.parse(event.data) as types.LiveServerMessage;\n  }\n  if (apiClient.isVertexAI()) {\n    serverMessage = liveServerMessageFromVertex(apiClient, data);\n  } else {\n    serverMessage = liveServerMessageFromMldev(apiClient, data);\n  }\n\n  onmessage(serverMessage);\n}\n\n/**\n   Live class encapsulates the configuration for live interaction with the\n   Generative Language API. It embeds ApiClient for general API settings.\n\n   @experimental\n  */\nexport class Live {\n  constructor(\n    private readonly apiClient: ApiClient,\n    private readonly auth: Auth,\n    private readonly webSocketFactory: WebSocketFactory,\n  ) {}\n\n  /**\n     Establishes a connection to the specified model with the given\n     configuration and returns a Session object representing that connection.\n\n     @experimental\n\n     @param params - The parameters for establishing a connection to the model.\n     @return A live session.\n\n     @example\n     ```ts\n     const session = await ai.live.connect({\n       model: 'gemini-2.0-flash-exp',\n       config: {\n         responseModalities: [Modality.AUDIO],\n       },\n       callbacks: {\n         onopen: () => {\n           console.log('Connected to the socket.');\n         },\n         onmessage: (e: MessageEvent) => {\n           console.log('Received message from the server: %s\\n', debug(e.data));\n         },\n         onerror: (e: ErrorEvent) => {\n           console.log('Error occurred: %s\\n', debug(e.error));\n         },\n         onclose: (e: CloseEvent) => {\n           console.log('Connection closed.');\n         },\n       },\n     });\n     ```\n    */\n  async connect(params: types.LiveConnectParameters): Promise<Session> {\n    const websocketBaseUrl = this.apiClient.getWebsocketBaseUrl();\n    const apiVersion = this.apiClient.getApiVersion();\n    let url: string;\n    const headers = mapToHeaders(this.apiClient.getDefaultHeaders());\n    if (this.apiClient.isVertexAI()) {\n      url = `${websocketBaseUrl}/ws/google.cloud.aiplatform.${\n        apiVersion\n      }.LlmBidiService/BidiGenerateContent`;\n      await this.auth.addAuthHeaders(headers);\n    } else {\n      const apiKey = this.apiClient.getApiKey();\n      url = `${websocketBaseUrl}/ws/google.ai.generativelanguage.${\n        apiVersion\n      }.GenerativeService.BidiGenerateContent?key=${apiKey}`;\n    }\n\n    let onopenResolve: (value: unknown) => void = () => {};\n    const onopenPromise = new Promise((resolve: (value: unknown) => void) => {\n      onopenResolve = resolve;\n    });\n\n    const callbacks: types.LiveCallbacks = params.callbacks;\n\n    const onopenAwaitedCallback = function () {\n      callbacks?.onopen?.();\n      onopenResolve({});\n    };\n\n    const apiClient = this.apiClient;\n\n    const websocketCallbacks: WebSocketCallbacks = {\n      onopen: onopenAwaitedCallback,\n      onmessage: (event: MessageEvent) => {\n        void handleWebSocketMessage(apiClient, callbacks.onmessage, event);\n      },\n      onerror: callbacks?.onerror ??\n          function(e: ErrorEvent) {\n            void e;\n          },\n      onclose: callbacks?.onclose ??\n          function(e: CloseEvent) {\n            void e;\n          },\n    };\n\n    const conn = this.webSocketFactory.create(\n      url,\n      headersToMap(headers),\n      websocketCallbacks,\n    );\n    conn.connect();\n    // Wait for the websocket to open before sending requests.\n    await onopenPromise;\n\n    let transformedModel = t.tModel(this.apiClient, params.model);\n    if (\n      this.apiClient.isVertexAI() &&\n      transformedModel.startsWith('publishers/')\n    ) {\n      const project = this.apiClient.getProject();\n      const location = this.apiClient.getLocation();\n      transformedModel =\n        `projects/${project}/locations/${location}/` + transformedModel;\n    }\n\n    let clientMessage: types.LiveClientMessage = {};\n    const liveConnectParameters: types.LiveConnectParameters = {\n      model: transformedModel,\n      config: params.config,\n      callbacks: params.callbacks,\n    };\n    if (this.apiClient.isVertexAI()) {\n      clientMessage = liveConnectParametersToVertex(\n        this.apiClient,\n        liveConnectParameters,\n      );\n    } else {\n      clientMessage = liveConnectParametersToMldev(\n        this.apiClient,\n        liveConnectParameters,\n      );\n    }\n    conn.send(JSON.stringify(clientMessage));\n    return new Session(conn, this.apiClient);\n  }\n}\n\n/**\n   Represents a connection to the API.\n\n   @experimental\n  */\nexport class Session {\n  constructor(\n    readonly conn: WebSocket,\n    private readonly apiClient: ApiClient,\n  ) {}\n\n  private tLiveClientContent(\n    apiClient: ApiClient,\n    params: types.SessionSendClientContentParameters,\n  ): types.LiveClientMessage {\n    if (params.turns !== null && params.turns !== undefined) {\n      let contents: types.Content[] = [];\n      try {\n        contents = t.tContents(\n          apiClient,\n          params.turns as types.ContentListUnion,\n        );\n        if (apiClient.isVertexAI()) {\n          contents = contents.map((item) => contentToVertex(apiClient, item));\n        } else {\n          contents = contents.map((item) => contentToMldev(apiClient, item));\n        }\n      } catch {\n        throw new Error(\n          `Failed to parse client content \"turns\", type: '${typeof params.turns}'`,\n        );\n      }\n      return {\n        clientContent: {turns: contents, turnComplete: params.turnComplete},\n      };\n    }\n\n    return {\n      clientContent: {turnComplete: params.turnComplete},\n    };\n  }\n\n  private tLiveClientRealtimeInput(\n    apiClient: ApiClient,\n    params: types.SessionSendRealtimeInputParameters,\n  ): types.LiveClientMessage {\n    let clientMessage: types.LiveClientMessage = {};\n    if (!('media' in params) || !params.media) {\n      throw new Error(\n        `Failed to convert realtime input \"media\", type: '${typeof params.media}'`,\n      );\n    }\n\n    // LiveClientRealtimeInput\n    clientMessage = {realtimeInput: {mediaChunks: [params.media]}};\n    return clientMessage;\n  }\n\n  private tLiveClienttToolResponse(\n    apiClient: ApiClient,\n    params: types.SessionSendToolResponseParameters,\n  ): types.LiveClientMessage {\n    let functionResponses: types.FunctionResponse[] = [];\n\n    if (params.functionResponses == null) {\n      throw new Error('functionResponses is required.');\n    }\n\n    if (!Array.isArray(params.functionResponses)) {\n      functionResponses = [params.functionResponses];\n    }\n\n    if (functionResponses.length === 0) {\n      throw new Error('functionResponses is required.');\n    }\n\n    for (const functionResponse of functionResponses) {\n      if (\n        typeof functionResponse !== 'object' ||\n        functionResponse === null ||\n        !('name' in functionResponse) ||\n        !('response' in functionResponse)\n      ) {\n        throw new Error(\n          `Could not parse function response, type '${typeof functionResponse}'.`,\n        );\n      }\n      if (!apiClient.isVertexAI() && !('id' in functionResponse)) {\n        throw new Error(FUNCTION_RESPONSE_REQUIRES_ID);\n      }\n    }\n\n    const clientMessage: types.LiveClientMessage = {\n      toolResponse: {functionResponses: functionResponses},\n    };\n    return clientMessage;\n  }\n\n  /**\n    Send a message over the established connection.\n\n    @param params - Contains two **optional** properties, `turns` and\n        `turnComplete`.\n\n      - `turns` will be converted to a `Content[]`\n      - `turnComplete: true` indicates that you are done sending content and\n    expect a response.\n\n    @experimental\n\n    @remanks\n    There are two ways to send messages to the live API:\n    `sendClientContent` and `sendRealtimeInput`.\n\n    `sendClientContent` messages are added to the model context **in order**.\n    Having a conversation using `sendClientContent` messages is roughly\n    equivalent to using the `Chat.sendMessageStream`, except that the state of\n    the `chat` history is stored on the API server instead of locally.\n\n    Because of `sendClientContent`'s order guarantee, the model cannot respons\n    as quickly to `sendClientContent` messages as to `sendRealtimeInput`\n    messages. This makes the biggest difference when sending objects that have\n    significant preprocessing time (typically images).\n\n    The `sendClientContent` message sends a `Content[]`\n    which has more options than the `Blob` sent by `sendRealtimeInput`.\n\n    So the main use-cases for `sendClientContent` over `sendRealtimeInput` are:\n\n    - Sending anything that can't be represented as a `Blob` (text,\n    `sendClientContent({turns=\"Hello?\"}`)).\n    - Managing turns when not using audio input and voice activity detection.\n      (`sendClientContent({turnComplete:true})` or the short form\n    `sendClientContent()`)\n    - Prefilling a conversation context\n      ```\n      sendClientContent({\n          turns: [\n            Content({role:user, parts:...}),\n            Content({role:user, parts:...}),\n            ...\n          ]\n      })\n      ```\n    @experimental\n   */\n  sendClientContent(params: types.SessionSendClientContentParameters) {\n    if (params.turns == null && params.turnComplete == null) {\n      params = {\n        turnComplete: true,\n      };\n    }\n    const clientMessage: types.LiveClientMessage = this.tLiveClientContent(\n      this.apiClient,\n      params,\n    );\n    this.conn.send(JSON.stringify(clientMessage));\n  }\n\n  /**\n    Send a realtime message over the established connection.\n\n    @param params - Contains one property, `media`.\n\n      - `media` will be converted to a `Blob`\n\n    @experimental\n\n    @remanks\n    Use `sendRealtimeInput` for realtime audio chunks and video frames (images).\n\n    With `sendRealtimeInput` the api will respond to audio automatically\n    based on voice activity detection (VAD).\n\n    `sendRealtimeInput` is optimized for responsivness at the expense of\n    deterministic ordering guarantees. Audio and video tokens are to the\n    context when they become available.\n\n    Note: The Call signature expects a `Blob` object, but only a subset\n    of audio and image mimetypes are allowed.\n   */\n  sendRealtimeInput(params: types.SessionSendRealtimeInputParameters) {\n    if (params.media == null) {\n      throw new Error('Media is required.');\n    }\n\n    const clientMessage: types.LiveClientMessage =\n      this.tLiveClientRealtimeInput(this.apiClient, params);\n    this.conn.send(JSON.stringify(clientMessage));\n  }\n\n  /**\n    Send a function response message over the established connection.\n\n    @param params - Contains property `functionResponses`.\n\n      - `functionResponses` will be converted to a `functionResponses[]`\n\n    @remanks\n    Use `sendFunctionResponse` to reply to `LiveServerToolCall` from the server.\n\n    Use {@link LiveConnectConfig#tools} to configure the callable functions.\n\n    @experimental\n   */\n  sendToolResponse(params: types.SessionSendToolResponseParameters) {\n    if (params.functionResponses == null) {\n      throw new Error('Tool response parameters are required.');\n    }\n\n    const clientMessage: types.LiveClientMessage =\n      this.tLiveClienttToolResponse(this.apiClient, params);\n    this.conn.send(JSON.stringify(clientMessage));\n  }\n\n  /**\n     Terminates the WebSocket connection.\n\n     @experimental\n\n     @example\n     ```ts\n     const session = await ai.live.connect({\n       model: 'gemini-2.0-flash-exp',\n       config: {\n         responseModalities: [Modality.AUDIO],\n       }\n     });\n\n     session.close();\n     ```\n   */\n  close() {\n    this.conn.close();\n  }\n}\n\n// Converts an headers object to a \"map\" object as expected by the WebSocket\n// constructor. We use this as the Auth interface works with Headers objects\n// while the WebSocket constructor takes a map.\nfunction headersToMap(headers: Headers): Record<string, string> {\n  const headerMap: Record<string, string> = {};\n  headers.forEach((value, key) => {\n    headerMap[key] = value;\n  });\n  return headerMap;\n}\n\n// Converts a \"map\" object to a headers object. We use this as the Auth\n// interface works with Headers objects while the API client default headers\n// returns a map.\nfunction mapToHeaders(map: Record<string, string>): Headers {\n  const headers = new Headers();\n  for (const [key, value] of Object.entries(map)) {\n    headers.append(key, value);\n  }\n  return headers;\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {Auth} from './_auth';\nimport * as common from './_common';\nimport {Uploader} from './_uploader';\nimport {File, HttpOptions, HttpResponse, UploadFileConfig} from './types';\n\nconst CONTENT_TYPE_HEADER = 'Content-Type';\nconst USER_AGENT_HEADER = 'User-Agent';\nconst GOOGLE_API_CLIENT_HEADER = 'x-goog-api-client';\nconst SDK_VERSION = '0.3.1'; // x-release-please-version\nconst LIBRARY_LABEL = `google-genai-sdk/${SDK_VERSION}`;\nconst VERTEX_AI_API_DEFAULT_VERSION = 'v1beta1';\nconst GOOGLE_AI_API_DEFAULT_VERSION = 'v1beta';\nconst responseLineRE = /^data: (.*)(?:\\n\\n|\\r\\r|\\r\\n\\r\\n)/;\n\n/**\n * Client errors raised by the GenAI API.\n */\nexport class ClientError extends Error {\n  constructor(message: string, stackTrace?: string) {\n    if (stackTrace) {\n      super(message, {cause: stackTrace});\n    } else {\n      super(message, {cause: new Error().stack});\n    }\n    this.message = message;\n    this.name = 'ClientError';\n  }\n}\n\n/**\n * Server errors raised by the GenAI API.\n */\nexport class ServerError extends Error {\n  constructor(message: string, stackTrace?: string) {\n    if (stackTrace) {\n      super(message, {cause: stackTrace});\n    } else {\n      super(message, {cause: new Error().stack});\n    }\n    this.message = message;\n    this.name = 'ServerError';\n  }\n}\n\n/**\n * Options for initializing the ApiClient. The ApiClient uses the parameters\n * for authentication purposes as well as to infer if SDK should send the\n * request to Vertex AI or Gemini API.\n */\nexport interface ApiClientInitOptions {\n  /**\n   * The object used for adding authentication headers to API requests.\n   */\n  auth: Auth;\n  /**\n   * The uploader to use for uploading files. This field is required for\n   * creating a client, will be set through the Node_client or Web_client.\n   */\n  uploader: Uploader;\n  /**\n   * Optional. The Google Cloud project ID for Vertex AI users.\n   * It is not the numeric project name.\n   * If not provided, SDK will try to resolve it from runtime environment.\n   */\n  project?: string;\n  /**\n   * Optional. The Google Cloud project location for Vertex AI users.\n   * If not provided, SDK will try to resolve it from runtime environment.\n   */\n  location?: string;\n  /**\n   * The API Key. This is required for Gemini API users.\n   */\n  apiKey?: string;\n  /**\n   * Optional. Set to true if you intend to call Vertex AI endpoints.\n   * If unset, default SDK behavior is to call Gemini API.\n   */\n  vertexai?: boolean;\n  /**\n   * Optional. The API version for the endpoint.\n   * If unset, SDK will choose a default api version.\n   */\n  apiVersion?: string;\n  /**\n   * Optional. A set of customizable configuration for HTTP requests.\n   */\n  httpOptions?: HttpOptions;\n  /**\n   * Optional. An extra string to append at the end of the User-Agent header.\n   *\n   * This can be used to e.g specify the runtime and its version.\n   */\n  userAgentExtra?: string;\n}\n\n/**\n * Represents the necessary information to send a request to an API endpoint.\n * This interface defines the structure for constructing and executing HTTP\n * requests.\n */\nexport interface HttpRequest {\n  /**\n   * URL path from the modules, this path is appended to the base API URL to\n   * form the complete request URL.\n   *\n   * If you wish to set full URL, use httpOptions.baseUrl instead. Example to\n   * set full URL in the request:\n   *\n   * const request: HttpRequest = {\n   *   path: '',\n   *   httpOptions: {\n   *     baseUrl: 'https://<custom-full-url>',\n   *     apiVersion: '',\n   *   },\n   *   httpMethod: 'GET',\n   * };\n   *\n   * The result URL will be: https://<custom-full-url>\n   *\n   */\n  path: string;\n  /**\n   * Optional query parameters to be appended to the request URL.\n   */\n  queryParams?: Record<string, string>;\n  /**\n   * Optional request body in json string or Blob format, GET request doesn't\n   * need a request body.\n   */\n  body?: string | Blob;\n  /**\n   * The HTTP method to be used for the request.\n   */\n  httpMethod: 'GET' | 'POST' | 'PATCH' | 'DELETE';\n  /**\n   * Optional set of customizable configuration for HTTP requests.\n   */\n  httpOptions?: HttpOptions;\n}\n\n/**\n * The ApiClient class is used to send requests to the Gemini API or Vertex AI\n * endpoints.\n */\nexport class ApiClient {\n  readonly clientOptions: ApiClientInitOptions;\n\n  constructor(opts: ApiClientInitOptions) {\n    this.clientOptions = {\n      ...opts,\n      project: opts.project,\n      location: opts.location,\n      apiKey: opts.apiKey,\n      vertexai: opts.vertexai,\n    };\n\n    const initHttpOptions: HttpOptions = {};\n\n    if (this.clientOptions.vertexai) {\n      initHttpOptions.apiVersion =\n        this.clientOptions.apiVersion ?? VERTEX_AI_API_DEFAULT_VERSION;\n      initHttpOptions.baseUrl = `https://${this.clientOptions.location}-aiplatform.googleapis.com/`;\n      this.clientOptions.apiKey = undefined; // unset API key.\n    } else {\n      initHttpOptions.apiVersion =\n        this.clientOptions.apiVersion ?? GOOGLE_AI_API_DEFAULT_VERSION;\n      initHttpOptions.baseUrl = `https://generativelanguage.googleapis.com/`;\n    }\n\n    initHttpOptions.headers = this.getDefaultHeaders();\n\n    this.clientOptions.httpOptions = initHttpOptions;\n\n    if (opts.httpOptions) {\n      this.clientOptions.httpOptions = this.patchHttpOptions(\n        initHttpOptions,\n        opts.httpOptions,\n      );\n    }\n  }\n\n  isVertexAI(): boolean {\n    return this.clientOptions.vertexai ?? false;\n  }\n\n  getProject() {\n    return this.clientOptions.project;\n  }\n\n  getLocation() {\n    return this.clientOptions.location;\n  }\n\n  getApiVersion() {\n    if (\n      this.clientOptions.httpOptions &&\n      this.clientOptions.httpOptions.apiVersion !== undefined\n    ) {\n      return this.clientOptions.httpOptions.apiVersion;\n    }\n    throw new Error('API version is not set.');\n  }\n\n  getBaseUrl() {\n    if (\n      this.clientOptions.httpOptions &&\n      this.clientOptions.httpOptions.baseUrl !== undefined\n    ) {\n      return this.clientOptions.httpOptions.baseUrl;\n    }\n    throw new Error('Base URL is not set.');\n  }\n\n  getRequestUrl() {\n    return this.getRequestUrlInternal(this.clientOptions.httpOptions);\n  }\n\n  getHeaders() {\n    if (\n      this.clientOptions.httpOptions &&\n      this.clientOptions.httpOptions.headers !== undefined\n    ) {\n      return this.clientOptions.httpOptions.headers;\n    } else {\n      throw new Error('Headers are not set.');\n    }\n  }\n\n  private getRequestUrlInternal(httpOptions?: HttpOptions) {\n    if (\n      !httpOptions ||\n      httpOptions.baseUrl === undefined ||\n      httpOptions.apiVersion === undefined\n    ) {\n      throw new Error('HTTP options are not correctly set.');\n    }\n    const baseUrl = httpOptions.baseUrl.endsWith('/')\n      ? httpOptions.baseUrl.slice(0, -1)\n      : httpOptions.baseUrl;\n    const urlElement: Array<string> = [baseUrl];\n    if (httpOptions.apiVersion && httpOptions.apiVersion !== '') {\n      urlElement.push(httpOptions.apiVersion);\n    }\n    return urlElement.join('/');\n  }\n\n  getBaseResourcePath() {\n    return `projects/${this.clientOptions.project}/locations/${\n      this.clientOptions.location\n    }`;\n  }\n\n  getApiKey() {\n    return this.clientOptions.apiKey;\n  }\n\n  getWebsocketBaseUrl() {\n    const baseUrl = this.getBaseUrl();\n    const urlParts = new URL(baseUrl);\n    urlParts.protocol = 'wss';\n    return urlParts.toString();\n  }\n\n  setBaseUrl(url: string) {\n    if (this.clientOptions.httpOptions) {\n      this.clientOptions.httpOptions.baseUrl = url;\n    } else {\n      throw new Error('HTTP options are not correctly set.');\n    }\n  }\n\n  private constructUrl(path: string, httpOptions: HttpOptions): URL {\n    const urlElement: Array<string> = [this.getRequestUrlInternal(httpOptions)];\n    if (this.clientOptions.vertexai && !path.startsWith('projects/')) {\n      urlElement.push(this.getBaseResourcePath());\n    }\n    if (path !== '') {\n      urlElement.push(path);\n    }\n    const url = new URL(`${urlElement.join('/')}`);\n\n    return url;\n  }\n\n  async request(request: HttpRequest): Promise<HttpResponse> {\n    let patchedHttpOptions = this.clientOptions.httpOptions!;\n    if (request.httpOptions) {\n      patchedHttpOptions = this.patchHttpOptions(\n        this.clientOptions.httpOptions!,\n        request.httpOptions,\n      );\n    }\n\n    const url = this.constructUrl(request.path, patchedHttpOptions);\n    if (request.queryParams) {\n      for (const [key, value] of Object.entries(request.queryParams)) {\n        url.searchParams.append(key, String(value));\n      }\n    }\n    let requestInit: RequestInit = {};\n    if (request.httpMethod === 'GET') {\n      if (request.body && request.body !== '{}') {\n        throw new Error(\n          'Request body should be empty for GET request, but got non empty request body',\n        );\n      }\n    } else {\n      requestInit.body = request.body;\n    }\n    requestInit = await this.includeExtraHttpOptionsToRequestInit(\n      requestInit,\n      patchedHttpOptions,\n    );\n    return this.unaryApiCall(url, requestInit, request.httpMethod);\n  }\n\n  private patchHttpOptions(\n    baseHttpOptions: HttpOptions,\n    requestHttpOptions: HttpOptions,\n  ): HttpOptions {\n    const patchedHttpOptions = JSON.parse(\n      JSON.stringify(baseHttpOptions),\n    ) as HttpOptions;\n\n    for (const [key, value] of Object.entries(requestHttpOptions)) {\n      // Records compile to objects.\n      if (typeof value === 'object') {\n        // @ts-expect-error TS2345TS7053: Element implicitly has an 'any' type\n        // because expression of type 'string' can't be used to index type\n        // 'HttpOptions'.\n        patchedHttpOptions[key] = {...patchedHttpOptions[key], ...value};\n      } else if (value !== undefined) {\n        // @ts-expect-error TS2345TS7053: Element implicitly has an 'any' type\n        // because expression of type 'string' can't be used to index type\n        // 'HttpOptions'.\n        patchedHttpOptions[key] = value;\n      }\n    }\n    return patchedHttpOptions;\n  }\n\n  async requestStream(\n    request: HttpRequest,\n    // TODO: Replace with HttpResponse.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): Promise<any> {\n    let patchedHttpOptions = this.clientOptions.httpOptions!;\n    if (request.httpOptions) {\n      patchedHttpOptions = this.patchHttpOptions(\n        this.clientOptions.httpOptions!,\n        request.httpOptions,\n      );\n    }\n\n    const url = this.constructUrl(request.path, patchedHttpOptions);\n    if (!url.searchParams.has('alt') || url.searchParams.get('alt') !== 'sse') {\n      url.searchParams.set('alt', 'sse');\n    }\n    let requestInit: RequestInit = {};\n    requestInit.body = request.body;\n    requestInit = await this.includeExtraHttpOptionsToRequestInit(\n      requestInit,\n      patchedHttpOptions,\n    );\n    return this.streamApiCall(url, requestInit, request.httpMethod);\n  }\n\n  private async includeExtraHttpOptionsToRequestInit(\n    requestInit: RequestInit,\n    httpOptions: HttpOptions,\n  ): Promise<RequestInit> {\n    if (httpOptions && httpOptions.timeout && httpOptions.timeout > 0) {\n      const abortController = new AbortController();\n      const signal = abortController.signal;\n      setTimeout(() => abortController.abort(), httpOptions.timeout);\n      requestInit.signal = signal;\n    }\n    requestInit.headers = await this.getHeadersInternal(httpOptions);\n    return requestInit;\n  }\n\n  private async unaryApiCall(\n    url: URL,\n    requestInit: RequestInit,\n    httpMethod: 'GET' | 'POST' | 'PATCH' | 'DELETE',\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): Promise<HttpResponse> {\n    return this.apiCall(url.toString(), {\n      ...requestInit,\n      method: httpMethod,\n    })\n      .then(async (response) => {\n        await throwErrorIfNotOK(response);\n        return new HttpResponse(response);\n      })\n      .catch((e) => {\n        if (e instanceof Error) {\n          throw e;\n        } else {\n          throw new Error(JSON.stringify(e));\n        }\n      });\n  }\n\n  private async streamApiCall(\n    url: URL,\n    requestInit: RequestInit,\n    httpMethod: 'GET' | 'POST' | 'PATCH' | 'DELETE',\n    // TODO: Replace with HttpResponse.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): Promise<AsyncGenerator<any>> {\n    return this.apiCall(url.toString(), {\n      ...requestInit,\n      method: httpMethod,\n    })\n      .then(async (response) => {\n        await throwErrorIfNotOK(response);\n        return this.processStreamResponse(response);\n      })\n      .catch((e) => {\n        if (e instanceof Error) {\n          throw e;\n        } else {\n          throw new Error(JSON.stringify(e));\n        }\n      });\n  }\n\n  async *processStreamResponse(\n    response: Response,\n    // TODO: Replace with HttpResponse.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): AsyncGenerator<any> {\n    const reader = response?.body?.getReader();\n    const decoder = new TextDecoder('utf-8');\n    if (!reader) {\n      throw new Error('Response body is empty');\n    }\n\n    try {\n      let buffer = '';\n      while (true) {\n        const {done, value} = await reader.read();\n        if (done) {\n          if (buffer.trim().length > 0) {\n            throw new Error('Incomplete JSON segment at the end');\n          }\n          break;\n        }\n        const chunkString = decoder.decode(value);\n        buffer += chunkString;\n        let match = buffer.match(responseLineRE);\n        while (match) {\n          const processedChunkString = match[1];\n          try {\n            const chunkData = JSON.parse(processedChunkString);\n            yield chunkData;\n            buffer = buffer.slice(match[0].length);\n            match = buffer.match(responseLineRE);\n          } catch (e) {\n            throw new Error(\n              `exception parsing stream chunk ${processedChunkString}. ${e}`,\n            );\n          }\n        }\n      }\n    } finally {\n      reader.releaseLock();\n    }\n  }\n  private async apiCall(\n    url: string,\n    requestInit: RequestInit,\n  ): Promise<Response> {\n    return fetch(url, requestInit).catch((e) => {\n      throw new Error(`exception ${e} sending request`);\n    });\n  }\n\n  getDefaultHeaders(): Record<string, string> {\n    const headers: Record<string, string> = {};\n\n    const versionHeaderValue =\n      LIBRARY_LABEL + ' ' + this.clientOptions.userAgentExtra;\n\n    headers[USER_AGENT_HEADER] = versionHeaderValue;\n    headers[GOOGLE_API_CLIENT_HEADER] = versionHeaderValue;\n    headers[CONTENT_TYPE_HEADER] = 'application/json';\n\n    return headers;\n  }\n\n  private async getHeadersInternal(\n    httpOptions: HttpOptions | undefined,\n  ): Promise<Headers> {\n    const headers = new Headers();\n    if (httpOptions && httpOptions.headers) {\n      for (const [key, value] of Object.entries(httpOptions.headers)) {\n        headers.append(key, value);\n      }\n    }\n    await this.clientOptions.auth.addAuthHeaders(headers);\n    return headers;\n  }\n\n  /**\n   * Uploads a file asynchronously using Gemini API only, this is not supported\n   * in Vertex AI.\n   *\n   * @param file The string path to the file to be uploaded or a Blob object.\n   * @param config Optional parameters specified in the `UploadFileConfig`\n   *     interface. @see {@link UploadFileConfig}\n   * @return A promise that resolves to a `File` object.\n   * @throws An error if called on a Vertex AI client.\n   * @throws An error if the `mimeType` is not provided and can not be inferred,\n   */\n  async uploadFile(\n    file: string | Blob,\n    config?: UploadFileConfig,\n  ): Promise<File> {\n    const fileToUpload: File = {};\n    if (config != null) {\n      fileToUpload.mimeType = config.mimeType;\n      fileToUpload.name = config.name;\n      fileToUpload.displayName = config.displayName;\n    }\n\n    if (fileToUpload.name && !fileToUpload.name.startsWith('files/')) {\n      fileToUpload.name = `files/${fileToUpload.name}`;\n    }\n\n    const uploader = this.clientOptions.uploader;\n    const fileStat = await uploader.stat(file);\n    fileToUpload.sizeBytes = fileStat.size;\n    const mimeType = config?.mimeType ?? fileStat.type;\n    if (mimeType === undefined || mimeType === '') {\n      throw new Error(\n        'Can not determine mimeType. Please provide mimeType in the config.',\n      );\n    }\n    fileToUpload.mimeType = mimeType;\n\n    const uploadUrl = await this.fetchUploadUrl(fileToUpload, config);\n    return uploader.upload(file, uploadUrl, this);\n  }\n\n  private async fetchUploadUrl(\n    file: File,\n    config?: UploadFileConfig,\n  ): Promise<string> {\n    let httpOptions: HttpOptions = {};\n    if (config?.httpOptions) {\n      httpOptions = config.httpOptions;\n    } else {\n      httpOptions = {\n        apiVersion: '', // api-version is set in the path.\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Goog-Upload-Protocol': 'resumable',\n          'X-Goog-Upload-Command': 'start',\n          'X-Goog-Upload-Header-Content-Length': `${file.sizeBytes}`,\n          'X-Goog-Upload-Header-Content-Type': `${file.mimeType}`,\n        },\n      };\n    }\n\n    const body: Record<string, File> = {\n      'file': file,\n    };\n    const httpResponse = await this.request({\n      path: common.formatMap(\n        'upload/v1beta/files',\n        body['_url'] as Record<string, unknown>,\n      ),\n      body: JSON.stringify(body),\n      httpMethod: 'POST',\n      httpOptions,\n    });\n\n    if (!httpResponse || !httpResponse?.headers) {\n      throw new Error(\n        'Server did not return an HttpResponse or the returned HttpResponse did not have headers.',\n      );\n    }\n\n    const uploadUrl: string | undefined =\n      httpResponse?.headers?.['x-goog-upload-url'];\n    if (uploadUrl === undefined) {\n      throw new Error(\n        'Failed to get upload url. Server did not return the x-google-upload-url in the headers',\n      );\n    }\n    return uploadUrl;\n  }\n}\n\nasync function throwErrorIfNotOK(\n  response: Response | undefined,\n) {\n  if (response === undefined) {\n    throw new ServerError('response is undefined');\n  }\n  if (!response.ok) {\n    const status: number = response.status;\n    const statusText: string = response.statusText;\n    let errorBody: Record<string, unknown>;\n    if (response.headers.get('content-type')?.includes('application/json')) {\n      errorBody = await response.json();\n    } else {\n      errorBody = {\n        error: {\n          message: 'exception parsing response',\n          code: response.status,\n          status: response.statusText,\n        },\n      };\n    }\n    const errorMessage = `got status: ${status} ${statusText}. ${JSON.stringify(\n      errorBody,\n    )}`;\n    if (status >= 400 && status < 500) {\n      const clientError = new ClientError(errorMessage);\n      throw clientError;\n    } else if (status >= 500 && status < 600) {\n      const serverError = new ServerError(errorMessage);\n      throw serverError;\n    }\n    throw new Error(errorMessage);\n  }\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Code generated by the Google Gen AI SDK generator DO NOT EDIT.\n\nimport {ApiClient} from './_api_client';\nimport * as common from './_common';\nimport {BaseModule} from './_common';\nimport * as t from './_transformers';\nimport {PagedItem, Pager} from './pagers';\nimport * as types from './types';\n\nexport class Files extends BaseModule {\n  constructor(private readonly apiClient: ApiClient) {\n    super();\n  }\n\n  /**\n   * Lists all current project files from the service.\n   *\n   * @param params - The parameters for the list request\n   * @return The paginated results of the list of files\n   *\n   * @example\n   * The following code prints the names of all files from the service, the\n   * size of each page is 10.\n   *\n   * ```ts\n   * const listResponse = await ai.files.list({config: {'pageSize': 10}});\n   * for await (const file of listResponse) {\n   *   console.log(file.name);\n   * }\n   * ```\n   */\n  list = async (\n    params: types.ListFilesParameters = {},\n  ): Promise<Pager<types.File>> => {\n    return new Pager<types.File>(\n      PagedItem.PAGED_ITEM_FILES,\n      (x: types.ListFilesParameters) => this.listInternal(x),\n      await this.listInternal(params),\n      params,\n    );\n  };\n\n  /**\n   * Uploads a file asynchronously to the Gemini API.\n   * This method is not available in Vertex AI.\n   * Supported upload sources:\n   * - Node.js: File path (string) or Blob object.\n   * - Browser: Blob object (e.g., File).\n   *\n   * @remarks\n   * The `mimeType` can be specified in the `config` parameter. If omitted:\n   *  - For file path (string) inputs, the `mimeType` will be inferred from the\n   *     file extension.\n   *  - For Blob object inputs, the `mimeType` will be set to the Blob's `type`\n   *     property.\n   * Somex eamples for file extension to mimeType mapping:\n   * .txt -> text/plain\n   * .json -> application/json\n   * .jpg  -> image/jpeg\n   * .png -> image/png\n   * .mp3 -> audio/mpeg\n   * .mp4 -> video/mp4\n   *\n   * This section can contain multiple paragraphs and code examples.\n   *\n   * @param params - Optional parameters specified in the\n   *        `common.UploadFileParameters` interface.\n   *        Optional @see {@link common.UploadFileParameters}\n   * @return A promise that resolves to a `types.File` object.\n   * @throws An error if called on a Vertex AI client.\n   * @throws An error if the `mimeType` is not provided and can not be inferred,\n   * the `mimeType` can be provided in the `params.config` parameter.\n   * @throws An error occurs if a suitable upload location cannot be established.\n   *\n   * @example\n   * The following code uploads a file to Gemini API.\n   *\n   * ```ts\n   * const file = await ai.files.upload({file: 'file.txt', config: {\n   *   mimeType: 'text/plain',\n   * }});\n   * console.log(file.name);\n   * ```\n   */\n  async upload(params: common.UploadFileParameters): Promise<types.File> {\n    if (this.apiClient.isVertexAI()) {\n      throw new Error(\n        'Vertex AI does not support uploading files. You can share files through a GCS bucket.',\n      );\n    }\n\n    return this.apiClient\n      .uploadFile(params.file, params.config)\n      .then((response) => {\n        const file = fileFromMldev(this.apiClient, response);\n        return file as types.File;\n      });\n  }\n\n  private async listInternal(\n    params: types.ListFilesParameters,\n  ): Promise<types.ListFilesResponse> {\n    let response: Promise<types.ListFilesResponse>;\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = listFilesParametersToVertex(this.apiClient, params);\n      path = common.formatMap('None', body['_url'] as Record<string, unknown>);\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'GET',\n          httpOptions: params.config?.httpOptions,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.ListFilesResponse>;\n\n      return response.then((apiResponse) => {\n        const resp = listFilesResponseFromVertex(this.apiClient, apiResponse);\n        const typedResp = new types.ListFilesResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    } else {\n      const body = listFilesParametersToMldev(this.apiClient, params);\n      path = common.formatMap('files', body['_url'] as Record<string, unknown>);\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'GET',\n          httpOptions: params.config?.httpOptions,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.ListFilesResponse>;\n\n      return response.then((apiResponse) => {\n        const resp = listFilesResponseFromMldev(this.apiClient, apiResponse);\n        const typedResp = new types.ListFilesResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    }\n  }\n\n  private async createInternal(\n    params: types.CreateFileParameters,\n  ): Promise<types.CreateFileResponse> {\n    let response: Promise<types.CreateFileResponse>;\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = createFileParametersToVertex(this.apiClient, params);\n      path = common.formatMap('', body['_url'] as Record<string, unknown>);\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'POST',\n          httpOptions: params.config?.httpOptions,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.CreateFileResponse>;\n\n      return response.then((apiResponse) => {\n        const resp = createFileResponseFromVertex(this.apiClient, apiResponse);\n        const typedResp = new types.CreateFileResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    } else {\n      const body = createFileParametersToMldev(this.apiClient, params);\n      path = common.formatMap(\n        'upload/v1beta/files',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'POST',\n          httpOptions: params.config?.httpOptions,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.CreateFileResponse>;\n\n      return response.then((apiResponse) => {\n        const resp = createFileResponseFromMldev(this.apiClient, apiResponse);\n        const typedResp = new types.CreateFileResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    }\n  }\n\n  /**\n   * Retrieves the file information from the service.\n   *\n   * @param params - The parameters for the get request\n   * @return The Promise that resolves to the types.File object requested.\n   *\n   * @example\n   * ```ts\n   * const config: GetFileParameters = {\n   *   name: fileName,\n   * };\n   * file = await ai.files.get(config);\n   * console.log(file.name);\n   * ```\n   */\n  async get(params: types.GetFileParameters): Promise<types.File> {\n    let response: Promise<types.File>;\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = getFileParametersToVertex(this.apiClient, params);\n      path = common.formatMap('None', body['_url'] as Record<string, unknown>);\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'GET',\n          httpOptions: params.config?.httpOptions,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.File>;\n\n      return response.then((apiResponse) => {\n        const resp = fileFromVertex(this.apiClient, apiResponse);\n\n        return resp as types.File;\n      });\n    } else {\n      const body = getFileParametersToMldev(this.apiClient, params);\n      path = common.formatMap(\n        'files/{file}',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'GET',\n          httpOptions: params.config?.httpOptions,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.File>;\n\n      return response.then((apiResponse) => {\n        const resp = fileFromMldev(this.apiClient, apiResponse);\n\n        return resp as types.File;\n      });\n    }\n  }\n}\n\nfunction listFilesConfigToMldev(\n  apiClient: ApiClient,\n  fromObject: types.ListFilesConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromPageSize = common.getValueByPath(fromObject, ['pageSize']);\n  if (parentObject !== undefined && fromPageSize != null) {\n    common.setValueByPath(parentObject, ['_query', 'pageSize'], fromPageSize);\n  }\n\n  const fromPageToken = common.getValueByPath(fromObject, ['pageToken']);\n  if (parentObject !== undefined && fromPageToken != null) {\n    common.setValueByPath(parentObject, ['_query', 'pageToken'], fromPageToken);\n  }\n\n  return toObject;\n}\n\nfunction listFilesConfigToVertex(\n  apiClient: ApiClient,\n  fromObject: types.ListFilesConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromPageSize = common.getValueByPath(fromObject, ['pageSize']);\n  if (parentObject !== undefined && fromPageSize != null) {\n    common.setValueByPath(parentObject, ['_query', 'pageSize'], fromPageSize);\n  }\n\n  const fromPageToken = common.getValueByPath(fromObject, ['pageToken']);\n  if (parentObject !== undefined && fromPageToken != null) {\n    common.setValueByPath(parentObject, ['_query', 'pageToken'], fromPageToken);\n  }\n\n  return toObject;\n}\n\nfunction listFilesParametersToMldev(\n  apiClient: ApiClient,\n  fromObject: types.ListFilesParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['config'],\n      listFilesConfigToMldev(apiClient, fromConfig, toObject),\n    );\n  }\n\n  return toObject;\n}\n\nfunction listFilesParametersToVertex(\n  apiClient: ApiClient,\n  fromObject: types.ListFilesParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (common.getValueByPath(fromObject, ['config']) !== undefined) {\n    throw new Error('config parameter is not supported in Vertex AI.');\n  }\n\n  return toObject;\n}\n\nfunction fileStatusToMldev(\n  apiClient: ApiClient,\n  fromObject: types.FileStatus,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromDetails = common.getValueByPath(fromObject, ['details']);\n  if (fromDetails != null) {\n    common.setValueByPath(toObject, ['details'], fromDetails);\n  }\n\n  const fromMessage = common.getValueByPath(fromObject, ['message']);\n  if (fromMessage != null) {\n    common.setValueByPath(toObject, ['message'], fromMessage);\n  }\n\n  const fromCode = common.getValueByPath(fromObject, ['code']);\n  if (fromCode != null) {\n    common.setValueByPath(toObject, ['code'], fromCode);\n  }\n\n  return toObject;\n}\n\nfunction fileStatusToVertex(\n  apiClient: ApiClient,\n  fromObject: types.FileStatus,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (common.getValueByPath(fromObject, ['details']) !== undefined) {\n    throw new Error('details parameter is not supported in Vertex AI.');\n  }\n\n  if (common.getValueByPath(fromObject, ['message']) !== undefined) {\n    throw new Error('message parameter is not supported in Vertex AI.');\n  }\n\n  if (common.getValueByPath(fromObject, ['code']) !== undefined) {\n    throw new Error('code parameter is not supported in Vertex AI.');\n  }\n\n  return toObject;\n}\n\nfunction fileToMldev(\n  apiClient: ApiClient,\n  fromObject: types.File,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(toObject, ['name'], fromName);\n  }\n\n  const fromDisplayName = common.getValueByPath(fromObject, ['displayName']);\n  if (fromDisplayName != null) {\n    common.setValueByPath(toObject, ['displayName'], fromDisplayName);\n  }\n\n  const fromMimeType = common.getValueByPath(fromObject, ['mimeType']);\n  if (fromMimeType != null) {\n    common.setValueByPath(toObject, ['mimeType'], fromMimeType);\n  }\n\n  const fromSizeBytes = common.getValueByPath(fromObject, ['sizeBytes']);\n  if (fromSizeBytes != null) {\n    common.setValueByPath(toObject, ['sizeBytes'], fromSizeBytes);\n  }\n\n  const fromCreateTime = common.getValueByPath(fromObject, ['createTime']);\n  if (fromCreateTime != null) {\n    common.setValueByPath(toObject, ['createTime'], fromCreateTime);\n  }\n\n  const fromExpirationTime = common.getValueByPath(fromObject, [\n    'expirationTime',\n  ]);\n  if (fromExpirationTime != null) {\n    common.setValueByPath(toObject, ['expirationTime'], fromExpirationTime);\n  }\n\n  const fromUpdateTime = common.getValueByPath(fromObject, ['updateTime']);\n  if (fromUpdateTime != null) {\n    common.setValueByPath(toObject, ['updateTime'], fromUpdateTime);\n  }\n\n  const fromSha256Hash = common.getValueByPath(fromObject, ['sha256Hash']);\n  if (fromSha256Hash != null) {\n    common.setValueByPath(toObject, ['sha256Hash'], fromSha256Hash);\n  }\n\n  const fromUri = common.getValueByPath(fromObject, ['uri']);\n  if (fromUri != null) {\n    common.setValueByPath(toObject, ['uri'], fromUri);\n  }\n\n  const fromDownloadUri = common.getValueByPath(fromObject, ['downloadUri']);\n  if (fromDownloadUri != null) {\n    common.setValueByPath(toObject, ['downloadUri'], fromDownloadUri);\n  }\n\n  const fromState = common.getValueByPath(fromObject, ['state']);\n  if (fromState != null) {\n    common.setValueByPath(toObject, ['state'], fromState);\n  }\n\n  const fromSource = common.getValueByPath(fromObject, ['source']);\n  if (fromSource != null) {\n    common.setValueByPath(toObject, ['source'], fromSource);\n  }\n\n  const fromVideoMetadata = common.getValueByPath(fromObject, [\n    'videoMetadata',\n  ]);\n  if (fromVideoMetadata != null) {\n    common.setValueByPath(toObject, ['videoMetadata'], fromVideoMetadata);\n  }\n\n  const fromError = common.getValueByPath(fromObject, ['error']);\n  if (fromError != null) {\n    common.setValueByPath(\n      toObject,\n      ['error'],\n      fileStatusToMldev(apiClient, fromError),\n    );\n  }\n\n  return toObject;\n}\n\nfunction fileToVertex(\n  apiClient: ApiClient,\n  fromObject: types.File,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (common.getValueByPath(fromObject, ['name']) !== undefined) {\n    throw new Error('name parameter is not supported in Vertex AI.');\n  }\n\n  if (common.getValueByPath(fromObject, ['displayName']) !== undefined) {\n    throw new Error('displayName parameter is not supported in Vertex AI.');\n  }\n\n  if (common.getValueByPath(fromObject, ['mimeType']) !== undefined) {\n    throw new Error('mimeType parameter is not supported in Vertex AI.');\n  }\n\n  if (common.getValueByPath(fromObject, ['sizeBytes']) !== undefined) {\n    throw new Error('sizeBytes parameter is not supported in Vertex AI.');\n  }\n\n  if (common.getValueByPath(fromObject, ['createTime']) !== undefined) {\n    throw new Error('createTime parameter is not supported in Vertex AI.');\n  }\n\n  if (common.getValueByPath(fromObject, ['expirationTime']) !== undefined) {\n    throw new Error('expirationTime parameter is not supported in Vertex AI.');\n  }\n\n  if (common.getValueByPath(fromObject, ['updateTime']) !== undefined) {\n    throw new Error('updateTime parameter is not supported in Vertex AI.');\n  }\n\n  if (common.getValueByPath(fromObject, ['sha256Hash']) !== undefined) {\n    throw new Error('sha256Hash parameter is not supported in Vertex AI.');\n  }\n\n  if (common.getValueByPath(fromObject, ['uri']) !== undefined) {\n    throw new Error('uri parameter is not supported in Vertex AI.');\n  }\n\n  if (common.getValueByPath(fromObject, ['downloadUri']) !== undefined) {\n    throw new Error('downloadUri parameter is not supported in Vertex AI.');\n  }\n\n  if (common.getValueByPath(fromObject, ['state']) !== undefined) {\n    throw new Error('state parameter is not supported in Vertex AI.');\n  }\n\n  if (common.getValueByPath(fromObject, ['source']) !== undefined) {\n    throw new Error('source parameter is not supported in Vertex AI.');\n  }\n\n  if (common.getValueByPath(fromObject, ['videoMetadata']) !== undefined) {\n    throw new Error('videoMetadata parameter is not supported in Vertex AI.');\n  }\n\n  if (common.getValueByPath(fromObject, ['error']) !== undefined) {\n    throw new Error('error parameter is not supported in Vertex AI.');\n  }\n\n  return toObject;\n}\n\nfunction createFileParametersToMldev(\n  apiClient: ApiClient,\n  fromObject: types.CreateFileParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromFile = common.getValueByPath(fromObject, ['file']);\n  if (fromFile != null) {\n    common.setValueByPath(toObject, ['file'], fileToMldev(apiClient, fromFile));\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    common.setValueByPath(toObject, ['config'], fromConfig);\n  }\n\n  return toObject;\n}\n\nfunction createFileParametersToVertex(\n  apiClient: ApiClient,\n  fromObject: types.CreateFileParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (common.getValueByPath(fromObject, ['file']) !== undefined) {\n    throw new Error('file parameter is not supported in Vertex AI.');\n  }\n\n  if (common.getValueByPath(fromObject, ['config']) !== undefined) {\n    throw new Error('config parameter is not supported in Vertex AI.');\n  }\n\n  return toObject;\n}\n\nfunction getFileParametersToMldev(\n  apiClient: ApiClient,\n  fromObject: types.GetFileParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'file'],\n      t.tFileName(apiClient, fromName),\n    );\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    common.setValueByPath(toObject, ['config'], fromConfig);\n  }\n\n  return toObject;\n}\n\nfunction getFileParametersToVertex(\n  apiClient: ApiClient,\n  fromObject: types.GetFileParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (common.getValueByPath(fromObject, ['name']) !== undefined) {\n    throw new Error('name parameter is not supported in Vertex AI.');\n  }\n\n  if (common.getValueByPath(fromObject, ['config']) !== undefined) {\n    throw new Error('config parameter is not supported in Vertex AI.');\n  }\n\n  return toObject;\n}\n\nfunction fileStatusFromMldev(\n  apiClient: ApiClient,\n  fromObject: types.FileStatus,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromDetails = common.getValueByPath(fromObject, ['details']);\n  if (fromDetails != null) {\n    common.setValueByPath(toObject, ['details'], fromDetails);\n  }\n\n  const fromMessage = common.getValueByPath(fromObject, ['message']);\n  if (fromMessage != null) {\n    common.setValueByPath(toObject, ['message'], fromMessage);\n  }\n\n  const fromCode = common.getValueByPath(fromObject, ['code']);\n  if (fromCode != null) {\n    common.setValueByPath(toObject, ['code'], fromCode);\n  }\n\n  return toObject;\n}\n\nfunction fileStatusFromVertex(\n  apiClient: ApiClient,\n  fromObject: types.FileStatus,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  return toObject;\n}\n\nfunction fileFromMldev(\n  apiClient: ApiClient,\n  fromObject: types.File,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(toObject, ['name'], fromName);\n  }\n\n  const fromDisplayName = common.getValueByPath(fromObject, ['displayName']);\n  if (fromDisplayName != null) {\n    common.setValueByPath(toObject, ['displayName'], fromDisplayName);\n  }\n\n  const fromMimeType = common.getValueByPath(fromObject, ['mimeType']);\n  if (fromMimeType != null) {\n    common.setValueByPath(toObject, ['mimeType'], fromMimeType);\n  }\n\n  const fromSizeBytes = common.getValueByPath(fromObject, ['sizeBytes']);\n  if (fromSizeBytes != null) {\n    common.setValueByPath(toObject, ['sizeBytes'], fromSizeBytes);\n  }\n\n  const fromCreateTime = common.getValueByPath(fromObject, ['createTime']);\n  if (fromCreateTime != null) {\n    common.setValueByPath(toObject, ['createTime'], fromCreateTime);\n  }\n\n  const fromExpirationTime = common.getValueByPath(fromObject, [\n    'expirationTime',\n  ]);\n  if (fromExpirationTime != null) {\n    common.setValueByPath(toObject, ['expirationTime'], fromExpirationTime);\n  }\n\n  const fromUpdateTime = common.getValueByPath(fromObject, ['updateTime']);\n  if (fromUpdateTime != null) {\n    common.setValueByPath(toObject, ['updateTime'], fromUpdateTime);\n  }\n\n  const fromSha256Hash = common.getValueByPath(fromObject, ['sha256Hash']);\n  if (fromSha256Hash != null) {\n    common.setValueByPath(toObject, ['sha256Hash'], fromSha256Hash);\n  }\n\n  const fromUri = common.getValueByPath(fromObject, ['uri']);\n  if (fromUri != null) {\n    common.setValueByPath(toObject, ['uri'], fromUri);\n  }\n\n  const fromDownloadUri = common.getValueByPath(fromObject, ['downloadUri']);\n  if (fromDownloadUri != null) {\n    common.setValueByPath(toObject, ['downloadUri'], fromDownloadUri);\n  }\n\n  const fromState = common.getValueByPath(fromObject, ['state']);\n  if (fromState != null) {\n    common.setValueByPath(toObject, ['state'], fromState);\n  }\n\n  const fromSource = common.getValueByPath(fromObject, ['source']);\n  if (fromSource != null) {\n    common.setValueByPath(toObject, ['source'], fromSource);\n  }\n\n  const fromVideoMetadata = common.getValueByPath(fromObject, [\n    'videoMetadata',\n  ]);\n  if (fromVideoMetadata != null) {\n    common.setValueByPath(toObject, ['videoMetadata'], fromVideoMetadata);\n  }\n\n  const fromError = common.getValueByPath(fromObject, ['error']);\n  if (fromError != null) {\n    common.setValueByPath(\n      toObject,\n      ['error'],\n      fileStatusFromMldev(apiClient, fromError),\n    );\n  }\n\n  return toObject;\n}\n\nfunction fileFromVertex(\n  apiClient: ApiClient,\n  fromObject: types.File,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  return toObject;\n}\n\nfunction listFilesResponseFromMldev(\n  apiClient: ApiClient,\n  fromObject: types.ListFilesResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromNextPageToken = common.getValueByPath(fromObject, [\n    'nextPageToken',\n  ]);\n  if (fromNextPageToken != null) {\n    common.setValueByPath(toObject, ['nextPageToken'], fromNextPageToken);\n  }\n\n  const fromFiles = common.getValueByPath(fromObject, ['files']);\n  if (fromFiles != null) {\n    if (Array.isArray(fromFiles)) {\n      common.setValueByPath(\n        toObject,\n        ['files'],\n        fromFiles.map((item) => {\n          return fileFromMldev(apiClient, item);\n        }),\n      );\n    } else {\n      common.setValueByPath(toObject, ['files'], fromFiles);\n    }\n  }\n\n  return toObject;\n}\n\nfunction listFilesResponseFromVertex(\n  apiClient: ApiClient,\n  fromObject: types.ListFilesResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  return toObject;\n}\n\nfunction createFileResponseFromMldev(\n  apiClient: ApiClient,\n  fromObject: types.CreateFileResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromHttpHeaders = common.getValueByPath(fromObject, ['httpHeaders']);\n  if (fromHttpHeaders != null) {\n    common.setValueByPath(toObject, ['httpHeaders'], fromHttpHeaders);\n  }\n\n  return toObject;\n}\n\nfunction createFileResponseFromVertex(\n  apiClient: ApiClient,\n  fromObject: types.CreateFileResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromHttpHeaders = common.getValueByPath(fromObject, ['httpHeaders']);\n  if (fromHttpHeaders != null) {\n    common.setValueByPath(toObject, ['httpHeaders'], fromHttpHeaders);\n  }\n\n  return toObject;\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport function crossError(): Error {\n  // TODO(b/399934880): this message needs a link to a help page explaining how to enable conditional exports\n  return new Error(`This feature requires the web or Node specific @google/genai implementation, you can fix this by either:\n\n*Enabling conditional exports for your project [recommended]*\n\n*Using a platform specific import* - Make sure your code imports either '@google/genai/web' or '@google/genai/node' instead of '@google/genai'.\n`);\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport {ApiClient} from '../_api_client';\nimport {FileStat, Uploader} from '../_uploader';\nimport {File, HttpResponse} from '../types';\n\nimport {crossError} from './_cross_error';\n\nexport const MAX_CHUNK_SIZE = 1024 * 1024 * 8; // bytes\n// TODO(b/401271082): re-enable lint once CrossUploader is implemented.\n/*  eslint-disable @typescript-eslint/no-unused-vars */\nexport class CrossUploader implements Uploader {\n  async upload(\n    file: string | Blob,\n    uploadUrl: string,\n    apiClient: ApiClient,\n  ): Promise<File> {\n    throw crossError();\n  }\n\n  //TODO(b/401351146) Implement CrossUploader's methods.\n  async stat(file: string | Blob): Promise<FileStat> {\n    throw crossError();\n  }\n\n  async uploadBlob(\n    file: Blob,\n    uploadUrl: string,\n    apiClient: ApiClient,\n  ): Promise<File> {\n    let fileSize = 0;\n    let offset = 0;\n    let response: HttpResponse = new HttpResponse(new Response());\n    let uploadCommand = 'upload';\n    fileSize = file.size;\n    while (offset < fileSize) {\n      const chunkSize = Math.min(MAX_CHUNK_SIZE, fileSize - offset);\n      const chunk = file.slice(offset, offset + chunkSize);\n      if (offset + chunkSize >= fileSize) {\n        uploadCommand += ', finalize';\n      }\n      response = await apiClient.request({\n        path: '',\n        body: chunk,\n        httpMethod: 'POST',\n        httpOptions: {\n          apiVersion: '',\n          baseUrl: uploadUrl,\n          headers: {\n            'X-Goog-Upload-Command': uploadCommand,\n            'X-Goog-Upload-Offset': String(offset),\n            'Content-Length': String(chunkSize),\n          },\n        },\n      });\n      offset += chunkSize;\n      // The `x-goog-upload-status` header field can be `active`, `final` and\n      //`cancelled` in resposne.\n      if (response?.headers?.['x-goog-upload-status'] !== 'active') {\n        break;\n      }\n      // TODO(b/401391430) Investigate why the upload status is not finalized\n      // even though all content has been uploaded.\n      if (fileSize <= offset) {\n        throw new Error(\n          'All content has been uploaded, but the upload status is not finalized.',\n        );\n      }\n    }\n    const responseJson = (await response?.json()) as Record<\n      string,\n      File | unknown\n    >;\n    if (response?.headers?.['x-goog-upload-status'] !== 'final') {\n      throw new Error('Failed to upload file: Upload status is not finalized.');\n    }\n    return responseJson['file'] as File;\n  }\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport {ApiClient} from '../_api_client';\nimport {FileStat, Uploader} from '../_uploader';\nimport {CrossUploader} from '../cross/_cross_uploader';\nimport {File} from '../types';\n\nexport class BrowserUploader implements Uploader {\n  async upload(\n    file: string | Blob,\n    uploadUrl: string,\n    apiClient: ApiClient,\n  ): Promise<File> {\n    if (typeof file === 'string') {\n      throw new Error('File path is not supported in browser uploader.');\n    }\n\n    const crossUploader = new CrossUploader();\n    return await crossUploader.uploadBlob(file, uploadUrl, apiClient);\n  }\n\n  async stat(file: string | Blob): Promise<FileStat> {\n    if (typeof file === 'string') {\n      throw new Error('File path is not supported in browser uploader.');\n    } else {\n      const fileStat: FileStat = {size: file.size, type: file.type};\n      return fileStat;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n  WebSocketCallbacks,\n  WebSocketFactory,\n  WebSocket as Ws,\n} from '../_websocket';\n\n// TODO((b/401271082): re-enable lint once BrowserWebSocketFactory is\n// implemented.\n/*  eslint-disable @typescript-eslint/no-unused-vars */\nexport class BrowserWebSocketFactory implements WebSocketFactory {\n  create(\n    url: string,\n    headers: Record<string, string>,\n    callbacks: WebSocketCallbacks,\n  ): Ws {\n    return new BrowserWebSocket(url, headers, callbacks);\n  }\n}\n\nexport class BrowserWebSocket implements Ws {\n  private ws?: WebSocket;\n\n  constructor(\n    private readonly url: string,\n    private readonly headers: Record<string, string>,\n    private readonly callbacks: WebSocketCallbacks,\n  ) {}\n\n  connect(): void {\n    this.ws = new WebSocket(this.url);\n\n    this.ws.onopen = this.callbacks.onopen;\n    this.ws.onerror = this.callbacks.onerror;\n    this.ws.onclose = this.callbacks.onclose;\n    this.ws.onmessage = this.callbacks.onmessage;\n  }\n\n  send(message: string) {\n    if (this.ws === undefined) {\n      throw new Error('WebSocket is not connected');\n    }\n\n    this.ws.send(message);\n  }\n\n  close() {\n    if (this.ws === undefined) {\n      throw new Error('WebSocket is not connected');\n    }\n\n    this.ws.close();\n  }\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {Auth} from '../_auth';\n\nexport const GOOGLE_API_KEY_HEADER = 'x-goog-api-key';\n// TODO(b/395122533): We need a secure client side authentication mechanism.\nexport class WebAuth implements Auth {\n  constructor(private readonly apiKey: string) {}\n\n  async addAuthHeaders(headers: Headers): Promise<void> {\n    if (headers.get(GOOGLE_API_KEY_HEADER) !== null) {\n      return;\n    }\n    headers.append(GOOGLE_API_KEY_HEADER, this.apiKey);\n  }\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {ApiClient} from '../_api_client';\nimport {Caches} from '../caches';\nimport {Chats} from '../chats';\nimport {GoogleGenAIOptions} from '../client';\nimport {Files} from '../files';\nimport {Live} from '../live';\nimport {Models} from '../models';\n\nimport {BrowserUploader} from './_browser_uploader';\nimport {BrowserWebSocketFactory} from './_browser_websocket';\nimport {WebAuth} from './_web_auth';\n\nconst LANGUAGE_LABEL_PREFIX = 'gl-node/';\n\n/**\n * The Google GenAI SDK.\n *\n * @remarks\n * Provides access to the GenAI features through either the {@link https://cloud.google.com/vertex-ai/docs/reference/rest | Gemini API}\n * or the {@link https://cloud.google.com/vertex-ai/docs/reference/rest | Vertex AI API}.\n *\n * The {@link GoogleGenAIOptions.vertexai} value determines which of the API services to use.\n *\n * When using the Gemini API, a {@link GoogleGenAIOptions.apiKey} must also be set,\n * when using Vertex AI {@link GoogleGenAIOptions.project} and {@link GoogleGenAIOptions.location} must also be set.\n *\n * @example\n * Initializing the SDK for using the Gemini API:\n * ```ts\n * import {GoogleGenAI} from '@google/genai';\n * const ai = new GoogleGenAI({apiKey: 'GEMINI_API_KEY'});\n * ```\n *\n * @example\n * Initializing the SDK for using the Vertex AI API:\n * ```ts\n * import {GoogleGenAI} from '@google/genai';\n * const ai = new GoogleGenAI({\n *   vertexai: true,\n *   project: 'PROJECT_ID',\n *   location: 'PROJECT_LOCATION'\n * });\n * ```\n *\n */\nexport class GoogleGenAI {\n  protected readonly apiClient: ApiClient;\n  private readonly apiKey?: string;\n  public readonly vertexai: boolean;\n  private readonly apiVersion?: string;\n  readonly models: Models;\n  readonly live: Live;\n  readonly chats: Chats;\n  readonly caches: Caches;\n  readonly files: Files;\n\n  constructor(options: GoogleGenAIOptions) {\n    if (options.apiKey == null) {\n      throw new Error('An API Key must be set when running in a browser');\n    }\n    this.vertexai = options.vertexai ?? false;\n    this.apiKey = options.apiKey;\n    this.apiVersion = options.apiVersion;\n    const auth = new WebAuth(this.apiKey);\n    this.apiClient = new ApiClient({\n      auth: auth,\n      apiVersion: this.apiVersion,\n      apiKey: this.apiKey,\n      vertexai: this.vertexai,\n      httpOptions: options.httpOptions,\n      userAgentExtra: LANGUAGE_LABEL_PREFIX + 'web',\n      uploader: new BrowserUploader(),\n    });\n    this.models = new Models(this.apiClient);\n    this.live = new Live(this.apiClient, auth, new BrowserWebSocketFactory());\n    this.chats = new Chats(this.models, this.apiClient);\n    this.caches = new Caches(this.apiClient);\n    this.files = new Files(this.apiClient);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}